<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.6.1058" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/13/06 09:42:43" />
  <title>9.1.2  The WHERE Constraint</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Acu4GL User's Guide <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="4gl9.htm">Chapter 9:  Performance and Troubleshooting</a> &gt; <a href="4gl92.htm">9.1 Performance Issues</a> &gt; </p>
<a name="wp1036752"> </a><h2 class="pHeading2">
9.1.2  The WHERE Constraint
</h2>
<a name="wp1036755"> </a><p class="pBody">
The Acu4GL WHERE constraint is an external variable that gives the developer some control over the data searches that result from database queries.  It can help to improve performance in some situations.  This section describes its purpose and shows how it is implemented.
</p>
<a name="wp1036756"> </a><p class="pBody">
COBOL data processing is based on keyed READ operations following a positioning operation.  Records are read until the key value being processed changes.  Because traditional COBOL data processing is based on a B+ tree file system, the overhead for such operations is relatively minor.  
</p>
<a name="wp1036757"> </a><p class="pBody">
RDBMS data processing introduces a new level of complexity to data processing.  The database's <em class="cEmphasis">query optimizer</em> receives the SQL query for the COBOL operation being performed and then builds a <em class="cEmphasis">working set</em> of data that satisfies that query.  Because the database optimizer has many different possible execution methods, this can result in poor performance if the optimizer chooses a query execution path that is less than optimal. 
</p>
<a name="wp1036758"> </a><p class="pBody">
Performance degradation may also result from the fact that queries generated by COBOL operations result in <em class="cEmphasis">unbounded index queries</em>.  Unbounded queries are generated because COBOL positioning operations (Start Not Less Than and Start Not Greater Than) provide only one of the bounding conditions for the working set, instead of both an upper and lower boundary.
</p>
<a name="wp1036759"> </a><p class="pBody">
As an example, consider the case where an application needs to process all items in a warehouse on aisle 17, shelf 8, and bin 2.  If each of these items is a field in a key, the COBOL program might generate the following query for a READ operation:
</p>
<a name="wp1036760"> </a><p class="pNote">
<hr />
<b>Note:  </b>The following example applies to the Acu4GL for Oracle product.  The SQL generated will be different for the different products.
<hr />
</p>
<div class="pPreformatted"><pre class="pPreformatted">
 <a name="wp1036761"> </a>
SELECT * FROM warehouse_items WHERE <a name="wp1036762"> </a>
   aisle = 17 and <a name="wp1036763"> </a>
   shelf = 8 and <a name="wp1037350"> </a>
   bin = 2 <a name="wp1037351"> </a>
ORDER BY aisle ASC, shelf ASC, bin ASC;<a name="wp1036766"> </a>
</pre></div>
<a name="wp1036768"> </a><p class="pBody">
This query achieves the desired result but has one problem.  In order for the COBOL program to end its processing, it must read a record that has a new value for bin.  The COBOL application has no way of specifying an upper boundary for the read operation, so when all rows of data from bin 2 have been read, Acu4GL will attempt to read the next record by generating the following query:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
SELECT * FROM warehouse_items WHERE <a name="wp1036769"> </a>
   aisle = 17 and <a name="wp1037330"> </a>
   shelf = 8 and <a name="wp1037352"> </a>
   bin &gt; 2 <a name="wp1037357"> </a>
ORDER BY aisle ASC, shelf ASC, bin ASC;<a name="wp1037332"> </a>
</pre></div>
<a name="wp1036775"> </a><p class="pBody">
This query will cause the database query optimizer to gather all records pertaining to items on the remainder of shelf 8 to build its working set.  This is excessive from the COBOL application's point of view, because the COBOL program needs only the <em class="cEmphasis">first record</em> of the working set in order to determine that it has finished processing.
</p>
<a name="wp1036776"> </a><p class="pBody">
This problem can be even more serious if the application is processing the last bin on a shelf.  Because there are no more bins on that shelf, the query would drop down a level and generate the following:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
SELECT * FROM warehouse_items WHERE <a name="wp1036777"> </a>
   aisle = 17 and <a name="wp1036778"> </a>
   shelf &gt; 8 <a name="wp1037358"> </a>
ORDER BY aisle ASC, shelf ASC, bin ASC;<a name="wp1037337"> </a>
</pre></div>
<a name="wp1036779"> </a><p class="pBody">
This would select all items on the remainder of that aisle of the warehouse, which could be a very large working set if each aisle had 130 shelves!
</p>
<a name="wp1036780"> </a><p class="pBody">
In reality, most of the time the database query optimizer will not build the entire working set if it has been properly tuned, but will instead perform INDEXED READS in order to process the query.  This means that the query optimizer will traverse an index tree to retrieve the records, much as COBOL index files do, as opposed to using combinations of indexes and sort and merge operations.
</p>
<a name="wp1036781"> </a><p class="pBody">
It can be helpful for the COBOL developer to influence precisely which information is to be returned.  If the application developer knows at compile time (or before the query is executed) the precise scope of the record processing that needs to be performed by the read operations, the developer can more finely tune the information being retrieved.
</p>
<a name="wp1036782"> </a><p class="pBody">
Acu4GL provides a method by which the COBOL programmer can provide additional information to the database query optimizer by providing more specific selection information to the Acu4GL product.  This selection information is added to the WHERE clause of the SQL queries generated by the Acu4GL product.  This can be particularly useful in providing upper boundaries to queries being generated, with the result that the working set is smaller.
</p>
<a name="wp1036783"> </a><p class="pBody">
The developer may provide upper boundaries on the key segments for a select, or any other selection criteria needed to constrain the working set to just the desired subset of rows.  This additional information is added to generated queries with the AND condition.  It is not possible for the application developer to specify a larger working set than would otherwise have resulted.  The developer may constrain the working set only to a smaller subset.
</p>
<a name="wp1036784"> </a><h3 class="pHeadingRef">
Using WHERE constraints from COBOL
</h3>
<a name="wp1036785"> </a><p class="pBody">
The following steps are required for using the WHERE constraint.
</p>
<a name="wp1036786"> </a><h3 class="pHeadingRef">
Step 1:  Declare an external variable.
</h3>
<a name="wp1036790"> </a><p class="pBody">
In order to make use of WHERE constraints from COBOL, the application must declare an external variable for communication with the Acu4GL product.  This variable is declared as follows:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
77  a4gl-where-constraint  pic x(300) external<a name="wp1036791"> </a>
</pre></div>
<a name="wp1036792"> </a><h3 class="pHeadingRef">
Step 2:  Modify your COBOL procedures.
</h3>
<a name="wp1036796"> </a><p class="pBody">
Your COBOL application should move the information that you want added to the WHERE clause to the new external variable before a COBOL positioning operation such as START or READ is performed.  The additional constraint will then be applied to any SQL read query performed on that file until a new positioning operation is performed.  
</p>
<a name="wp1036797"> </a><p class="pBody">
The additional query information is also stored in Acu4GL's <em class="cEmphasis">cursor cache</em> so that if the same read conditions occur in later processing, the existing closed cursor can be reused with new bind variables instead of being regenerated.
</p>
<a name="wp1036798"> </a><p class="pBody">
Be sure to fill the external variable before a positioning operation (START or READ).  The WHERE constraint affects only READ NEXT operations preceded by a positioning operation.  The WHERE constraint does not affect a READ NEXT that was not preceded by a positioning operation (such as a READ NEXT without a START immediately after opening a file).  
</p>
<a name="wp1036799"> </a><h3 class="pHeadingRef">
Example
</h3>
<a name="wp1037646"> </a><p class="pBody">
In your COBOL program you include this statement:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
Move &quot;ftest_key &gt; 3 and ftest_key &lt; 6&quot; to<a name="wp1037647"> </a>
   A4GL_WHERE_CONSTRAINT.<a name="wp1037658"> </a>
Inspect A4GL_WHERE_CONSTRAINT replacing trailing spaces by<a name="wp1036802"> </a>
   low-values.<a name="wp1037667"> </a>
START FTEST-FILE KEY NOT LESS FTEST-KEY.<a name="wp1037372"> </a>
</pre></div>
<a name="wp1036803"> </a><p class="pBody">
These results occur:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
CURSOR 0: <a name="wp1036804"> </a>
SELECT *,ROWID FROM ftest WHERE (ftest_key1_seg1 = ? AND <a name="wp1036805"> </a>
ftest_key1_seg2 &gt;= ?) AND (ftest_key &gt; 3 and ftest_key &lt; 6) <a name="wp1037377"> </a>
ORDER BY ftest_key1_seg1 ASC, ftest_key1_seg2 ASC;<a name="wp1037382"> </a>
<a name="wp1037387"> </a>
CURSOR 1: <a name="wp1037392"> </a>
SELECT *,ROWID FROM ftest WHERE (ftest_key1_seg1 &gt; ?) AND <a name="wp1037397"> </a>
(ftest_key &gt; 3 and ftest_key &lt; 6) ORDER BY ftest_key1_seg1 ASC, <a name="wp1037402"> </a>
ftest_key1_seg2 ASC;<a name="wp1037407"> </a>
</pre></div>
<a name="wp1036806"> </a><h3 class="pHeadingRef">
Limitations
</h3>
<div class="pSmartList1"><ul class="pSmartList1">
<a name="wp1036808"> </a><div class="pSmartList1"><li>WHERE constraints added by the COBOL program may not be portable between databases.  </li></div>
<a name="wp1036809"> </a><div class="pSmartList1"><li>The application may specify conditions of such complexity that they confuse the database query optimizer, resulting in poor performance.  Be sure to examine the results of the optimizer trace facilities to ensure optimal performance.</li></div>
<a name="wp1036810"> </a><div class="pSmartList1"><li>Take care to prevent the COBOL application from sending information that will result in a syntax error that will not be detected until runtime.</li></div>
<a name="wp1036811"> </a><div class="pSmartList1"><li>The WHERE constraint should reference only columns in the primary table.</li></div>
</ul></div>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com?subject=E-01-UG-060621-Acu4GL-7.2">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
