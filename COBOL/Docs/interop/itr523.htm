<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.6.1058" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/08/06 14:58:17" />
  <title>5.5.1  Using the ACUCOBOL-GT .NET Bridging Interface</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       A Guide to Interoperating with ACUCOBOL-GT <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="itr5.htm">Chapter 5: Working With .NET Assemblies</a> &gt; <a href="itr522.htm">5.5  Calling .NET from COBOL </a> &gt; </p>
<a name="wp1038528"> </a><h2 class="pHeading2">
5.5.1  Using the ACUCOBOL-GT .NET Bridging Interface
</h2>
<a name="wp1038530"> </a><p class="pBody">
The .NET bridging interface includes a graphical utility known as <b class="cBold">NETDEFGEN</b>.  This utility allows you to view and select .NET assemblies for translation to a COBOL COPY file.  It is similar to the <b class="cBold">AXDEFGEN</b> utility that ACUCOBOL-GT provides for programming with ActiveX and COM objects.  However, <b class="cBold">NETDEFGEN</b> is designed to work with .NET assemblies.
</p>
<a name="wp1038533"> </a><p class="pBody">
The COPY files generated by <b class="cBold">NETDEFGEN</b> supply the ACUCOBOL-GT compiler with all the necessary information for interfacing with .NET assemblies.  When you include the COPY files in your COBOL program, you can interact with the .NET assembly via these COBOL statements:  DISPLAY, CREATE, MODIFY, INQUIRE, and DESTROY.  
</p>
<a name="wp1038534"> </a><p class="pBody">
Invoke .NET assemblies from your ACUCOBOL-GT program as follows:
</p>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1038536"> </a><div class="pSmartList1"><li>If it is not installed already, install and register the .NET framework on your development system.</li></div>
<a name="wp1038537"> </a><div class="pSmartList1"><li>Run &quot;netdefgen.exe&quot;.  It is located in the \AcuGT\bin directory wherever you installed ACUCOBOL-GT on your machine.  <b class="cBold">NETDEFGEN</b> locates the .NET assemblies on the machine and lists them.  (For more information on the <b class="cBold">NETDEFGEN</b> utility, refer to the <a  href="itr529.htm#wp1038796">NETDEFGEN Utility Reference</a> later in this section.)</li></div>
<a name="wp1038541"> </a><div class="pSmartList1"><li>From the list of cached assemblies displayed in the <b class="cBold">NETDEFGEN</b> dialog box, select the .NET assembly that you want to include in your COBOL program, then select the NameSpace class or classes that you specifically want to access.  </li></div>
<a name="wp1038542"> </a><p class="pNoteList">
<hr />
<b>Note:  </b>If the assembly of interest is not listed, enter its name in the Input Assembly Path field, then click <b class="cBold">Show NameSpaces for Input Assembly</b>.  You can also search for the assembly path using the <b class="cBold">Search</b> button.
<hr />
</p>
<a name="wp1038543"> </a><div class="pSmartList1"><li>Specify an output path and filename for the COBOL COPY file that will be generated.  Click <b class="cBold">Execute</b> when done.  </li></div>
<a name="wp1038544"> </a><p class="pIndented1">
The utility automatically generates a COPY file for the chosen assembly.  For information on the contents of <b class="cBold">NETDEFGEN</b> COPY files, refer to the <a  href="itr529.htm#wp1038796">NETDEFGEN Utility Reference</a>.  
</p>
<a name="wp1038548"> </a><p class="pIndented1">
The utility also generates something known as an event DLL.  The event DLL is named after the NameSpace class found in the COPY file, appended by the suffix &quot;.dll&quot;.
</p>
<a name="wp1038549"> </a><div class="pSmartList1"><li>In a code editor, open your ACUCOBOL-GT program and go to its Environment Division/Configuration Section.  </li></div>
<a name="wp1038550"> </a><div class="pSmartList1"><li>In the COBOL program's Special-Names paragraph, enter a COPY statement for the COPY file that you specified in step 4.  If you are adding several .NET assemblies, copy several COPY files into this paragraph.  Add a period at the end of the paragraph.  For example:</li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
SPECIAL-NAMES<a name="wp1038551"> </a>
COPY &quot;netcontrol1.def&quot;.<a name="wp1038552"> </a>
COPY &quot;netcontrol2.def&quot;.<a name="wp1038553"> </a>
.<a name="wp1038554"> </a>
</pre></div>
<a name="wp1038555"> </a><div class="pSmartList1"><li>Add the .NET control to your program.  Minimally, you must include the ASSEMBLY-NAME, NAMESPACE, and CLASS-NAME parameters that are found in the COPY file.  </li></div>
<a name="wp1038556"> </a><p class="pIndented1">
If the .NET control that you are adding is graphical, (i.e., it has the word &quot;Visual&quot; in the COPY file NameSpace class definition), you can add it to your program in one of two ways:
</p>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1038557"> </a><div class="pSmartList2"><li>Go to the Screen Section of your program and add the new control to your screen.  For example:</li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
screen section.<a name="wp1038558"> </a>
01  screen-1.<a name="wp1038559"> </a>
    03 SOME-NETCONTROL, &quot;@My.Assembly&quot;,<a name="wp1038560"> </a>
       LINE 1, COL 2,<a name="wp1038561"> </a>
       NAMESPACE IS &quot;My.Test.Namespace&quot;,<a name="wp1038562"> </a>
       CLASS-NAME IS &quot;MyGUIClass&quot;,<a name="wp1038563"> </a>
        CONSTRUCTOR IS CONSTRUCTOR2(PARM1, PARM2, PARM3,
       PARM4, PARM5, PARM6, PARM7),<a name="wp1038564"> </a>
       EVENT PROCEDURE IS USERCONTROL-EVENTS.<a name="wp1038565"> </a>
</pre></div>
<a name="wp1038566"> </a><div class="pSmartList2"><li>Go to your program's Procedure Division and create the control using the DISPLAY statement.  For example:</li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
DISPLAY &quot;@My.Assembly&quot;<a name="wp1038567"> </a>
     NAMESPACE IS &quot;My.Test.Namespace&quot;<a name="wp1038568"> </a>
     CLASS-NAME IS &quot;MyGUIClass&quot;<a name="wp1038569"> </a>
     EVENT PROCEDURE IS MY-EVENT-PROCEDURE <a name="wp1038570"> </a>
     HANDLE IS MY-GUI-HANDLE.<a name="wp1038571"> </a>
</pre></div>
</ol></div>
<a name="wp1038572"> </a><p class="pIndented1">
If the .NET assembly that you are adding is non-graphical, use the CREATE statement to add it to your program as shown below:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
CREATE &quot;@My.Assembly&quot;<a name="wp1038573"> </a>
     NAMESPACE IS &quot;My.Test.Namespace&quot;<a name="wp1038574"> </a>
     CLASS-NAME IS &quot;MyClass&quot;<a name="wp1038575"> </a>
     HANDLE IS MY-NONGUI-HANDLE.<a name="wp1038576"> </a>
</pre></div>
<a name="wp1038577"> </a><p class="pIndented1">
Note that .NET properties, methods, and events should always be prepended with an &quot;@&quot; sign in case they clash with COBOL reserved words or ACUCOBOL-GT graphical control property and style names.  The &quot;@&quot; character identifies the relationship of the name to .NET or ActiveX.
</p>
<a name="wp1038578"> </a><div class="pSmartList1"><li>Add any optional .NET parameters to the Screen Section, DISPLAY, or CREATE statement.  For example, add the FILE-PATH parameter to point to assemblies that will not be placed in the end-user's GAC (you must first create an XML file containing the file path), or add the CONSTRUCTOR parameter to instantiate a class.  Valid .NET parameters are described in <a  href="itr530.htm#wp1038862">section 5.5.2.1</a>.</li></div>
<a name="wp1038582"> </a><div class="pSmartList1"><li>Perform whatever functions you want on the control.  If desired, you can modify a .NET control's properties or invoke methods using the MODIFY statement.  For example:</li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
MODIFY MY-NONGUI-HANDLE printIteration = NUMBRPRINTS.<a name="wp1038583"> </a>
MODIFY MY-NONGUI-HANDLE lastName = LAST-NAME. <a name="wp1038584"> </a>
MODIFY MY-NONGUI-HANDLE &quot;ToLog&quot;(&quot;Hello From COBOL&quot;, 99, 
&quot;It&#39;s a Good Thing&quot;).<a name="wp1038585"> </a>
</pre></div>
<a name="wp1038586"> </a><p class="pIndented1">
If you want to retrieve a property value, you can use the INQUIRE statement.  For example:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
INQUIRE MY-NONGUI-HANDLE printIteration IN QPRINTS.<a name="wp1038587"> </a>
INQUIRE MY-NONGUI-HANDLE lastName IN LAST-NAME.<a name="wp1038588"> </a>
</pre></div>
<a name="wp1038589"> </a><div class="pSmartList1"><li>To destroy .NET controls, use the DESTROY statement.  Ultimately, all controls that you instantiated in step 7 should be destroyed.  You can use DESTROY ALL to destroy all controls in the Screen Section or created with a DISPLAY statement.  However, if the control was created with a CREATE statement, then it must be destroyed with a Format 1 DESTROY handle-name statement.</li></div>
<a name="wp1038590"> </a><p class="pNoteList">
<hr />
<b>Note:  </b>For details on using the CREATE, DISPLAY, MODIFY, INQUIRE, and DESTROY statements, refer to section 6.6 in <em class="cEmphasis">ACUCOBOL-GT Reference Manual</em>.  A complete sample program is provided below for your reference.
<hr />
</p>
<a name="wp1038591"> </a><div class="pSmartList1"><li>Compile the COBOL program.</li></div>
<a name="wp1038592"> </a><div class="pSmartList1"><li>Update the configuration file named &quot;NetEvents.ini&quot; with path statements of the event DLL(s) created when you ran <b class="cBold">NETDEFGEN</b>, or place the DLL(s) in the same directory as the ACUCOBOL-GT runtime, &quot;wrun32.exe&quot;.  The runtime must be able to access these event DLLs as well as the .NET assembly itself.</li></div>
<a name="wp1038593"> </a><div class="pSmartList1"><li>Run your COBOL program via &quot;wrun32.exe MyProgram.acu&quot;.</li></div>
</ol></div>
<a name="wp1038594"> </a><p class="pBody">
At run time, your COBOL program transparently communicates with an interface called &quot;AcuToNet.dll&quot;.  This interface starts the .NET CLR, loads the requisite .NET assemblies and event handlers, executes .NET assembly methods, and returns the results to the COBOL program.  Refer to `<a  href="itr526.htm#wp1038772">Optimizing the &quot;AcuToNet.dll&quot; interface</a>' for information on optimizing the performance of &quot;AcuToNet.dll&quot;.
</p>
<a name="wp1043045"> </a><h5 class="pHeading4">
More:
</h5>
<div class="pSmartList1"><ul class="pSmartList1">
<a name="wp1043049"> </a><div class="pSmartList1"><li><a  href="itr524.htm#wp1038624">Sample program</a></li></div>
<a name="wp1043053"> </a><div class="pSmartList1"><li><a  href="itr525.htm#wp1038766">Limits and restrictions</a></li></div>
<a name="wp1043057"> </a><div class="pSmartList1"><li><a  href="itr526.htm#wp1038772">Optimizing the &quot;AcuToNet.dll&quot; interface</a></li></div>
<a name="wp1043061"> </a><div class="pSmartList1"><li><a  href="itr527.htm#wp1038779">.NET control distribution and licensing</a></li></div>
<a name="wp1043065"> </a><div class="pSmartList1"><li><a  href="itr528.htm#wp1038789">Name clashes</a></li></div>
<a name="wp1043069"> </a><div class="pSmartList1"><li><a  href="itr529.htm#wp1038796">NETDEFGEN Utility Reference</a></li></div>
</ul></div>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com?subject=E-01-UG-060622-Interop-7.2">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
