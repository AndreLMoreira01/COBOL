<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.6.1058" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/08/06 14:58:17" />
  <title>5.5.1.1  Sample program</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       A Guide to Interoperating with ACUCOBOL-GT <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="itr5.htm">Chapter 5: Working With .NET Assemblies</a> &gt; <a href="itr522.htm">5.5  Calling .NET from COBOL </a> &gt; <a href="itr523.htm">5.5.1  Using the ACUCOBOL-GT .NET Bridging Interface</a> &gt; </p>
<a name="wp1038624"> </a><h2 class="pHeading3">
5.5.1.1  Sample program
</h2>
<a name="wp1038625"> </a><p class="pBody">
The following example shows how to use the CREATE, DISPLAY, MODIFY, and INQUIRE statements to create and interact with the .NET control once its COPY file has been included in your COBOL program.  First, you'll find a sample COPY file.  Then you'll find a sample COBOL program, with comments, in bold.
</p>
<a name="wp1038626"> </a><h5 class="pHeading4">
NETDEFGEN COPY file
</h5>
<div class="pPreformatted"><pre class="pPreformatted">
-----  Generated by NetDefGen  -----<a name="wp1038627"> </a>
OBJECT @ASSEMBLY<a name="wp1038628"> </a>
NAME &quot;@My.Assembly&quot;<a name="wp1038629"> </a>
VERSION &quot;1.0.0.0&quot;<a name="wp1038630"> </a>
CULTURE &quot;neutral&quot;<a name="wp1038631"> </a>
STRONG &quot;3f6e8fa90dc2951b&quot;<a name="wp1038632"> </a>
<a name="wp1038633"> </a>
NAMESPACE &quot;My.Test.Namespace&quot;<a name="wp1038634"> </a>
CLASS &quot;MyClass	&quot;<a name="wp1038635"> </a>
<a name="wp1038636"> </a>
CONSTRUCTOR,  0, @CONSTRUCTOR1<a name="wp1038637"> </a>
<a name="wp1038638"> </a>
* printIteration<a name="wp1038639"> </a>
                PROPERTY_GET, 0, @printIteration<a name="wp1038640"> </a>
                         RETURNING, &quot;int&quot;, TYPE 3<a name="wp1038641"> </a>
* printIteration<a name="wp1038642"> </a>
                PROPERTY_PUT, 0, @printIteration<a name="wp1038643"> </a>
                        &quot;int (Property Value)&quot;, TYPE 3<a name="wp1038644"> </a>
                        <a name="wp1038645"> </a>
* Int32 ToLog(System.String, Int32, System.String)<a name="wp1038646"> </a>
                METHOD,  0, &quot;@ToLog&quot;<a name="wp1038647"> </a>
                         &quot;BSTR&quot; @StringIn, TYPE 8<a name="wp1038648"> </a>
                         &quot;int&quot; @someNumber, TYPE 3<a name="wp1038649"> </a>
                         &quot;BSTR&quot; @anotherString, TYPE 8<a name="wp1038650"> </a>
                         RETURNING &quot;int&quot;, TYPE 3<a name="wp1038651"> </a>
*  Public fields<a name="wp1038652"> </a>
FIELD,   0, @lastName<a name="wp1038653"> </a>
                         RETURNING, &quot;BSTR&quot;, TYPE 8   <a name="wp1038654"> </a>
                   <a name="wp1038655"> </a>
NAMESPACE &quot;My.Test.Namespace&quot;<a name="wp1038656"> </a>
CLASS &quot;MyGUIClass&quot;<a name="wp1038657"> </a>
VISUAL<a name="wp1038658"> </a>
<a name="wp1038659"> </a>
CONSTRUCTOR,  0, @CONSTRUCTOR1 <a name="wp1038660"> </a>
                       <a name="wp1038661"> </a>
* LogRecordRead  (Int32)<a name="wp1038662"> </a>
               EVENT, -709034780, @MyGUIClasss_LogRecordRead<a name="wp1038663"> </a>
 <a name="wp1038664"> </a>
* LogRecordWritten  (Int32, System.String)<a name="wp1038665"> </a>
               EVENT, -1411090252, @MyGUIClass_LogRecordWritten<a name="wp1038666"> </a>
<a name="wp1038667"> </a>
NAMESPACE &quot;My.Test.Namespace&quot;<a name="wp1038668"> </a>
CLASS &quot;UserControl1&quot;<a name="wp1038669"> </a>
VISUAL          <a name="wp1038670"> </a>
 <a name="wp1038671"> </a>
        CONSTRUCTOR,  0, @CONSTRUCTOR1<a name="wp1038672"> </a>
 <a name="wp1038673"> </a>
        CONSTRUCTOR,  0, @CONSTRUCTOR2<a name="wp1038674"> </a>
                         &quot;BSTR&quot; @userStuff, TYPE 8<a name="wp1038675"> </a>
                         &quot;int&quot; @intData, TYPE 3<a name="wp1038676"> </a>
                         &quot;unsigned int&quot; @uintData, TYPE 19<a name="wp1038677"> </a>
                         &quot;single&quot; @floatData, TYPE 4<a name="wp1038678"> </a>
                         &quot;double&quot; @doubleData, TYPE 5<a name="wp1038679"> </a>
                         &quot;short&quot; @shortintData, TYPE 2<a name="wp1038680"> </a>
                         &quot;unsigned short&quot; @ushortintData, TYPE 18<a name="wp1038681"> </a>
               <a name="wp1038682"> </a>
 -----  End Generated NetDefGen Code  -----<a name="wp1038683"> </a>
</pre></div>
<a name="wp1038684"> </a><h5 class="pHeading4">
COBOL program
</h5>
<div class="pPreformatted"><pre class="pPreformatted">
<a name="wp1038685"> </a>
<b class="cBold">* Handles can be associated with a specific 
* Assembly.NameSpace.Class </b><a name="wp1038686"> </a>
<b class="cBold">* Use this form when the COBOL statement, MODIFY - INQUIRE, etc., </b><a name="wp1038687"> </a>
<b class="cBold">* uses the handle before a CREATE or DISPLAY statement occurs </b><a name="wp1038688"> </a>
<b class="cBold">* in the program. </b><a name="wp1038689"> </a>
<a name="wp1038690"> </a>
77 MY-NONGUI-HANDLE USAGE IS HANDLE OF 
&quot;@My.Assembly.My.Test.Namespace.MyClass&quot;. <a name="wp1038691"> </a>
<a name="wp1038692"> </a>
77  MY-GUI-HANDLE       USAGE IS HANDLE.	<a name="wp1038693"> </a>
77  NUMBRPRINTS         USAGE IS SIGNED-INT VALUE 3.<a name="wp1038694"> </a>
77  QPRINTS             USAGE IS SIGNED-INT.<a name="wp1038695"> </a>
77  PARAM1              USAGE IS SIGNED-INT.<a name="wp1038696"> </a>
77  PARAM2              PIC x(128).<a name="wp1038697"> </a>
77  LAST-NAME           PIC x(32).<a name="wp1038698"> </a>
77  PARM1               pic x(12) VALUE &quot;HELLO WORLD&quot;.<a name="wp1038699"> </a>
77  PARM2               USAGE IS SIGNED-INT VALUE 1111.<a name="wp1038700"> </a>
77  PARM3               USAGE IS UNSIGNED-INT VALUE 2222.<a name="wp1038701"> </a>
77  PARM4               USAGE IS FLOAT VALUE 0.3333.<a name="wp1038702"> </a>
77  PARM5               USAGE IS DOUBLE VALUE 123456.55.<a name="wp1038703"> </a>
77  PARM6               USAGE IS SIGNED-SHORT VALUE 4444.<a name="wp1038704"> </a>
77  PARM7               USAGE IS UNSIGNED-SHORT VALUE 5555.<a name="wp1038705"> </a>
<a name="wp1038706"> </a>
<b class="cBold">*CREATE  - instantiate a NON-GUI CLASS.</b><a name="wp1038707"> </a>
<a name="wp1038708"> </a>
CREATE &quot;@My.Assembly&quot;<a name="wp1038709"> </a>
NAMESPACE IS &quot;My.Test.Namespace&quot;<a name="wp1038710"> </a>
CLASS-NAME IS &quot;MyClass&quot;<a name="wp1038711"> </a>
EVENT PROCEDURE IS EVENT-PROC<a name="wp1038712"> </a>
HANDLE IS MY-NONGUI-HANDLE.<a name="wp1038713"> </a>
<a name="wp1038714"> </a>
<b class="cBold">*DISPLAY - instantiate a GUI CLASS. </b>GUI classes have a keyword 
*VISUAL in the COPY file after the CLASS keyword. <a name="wp1038715"> </a>
<a name="wp1038716"> </a>
DISPLAY &quot;@My.Assembly&quot;<a name="wp1038717"> </a>
NAMESPACE IS &quot;My.Test.Namespace&quot;<a name="wp1038718"> </a>
CLASS-NAME IS &quot;MyGUIClass&quot;<a name="wp1038719"> </a>
EVENT PROCEDURE IS MY-EVENT-PROCEDURE <a name="wp1038720"> </a>
HANDLE IS MY-GUI-HANDLE.<a name="wp1038721"> </a>
<a name="wp1038722"> </a>
<b class="cBold">*INQUIRE - retrieve the value of a PROPERTY OR FIELD.</b><a name="wp1038723"> </a>
<a name="wp1038724"> </a>
INQUIRE MY-NONGUI-HANDLE printIteration IN QPRINTS.<a name="wp1038725"> </a>
INQUIRE MY-NONGUI-HANDLE lastName IN LAST-NAME.<a name="wp1038726"> </a>
<a name="wp1038727"> </a>
<b class="cBold">*MODIFY  - execute a method.  Methods are case sensitive. They 
*must match the COPY file case and be enclosed in quotes.</b><a name="wp1038728"> </a>
<a name="wp1038729"> </a>
MODIFY MY-NONGUI-HANDLE &quot;ToLog&quot;(&quot;Hello From COBOL&quot;, 99, &quot;It&#39;s a Good 
Thing&quot;).<a name="wp1038730"> </a>
<a name="wp1038731"> </a>
<b class="cBold">*MODIFY  - set the value of a PROPERTY OR FIELD.</b><a name="wp1038732"> </a>
<a name="wp1038733"> </a>
MODIFY MY-NONGUI-HANDLE printIteration = NUMBRPRINTS.<a name="wp1038734"> </a>
MODIFY MY-NONGUI-HANDLE lastName = LAST-NAME. <a name="wp1038735"> </a>
<a name="wp1038736"> </a>
<b class="cBold">*Capture events and retrieve event data - Use EVENT-DATA-2 or the 
*COPY file event name.</b><a name="wp1038737"> </a>
<a name="wp1038738"> </a>
<b class="cBold">*EVENT-DATA-2 and the COPY file event name are an event ID.  The 
*runtime tries to locate the last event thrown by matching the 
*event ID.  If you use CONTROL-HANDLE or HANDLE IS from the CREATE 
*and DISPLAY statements, the runtime tries to locate the last 
*event thrown by matching the .NET Interface for the control. 
*Using a CONTROL-HANDLE or COPY file event name/numeric ID makes 
*a difference when event procedures cause another event before 
*collecting the first event&#39;s DATA.  If the events are different, 
*use the COPY file event name to retrieve the desired event data.  
*If you use CONTROL-HANDLE, the most recent event, that is, the 
*Last In First Out (LIFO), received by the runtime for a .NET 
*interface is returned to a COBOL program possibly resulting in 
*incorrect event data.</b><a name="wp1038739"> </a>
<a name="wp1038740"> </a>
MY-EVENT-PROCEDURE.			<a name="wp1038741"> </a>
EVALUATE EVENT-TYPE<a name="wp1038742"> </a>
    WHEN MSG-NET-EVENT<a name="wp1038743"> </a>
EVALUATE EVENT-DATA-2<a name="wp1038744"> </a>
    WHEN @MyGUIClass_LogRecordWritten<a name="wp1038745"> </a>
CALL &quot;C$GETNETEVENTDATA&quot; USING @MyGUIClass_LogRecordWritten PARAM1 
PARAM2<a name="wp1038746"> </a>
    WHEN @MyGUIClass_LogRecordRead<a name="wp1038747"> </a>
CALL &quot;C$GETNETEVENTDATA&quot; USING EVENT-DATA-2 PARAM1                                                                                          <a name="wp1038748"> </a>
END-EVALUATE<a name="wp1038749"> </a>
END-EVALUATE.<a name="wp1038750"> </a>
<a name="wp1038751"> </a>
<b class="cBold">*Screen section .NET Control with a Constructor</b><a name="wp1038752"> </a>
<a name="wp1038753"> </a>
screen section.<a name="wp1038754"> </a>
01  screen-1.<a name="wp1038755"> </a>
    03  SOME-NETCONTROL, &quot;@My.Assembly&quot;,<a name="wp1038756"> </a>
        LINE 1, COL 2,<a name="wp1038757"> </a>
        NAMESPACE IS &quot;My.Test.Namespace&quot;,<a name="wp1038758"> </a>
        CLASS-NAME IS &quot;UserControl1&quot;,<a name="wp1038759"> </a>
          CONSTRUCTOR IS CONSTRUCTOR2(PARM1, PARM2, PARM3, PARM4, PARM5,  
        PARM6, PARM7),<a name="wp1038760"> </a>
        EVENT PROCEDURE IS USERCONTROL-EVENTS.<a name="wp1038761"> </a>
<a name="wp1038762"> </a>
<b class="cBold">*Coding exceptions. </b>NameSpace is optional in C# and VB NET and 
*therefore may not appear in a COPY file. However, DISPLAY, 
*CREATE, and Screen Section COBOL statements require a NameSpace 
*entry. When a COPY file is missing a NameSpace keyword, use the 
*class name as the NameSpace value on DISPLAY, CREATE, and Screen 
*Section statements.  <a name="wp1038763"> </a>
</pre></div>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com?subject=E-01-UG-060622-Interop-7.2">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
