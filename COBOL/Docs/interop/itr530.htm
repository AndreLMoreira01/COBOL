<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.6.1058" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/08/06 14:58:17" />
  <title>5.5.2.1  NETDEFGEN COPY files</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       A Guide to Interoperating with ACUCOBOL-GT <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="itr5.htm">Chapter 5: Working With .NET Assemblies</a> &gt; <a href="itr522.htm">5.5  Calling .NET from COBOL </a> &gt; <a href="itr529.htm">5.5.2  NETDEFGEN Utility Reference</a> &gt; </p>
<a name="wp1038862"> </a><h2 class="pHeading3">
5.5.2.1  NETDEFGEN COPY files
</h2>
<a name="wp1038863"> </a><p class="pBody">
COPY files that have been generated by the <span style="font-family: Arial, Verdana, Helvetica, sans-serif; font-weight: normal">NETDEFGEN</span> utility can contain any of several .NET parameters.  The parameters are described below.  The same parameters have been added to the ACUCOBOL-GT DISPLAY, CREATE, and Screen Section statements.  
</p>
<a name="wp1038864"> </a><p class="pBody">
To access a .NET assembly, your COBOL program must pass at least the ASSEMBLY-NAME, NAMESPACE, and CLASS-NAME parameters.  The rest of the .NET parameters are optional.  That is because the compiler extracts these parameters from the COPY file if they are not included in your program.  The exception is FILE-PATH, which is never included in the COPY file.  If you want to include a FILE-PATH, you must encode it as described in the table below.
</p>
<a name="wp1038865"> </a><p class="pBody">
You pass .NET parameters when you first instantiate a .NET control in your COBOL program, that is, in the CREATE, DISPLAY, or Screen Section statement.
</p>
<a name="wp1038866"> </a><p class="pBody">
Note that the returning value of any field in the parameter list can be updated and returned to your COBOL program if desired.
</p>
<a name="wp1038991"> </a><p class="pBody">
</p><div>
<table border="1" cellpadding="2" cellspacing="2">
  <caption></caption>
  <tr align="left" valign="top">    <th><a name="wp1038869"> </a>
COPY File Parameter  

</th>
    <th><a name="wp1038871"> </a>
Parameter to Pass

</th>
    <th><a name="wp1038873"> </a>
Required/ Optional

</th>
    <th><a name="wp1038875"> </a>
Description  

</th>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038877"> </a><p class="pCellBody">
NAME 
</p>
</td>
    <td><a name="wp1038879"> </a><p class="pCellBody">
ASSEMBLY-NAME
</p>
</td>
    <td><a name="wp1038881"> </a><p class="pCellBody">
Required
</p>
</td>
    <td><a name="wp1038883"> </a><p class="pCellBody">
Filename of assembly, without extension  
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038885"> </a><p class="pCellBody">
NAMESPACE 
</p>
</td>
    <td><a name="wp1038887"> </a><p class="pCellBody">
NAMESPACE
</p>
</td>
    <td><a name="wp1038889"> </a><p class="pCellBody">
Required
</p>
</td>
    <td><a name="wp1038891"> </a><p class="pCellBody">
Assembly NameSpace 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038893"> </a><p class="pCellBody">
CLASS
</p>
</td>
    <td><a name="wp1038895"> </a><p class="pCellBody">
CLASS-NAME
</p>
</td>
    <td><a name="wp1038897"> </a><p class="pCellBody">
Required
</p>
</td>
    <td><a name="wp1038899"> </a><p class="pCellBody">
Class name  
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038901"> </a><p class="pCellBody">
VERSION 
</p>
</td>
    <td><a name="wp1038903"> </a><p class="pCellBody">
VERSION
</p>
</td>
    <td><a name="wp1038905"> </a><p class="pCellBody">
Optional
</p>
</td>
    <td><a name="wp1038907"> </a><p class="pCellBody">
Version number of assembly  
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038909"> </a><p class="pCellBody">
CULTURE 
</p>
</td>
    <td><a name="wp1038911"> </a><p class="pCellBody">
CULTURE
</p>
</td>
    <td><a name="wp1038913"> </a><p class="pCellBody">
Optional
</p>
</td>
    <td><a name="wp1038915"> </a><p class="pCellBody">
Cultural information like language, country, region; default is neutral.   
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038917"> </a><p class="pCellBody">
STRONG
</p>
</td>
    <td><a name="wp1038919"> </a><p class="pCellBody">
STRONG-NAME
</p>
</td>
    <td><a name="wp1038921"> </a><p class="pCellBody">
Optional
</p>
</td>
    <td><a name="wp1038923"> </a><p class="pCellBody">
PublicKeyToken; a cryptographic key that is generated by the Microsoft utility &quot;sn.exe&quot;.  All assemblies that are loaded in the GAC must include a STRONG-NAME key.  If an assembly has a key, the compiler automatically retrieves it from the COPY file when it encounters a NAMESPACE/CLASS parameter.  
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038925"> </a><p class="pCellBody">
CONSTRUCTOR(n) 
</p>
</td>
    <td><a name="wp1038927"> </a><p class="pCellBody">
CONSTRUCTOR
</p>
</td>
    <td><a name="wp1038929"> </a><p class="pCellBody">
Optional if a default constructor exists 
</p>
</td>
    <td><a name="wp1038931"> </a><p class="pCellBody">
All classes that result in an object have a constructor, which is a sort of method.  When a class is instantiated with a CREATE, DISPLAY, or Screen Section statement in COBOL, this constructor is the first thing that is executed.  It is executed once during the instantiation phase of an object.
</p>
<a name="wp1038932"> </a><p class="pCellBody">
Constructors, like methods, can have parameters, although most do not. The default constructor usually has no parameters.  But if a .NET programmer has written a control that has constructors with parameters, you will see the word &quot;CONSTRUCTOR&quot; in the COPY file, followed by a number and the parameters associated with the constructor.  This is called overloading.  It occurs when the same method name has different parameters. 
</p>
<a name="wp1038933"> </a><p class="pCellBody">
Following is an example of a constructor that has been generated by the <b class="cBold">NETDEFGEN</b> utility:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
OBJECT @ASSEMBLY NAME 
&quot;@My.Assembly&quot; <a name="wp1038934"> </a>
VERSION &quot;1.0.0.0&quot; <a name="wp1038935"> </a>
CULTURE &quot;neutral&quot; <a name="wp1038936"> </a>
STRONG &quot;3f6e8fa90dc2951b&quot; <a name="wp1038937"> </a>
NAMESPACE &quot;My.Test.NameSpace&quot; <a name="wp1038938"> </a>
CLASS &quot;MyClass&quot; <a name="wp1038939"> </a>
CONSTRUCTOR, 0, @CONSTRUCTOR1 <a name="wp1038940"> </a>
CONSTRUCTOR, 0, @CONSTRUCTOR2 <a name="wp1038941"> </a>
&quot;BSTR&quot; @value, TYPE 8 <a name="wp1038942"> </a>
CONSTRUCTOR, 0, @CONSTRUCTOR3 
&quot;int&quot; @overloadedconstruct, 
TYPE 3<a name="wp1038943"> </a>
</pre></div>
<a name="wp1038944"> </a><p class="pCellBody">
&#160;
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038946"> </a><p class="pCellBody">
CONSTRUCTOR
</p>
<a name="wp1038947"> </a><p class="pCellBody">
&#160;
</p>
</td>
    <td><div class="pPreformatted"><pre class="pPreformatted">
&#160;<a name="wp1038949"> </a>
</pre></div>
</td>
    <td><a name="wp1038951"> </a><p class="pCellBody">
&#160;
</p>
</td>
    <td><a name="wp1038953"> </a><p class="pCellBody">
Because CONSTRUCTOR1 has no parameters, you can use a CREATE, DISPLAY, or Screen Section entry without a CONSTRUCTOR parameter.
</p>
<a name="wp1038954"> </a><p class="pCellBody">
If you want to pass values, then you would select CONSTRUCTOR2 or CONSTRUCTOR3. The following depicts a CONSTRUCTOR parameter in a CREATE statement. 
</p>
<div class="pPreformatted"><pre class="pPreformatted">
77 MY-ASSEMBLY-HANDLE USAGE 
IS HANDLE. <a name="wp1038955"> </a>
   CREATE &quot;My.Assembly&quot; <a name="wp1038956"> </a>
     NAMESPACE IS 
     &quot;My.Test.NameSpace&quot; <a name="wp1038957"> </a>
     CLASS-NAME IS &quot;MyClass&quot; <a name="wp1038958"> </a>
<span style="font-family: Arial, Verdana, Helvetica, sans-serif">       </span>CONSTRUCTOR IS 
CONSTRUCTOR3   
     123456) <a name="wp1038959"> </a>
     HANDLE IS 
MY-ASSEMBLY-HANDLE. <a name="wp1038960"> </a>
&#160;<a name="wp1038961"> </a>
</pre></div>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038963"> </a><p class="pCellBody">
MODULE identifier
</p>
</td>
    <td><a name="wp1038965"> </a><p class="pCellBody">
MODULE
</p>
</td>
    <td><a name="wp1038967"> </a><p class="pCellBody">
Optional
</p>
</td>
    <td><a name="wp1038969"> </a><p class="pCellBody">
Assemblies can have multiple modules within them; that is, assemblies constructed from other assemblies.  MODULE identifies the file where this NameSpace class combination resides.  It is used by the runtime to select a module within an assembly. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038971"> </a><p class="pCellBody">
n/a
</p>
</td>
    <td><a name="wp1038973"> </a><p class="pCellBody">
FILE-PATH 
</p>
</td>
    <td><a name="wp1038975"> </a><p class="pCellBody">
Optional
</p>
</td>
    <td><a name="wp1038977"> </a><p class="pCellBody">
By default, the runtime looks for .NET assemblies in the end user's GAC. If it can't find the requested assembly in the GAC, it looks in the same directory as the runtime, &quot;wrun32.exe&quot;.
</p>
<a name="wp1038978"> </a><p class="pCellBody">
Use FILE-PATH when the assembly that the program must access does not reside in the user's GAC or in the same directory as &quot;wrun32.exe&quot;.  
</p>
<a name="wp1038979"> </a><p class="pCellBody">
To include a FILE-PATH, first create an XML file containing the full file path where the assembly is located.  Then in your COBOL program, include the FILE-PATH parameter followed by the full path of an XML file.  If the FILE-PATH contains a filename only, the file is loaded from the same directory as the runtime.
</p>
<a name="wp1038980"> </a><p class="pCellBody">
Following is an example of a FILE-PATH XML file:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
&lt;?xml version=&quot;1.0&quot;
    encoding=&quot;utf-8&quot; ?&gt; <a name="wp1038981"> </a>
&lt;FILESPEC&gt; <a name="wp1038982"> </a>
&lt;Assembly&gt;AmortControl&lt;/
Assembly&gt; <a name="wp1038983"> </a>
&lt;Module&gt;amortcontrol.dll&lt;/
Module&gt; <a name="wp1038984"> </a>
&lt;StrongName /&gt; <a name="wp1038985"> </a>
&lt;Version&gt;1.0.1242.11216&lt;/
Version&gt; <a name="wp1038986"> </a>
&lt;Culture&gt;neutral&lt;/Culture&gt; <a name="wp1038987"> </a>
&lt;FilePath&gt;E:\AmortControl\bin
\Debug\AmortControl.dll&lt;/
FilePath&gt; <a name="wp1038988"> </a>
&lt;/FILESPEC&gt; <a name="wp1038989"> </a>
</pre></div>
<a name="wp1038990"> </a><p class="pCellBody">
&#160;
</p>
</td>
</tr>
</table>
</div>
<p class="pBody">
</p>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com?subject=E-01-UG-060622-Interop-7.2">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
