<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.6.1058" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/08/06 14:57:47" />
  <title>4.20.1  AXDEFGEN COPY Files</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       A Guide to Interoperating with ACUCOBOL-GT <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="itr4.htm">Chapter 4: Using ActiveX Controls and COM Objects</a> &gt; <a href="itr425.htm">4.20  AXDEFGEN Utility Reference</a> &gt; </p>
<a name="wp1038410"> </a><h2 class="pHeading2">
4.20.1  AXDEFGEN COPY Files
</h2>
<a name="wp1038411"> </a><p class="pBody">
Following is a list of TYPE codes that you might find in a COPY file generated by <b class="cBold">AXDEFGEN</b>.  The TYPE names are acronyms and/or abbreviations for the type descriptions. VT stands for Variant Type.  For example, VT_I2 is a type of variant that contains a 2-byte signed integer. VT_UI2 is a 2-byte unsigned integer. VT_R4 is a 4-byte real number (floating point).  For a more complete reference of these codes, refer to the Microsoft Developer's Network at msdn.microsoft.com.
</p>
<a name="wp1038412"> </a><p class="pBody">
Note that you may pass an alphanumeric data item or literal as a parameter to a property or method that expects a numeric item.  The runtime automatically &quot;parses&quot; the alphanumeric string and extracts a number from it if possible. 
</p>
<a name="wp1038413"> </a><p class="pBody">
In general, if a parameter is passed by reference (usually an I/O or output parameter), then it has 16384 (hex 4000) added to its value in the COPY file.  For example a boolean output parameter would be 16384 + 11 (the value for VT-BOOL), or 16395.  For this reason, if the TYPE in the COPY file is between 16384 and 16456, then you can subtract 16384 to find the associated TYPE code.  
</p>
<a name="wp1038414"> </a><p class="pBody">
This table also includes possible C types that you may find in <b class="cBold">AXDEFGEN</b> COPY files along with the corresponding COBOL data class.
</p>
<a name="wp1038846"> </a><p class="pBody">
</p><div>
<table border="1" cellpadding="2" cellspacing="2">
  <caption><a name="wp1038417"> </a><div class="pTableTitle">
AXDEFGEN COPY File Type Codes
</div>
</caption>
  <tr align="left" valign="top">    <th><a name="wp1038427"> </a>
TYPE Code

</th>
    <th><a name="wp1038429"> </a>
TYPE Name

</th>
    <th><a name="wp1038431"> </a>
C Type

</th>
    <th><a name="wp1038433"> </a>
COBOL Data Class

</th>
    <th><a name="wp1038435"> </a>
Description of Data

</th>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1038437"> </a>
</pre></div>
</td>
    <td><a name="wp1038439"> </a><p class="pCellBody">
VT_EMPTY 
</p>
</td>
    <td><a name="wp1038441"> </a><p class="pCellBody">
void
</p>
</td>
    <td><a name="wp1038443"> </a><p class="pCellBody">
N/A
</p>
</td>
    <td><a name="wp1038445"> </a><p class="pCellBody">
Nothing
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038447"> </a><p class="pCellBody">
1
</p>
</td>
    <td><a name="wp1038449"> </a><p class="pCellBody">
VT_NULL 
</p>
</td>
    <td><a name="wp1038451"> </a><p class="pCellBody">
null
</p>
</td>
    <td><a name="wp1038453"> </a><p class="pCellBody">
numeric
</p>
</td>
    <td><a name="wp1038455"> </a><p class="pCellBody">
SQL style Null; any numeric data item, 0, zero, null, or low-values
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038457"> </a><p class="pCellBody">
2
</p>
</td>
    <td><a name="wp1038459"> </a><p class="pCellBody">
VT_I2 
</p>
</td>
    <td><a name="wp1038461"> </a><p class="pCellBody">
short
</p>
</td>
    <td><a name="wp1038463"> </a><p class="pCellBody">
numeric
</p>
</td>
    <td><a name="wp1038465"> </a><p class="pCellBody">
2-byte signed int; a 16-bit signed integer, any numeric data item or literal
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038467"> </a><p class="pCellBody">
3
</p>
</td>
    <td><a name="wp1038469"> </a><p class="pCellBody">
VT_I4 
</p>
</td>
    <td><a name="wp1038471"> </a><p class="pCellBody">
int
</p>
</td>
    <td><a name="wp1038473"> </a><p class="pCellBody">
numeric
</p>
</td>
    <td><a name="wp1038475"> </a><p class="pCellBody">
4-byte signed int; a 32-bit signed integer, any numeric data item or literal
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038477"> </a><p class="pCellBody">
4
</p>
</td>
    <td><a name="wp1038479"> </a><p class="pCellBody">
VT_R4 
</p>
</td>
    <td><a name="wp1038481"> </a><p class="pCellBody">
single
</p>
</td>
    <td><a name="wp1038483"> </a><p class="pCellBody">
numeric
</p>
</td>
    <td><a name="wp1038485"> </a><p class="pCellBody">
4-byte real; a single (4-byte) floating point number, any numeric data item or literal, typically USAGE FLOAT
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038487"> </a><p class="pCellBody">
5
</p>
</td>
    <td><a name="wp1038489"> </a><p class="pCellBody">
VT_R8 
</p>
</td>
    <td><a name="wp1038491"> </a><p class="pCellBody">
double
</p>
</td>
    <td><a name="wp1038493"> </a><p class="pCellBody">
numeric
</p>
</td>
    <td><a name="wp1038495"> </a><p class="pCellBody">
8-byte real; a double (8-byte) floating point number, any numeric data item or literal, typically USAGE DOUBLE
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038497"> </a><p class="pCellBody">
6
</p>
</td>
    <td><a name="wp1038499"> </a><p class="pCellBody">
VT_CY 
</p>
</td>
    <td><a name="wp1038501"> </a><p class="pCellBody">
CURRENCY
</p>
</td>
    <td><a name="wp1038503"> </a><p class="pCellBody">
numeric
</p>
</td>
    <td><a name="wp1038505"> </a><p class="pCellBody">
Currency; a currency value, any numeric data item or literal, usually containing a decimal point
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038507"> </a><p class="pCellBody">
7
</p>
</td>
    <td><a name="wp1038509"> </a><p class="pCellBody">
VT_DATE 
</p>
</td>
    <td><a name="wp1038511"> </a><p class="pCellBody">
DATE
</p>
</td>
    <td><a name="wp1038513"> </a><p class="pCellBody">
alphanumeric
</p>
</td>
    <td><a name="wp1038515"> </a><p class="pCellBody">
Date; a date in either numeric or alphanumeric form
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038517"> </a><p class="pCellBody">
8
</p>
</td>
    <td><a name="wp1038519"> </a><p class="pCellBody">
VT_BSTR 
</p>
</td>
    <td><a name="wp1038521"> </a><p class="pCellBody">
BSTR 
</p>
</td>
    <td><a name="wp1038523"> </a><p class="pCellBody">
alphanumeric 
</p>
</td>
    <td><a name="wp1038525"> </a><p class="pCellBody">
COM Automation string; a character string, any data item or literal, typically USAGE DISPLAY
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038527"> </a><p class="pCellBody">
9
</p>
</td>
    <td><a name="wp1038529"> </a><p class="pCellBody">
VT_DISPATCH 
</p>
</td>
    <td><a name="wp1038531"> </a><p class="pCellBody">
IDispatch
</p>
</td>
    <td><a name="wp1038533"> </a><p class="pCellBody">
numeric 
</p>
</td>
    <td><a name="wp1038535"> </a><p class="pCellBody">
IDispatch; a pointer to the IDispatch interface, a USAGE POINTER, or USAGE HANDLE item
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038537"> </a><p class="pCellBody">
10
</p>
</td>
    <td><a name="wp1038539"> </a><p class="pCellBody">
VT_ERROR 
</p>
</td>
    <td><a name="wp1038541"> </a><p class="pCellBody">
SCODE
</p>
</td>
    <td><a name="wp1038543"> </a><p class="pCellBody">
numeric
</p>
</td>
    <td><a name="wp1038545"> </a><p class="pCellBody">
SCODE; a 32-bit unsigned integer, any numeric data item or literal
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038547"> </a><p class="pCellBody">
11
</p>
</td>
    <td><a name="wp1038549"> </a><p class="pCellBody">
VT_BOOL 
</p>
</td>
    <td><a name="wp1038551"> </a><p class="pCellBody">
boolean 
</p>
</td>
    <td><a name="wp1038553"> </a><p class="pCellBody">
numeric 
</p>
</td>
    <td><a name="wp1038555"> </a><p class="pCellBody">
True=-1, False=0; any alphanumeric or numeric data item or literal, pass 1, -1 or &quot;True&quot; for True, 0 or &quot;False&quot; for False
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038557"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1038559"> </a><p class="pCellBody">
VT_VARIANT 
</p>
</td>
    <td><a name="wp1038561"> </a><p class="pCellBody">
VARIANT 
</p>
</td>
    <td><a name="wp1038563"> </a><p class="pCellBody">
any 
</p>
</td>
    <td><a name="wp1038565"> </a><p class="pCellBody">
VARIANT; any alphanumeric or numeric data item or literal
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038567"> </a><p class="pCellBody">
13
</p>
</td>
    <td><a name="wp1038569"> </a><p class="pCellBody">
VT_UNKNOWN 
</p>
</td>
    <td><a name="wp1038571"> </a><p class="pCellBody">
IUnknown
</p>
</td>
    <td><a name="wp1038573"> </a><p class="pCellBody">
numeric
</p>
</td>
    <td><a name="wp1038575"> </a><p class="pCellBody">
IUnknown; a pointer to the IUnknown interface, a USAGE POINTER, or USAGE HANDLE item
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038577"> </a><p class="pCellBody">
14
</p>
</td>
    <td><a name="wp1038579"> </a><p class="pCellBody">
VT_DECIMAL 
</p>
</td>
    <td><a name="wp1038581"> </a><p class="pCellBody">
N/A
</p>
</td>
    <td><a name="wp1038583"> </a><p class="pCellBody">
numeric
</p>
</td>
    <td><a name="wp1038585"> </a><p class="pCellBody">
16-byte fixed point
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038587"> </a><p class="pCellBody">
16
</p>
</td>
    <td><a name="wp1038589"> </a><p class="pCellBody">
VT_I1 
</p>
</td>
    <td><a name="wp1038591"> </a><p class="pCellBody">
char
</p>
</td>
    <td><a name="wp1038593"> </a><p class="pCellBody">
alphanumeric
</p>
</td>
    <td><a name="wp1038595"> </a><p class="pCellBody">
Signed char; a single 8-bit signed character, any data item or literal, typically USAGE DISPLAY
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038597"> </a><p class="pCellBody">
17
</p>
</td>
    <td><a name="wp1038599"> </a><p class="pCellBody">
VT_UI1 
</p>
</td>
    <td><a name="wp1038601"> </a><p class="pCellBody">
unsigned char
</p>
</td>
    <td><a name="wp1038603"> </a><p class="pCellBody">
numeric
</p>
</td>
    <td><a name="wp1038605"> </a><p class="pCellBody">
Unsigned char; a single 8-bit unsigned character, any numeric data item or literal
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038607"> </a><p class="pCellBody">
18
</p>
</td>
    <td><a name="wp1038609"> </a><p class="pCellBody">
VT_UI2 
</p>
</td>
    <td><a name="wp1038611"> </a><p class="pCellBody">
unsigned short
</p>
</td>
    <td><a name="wp1038613"> </a><p class="pCellBody">
numeric
</p>
</td>
    <td><a name="wp1038615"> </a><p class="pCellBody">
Unsigned short; a 16-bit unsigned integer, any numeric data item or literal
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038617"> </a><p class="pCellBody">
19
</p>
</td>
    <td><a name="wp1038619"> </a><p class="pCellBody">
VT_UI4 
</p>
</td>
    <td><a name="wp1038621"> </a><p class="pCellBody">
unsigned long
</p>
</td>
    <td><a name="wp1038623"> </a><p class="pCellBody">
numeric
</p>
</td>
    <td><a name="wp1038625"> </a><p class="pCellBody">
Unsigned long; a 32-bit unsigned integer, any numeric data item or literal
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038627"> </a><p class="pCellBody">
20
</p>
</td>
    <td><a name="wp1038629"> </a><p class="pCellBody">
VT_I8 
</p>
</td>
    <td><a name="wp1038631"> </a><p class="pCellBody">
int64
</p>
</td>
    <td><a name="wp1038633"> </a><p class="pCellBody">
numeric
</p>
</td>
    <td><a name="wp1038635"> </a><p class="pCellBody">
Signed 64-bit int; a 64-bit signed integer, any numeric data item or literal
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038637"> </a><p class="pCellBody">
21
</p>
</td>
    <td><a name="wp1038639"> </a><p class="pCellBody">
VT_UI8 
</p>
</td>
    <td><a name="wp1038641"> </a><p class="pCellBody">
uint64
</p>
</td>
    <td><a name="wp1038643"> </a><p class="pCellBody">
numeric
</p>
</td>
    <td><a name="wp1038645"> </a><p class="pCellBody">
Unsigned 64-bit int; a 64-bit unsigned integer, any numeric data item or literal
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038647"> </a><p class="pCellBody">
22
</p>
</td>
    <td><a name="wp1038649"> </a><p class="pCellBody">
VT_INT 
</p>
</td>
    <td><a name="wp1038651"> </a><p class="pCellBody">
int
</p>
</td>
    <td><a name="wp1038653"> </a><p class="pCellBody">
numeric
</p>
</td>
    <td><a name="wp1038655"> </a><p class="pCellBody">
Signed machine int; a 32-bit signed integer, any numeric data item or literal
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038657"> </a><p class="pCellBody">
23
</p>
</td>
    <td><a name="wp1038659"> </a><p class="pCellBody">
VT_UINT 
</p>
</td>
    <td><a name="wp1038661"> </a><p class="pCellBody">
unsigned int
</p>
</td>
    <td><a name="wp1038663"> </a><p class="pCellBody">
numeric
</p>
</td>
    <td><a name="wp1038665"> </a><p class="pCellBody">
Unsigned machine int; a 32-bit unsigned integer, any numeric data item or literal
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038667"> </a><p class="pCellBody">
24
</p>
</td>
    <td><a name="wp1038669"> </a><p class="pCellBody">
VT_VOID 
</p>
</td>
    <td><a name="wp1038671"> </a><p class="pCellBody">
void
</p>
</td>
    <td><a name="wp1038673"> </a><p class="pCellBody">
N/A
</p>
</td>
    <td><a name="wp1038675"> </a><p class="pCellBody">
C style void
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038677"> </a><p class="pCellBody">
25
</p>
</td>
    <td><a name="wp1038679"> </a><p class="pCellBody">
VT_HRESULT 
</p>
</td>
    <td><a name="wp1038681"> </a><p class="pCellBody">
HRESULT
</p>
</td>
    <td><a name="wp1038683"> </a><p class="pCellBody">
numeric
</p>
</td>
    <td><a name="wp1038685"> </a><p class="pCellBody">
Standard return type; a 32-bit unsigned integer, any numeric data item or literal
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038687"> </a><p class="pCellBody">
26
</p>
</td>
    <td><a name="wp1038689"> </a><p class="pCellBody">
VT_PTR 
</p>
</td>
    <td><a name="wp1038691"> </a><p class="pCellBody">
PTR
</p>
</td>
    <td><a name="wp1038693"> </a><p class="pCellBody">
numeric
</p>
</td>
    <td><a name="wp1038695"> </a><p class="pCellBody">
Pointer type; a USAGE HANDLE or USAGE POINTER data item
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038697"> </a><p class="pCellBody">
27
</p>
</td>
    <td><a name="wp1038699"> </a><p class="pCellBody">
VT_SAFEARRAY 
</p>
</td>
    <td><a name="wp1038701"> </a><p class="pCellBody">
SAFEARRAY 
</p>
</td>
    <td><a name="wp1038703"> </a><p class="pCellBody">
table 
</p>
</td>
    <td><a name="wp1038705"> </a><p class="pCellBody">
One- or two-dimensional table with one USAGE HANDLE or USAGE HANDLE OF VARIANT elementary item
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038707"> </a><p class="pCellBody">
28
</p>
</td>
    <td><a name="wp1038709"> </a><p class="pCellBody">
VT_CARRAY 
</p>
</td>
    <td><a name="wp1038711"> </a><p class="pCellBody">
CARRAY
</p>
</td>
    <td><a name="wp1038713"> </a><p class="pCellBody">
N/A
</p>
</td>
    <td><a name="wp1038715"> </a><p class="pCellBody">
C style array
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038717"> </a><p class="pCellBody">
29
</p>
</td>
    <td><a name="wp1038719"> </a><p class="pCellBody">
VT_USERDEFINED 
</p>
</td>
    <td><a name="wp1038721"> </a><p class="pCellBody">
USERDEFINED
</p>
</td>
    <td><a name="wp1038723"> </a><p class="pCellBody">
N/A
</p>
</td>
    <td><a name="wp1038725"> </a><p class="pCellBody">
User-defined type
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038727"> </a><p class="pCellBody">
30
</p>
</td>
    <td><a name="wp1038729"> </a><p class="pCellBody">
VT_LPSTR 
</p>
</td>
    <td><a name="wp1038731"> </a><p class="pCellBody">
LPSTR
</p>
</td>
    <td><a name="wp1038733"> </a><p class="pCellBody">
alphanumeric
</p>
</td>
    <td><a name="wp1038735"> </a><p class="pCellBody">
Null terminated string; any alphanumeric data item or literal
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038737"> </a><p class="pCellBody">
31
</p>
</td>
    <td><a name="wp1038739"> </a><p class="pCellBody">
VT_LPWSTR 
</p>
</td>
    <td><a name="wp1038741"> </a><p class="pCellBody">
LPWSTR
</p>
</td>
    <td><a name="wp1038743"> </a><p class="pCellBody">
alphanumeric
</p>
</td>
    <td><a name="wp1038745"> </a><p class="pCellBody">
Wide null terminated string; any alphanumeric data item or literal
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038747"> </a><p class="pCellBody">
36
</p>
</td>
    <td><a name="wp1038749"> </a><p class="pCellBody">
VT_RECORD 
</p>
</td>
    <td><div class="pPreformatted"><pre class="pPreformatted">
       <a name="wp1038751"> </a>
</pre></div>
</td>
    <td><a name="wp1038753"> </a><p class="pCellBody">
N/A
</p>
</td>
    <td><a name="wp1038755"> </a><p class="pCellBody">
User-defined type
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038757"> </a><p class="pCellBody">
64
</p>
</td>
    <td><a name="wp1038759"> </a><p class="pCellBody">
VT_FILETIME 
</p>
</td>
    <td><a name="wp1038761"> </a><p class="pCellBody">
FILETIME
</p>
</td>
    <td><a name="wp1038763"> </a><p class="pCellBody">
N/A
</p>
</td>
    <td><a name="wp1038765"> </a><p class="pCellBody">
FILETIME
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038767"> </a><p class="pCellBody">
65
</p>
</td>
    <td><a name="wp1038769"> </a><p class="pCellBody">
 VT_BLOB 
</p>
</td>
    <td><a name="wp1038771"> </a><p class="pCellBody">
BLOB
</p>
</td>
    <td><a name="wp1038773"> </a><p class="pCellBody">
N/A
</p>
</td>
    <td><a name="wp1038775"> </a><p class="pCellBody">
Length prefixed bytes
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038777"> </a><p class="pCellBody">
66
</p>
</td>
    <td><a name="wp1038779"> </a><p class="pCellBody">
VT_STREAM 
</p>
</td>
    <td><a name="wp1038781"> </a><p class="pCellBody">
STREAM
</p>
</td>
    <td><a name="wp1038783"> </a><p class="pCellBody">
N/A
</p>
</td>
    <td><a name="wp1038785"> </a><p class="pCellBody">
Name of the stream follows.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038787"> </a><p class="pCellBody">
67
</p>
</td>
    <td><a name="wp1038789"> </a><p class="pCellBody">
VT_STORAGE 
</p>
</td>
    <td><a name="wp1038791"> </a><p class="pCellBody">
STORAGE
</p>
</td>
    <td><a name="wp1038793"> </a><p class="pCellBody">
N/A
</p>
</td>
    <td><a name="wp1038795"> </a><p class="pCellBody">
Name of the storage follows.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038797"> </a><p class="pCellBody">
68
</p>
</td>
    <td><a name="wp1038799"> </a><p class="pCellBody">
VT_STREAMED<br />_OBJECT 
</p>
</td>
    <td><a name="wp1038801"> </a><p class="pCellBody">
STREAMED<br />_OBJECT
</p>
</td>
    <td><a name="wp1038803"> </a><p class="pCellBody">
N/A
</p>
</td>
    <td><a name="wp1038805"> </a><p class="pCellBody">
Stream contains an object.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038807"> </a><p class="pCellBody">
69
</p>
</td>
    <td><a name="wp1038809"> </a><p class="pCellBody">
VT_STORED<br />_OBJECT 
</p>
</td>
    <td><a name="wp1038811"> </a><p class="pCellBody">
STORED<br />_OBJECT
</p>
</td>
    <td><a name="wp1038813"> </a><p class="pCellBody">
N/A
</p>
</td>
    <td><a name="wp1038815"> </a><p class="pCellBody">
Storage contains an object.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038817"> </a><p class="pCellBody">
70
</p>
</td>
    <td><a name="wp1038819"> </a><p class="pCellBody">
VT_BLOB_OBJECT 
</p>
</td>
    <td><a name="wp1038821"> </a><p class="pCellBody">
BLOB_OBJECT
</p>
</td>
    <td><a name="wp1038823"> </a><p class="pCellBody">
N/A
</p>
</td>
    <td><a name="wp1038825"> </a><p class="pCellBody">
Blob contains an object.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038827"> </a><p class="pCellBody">
71
</p>
</td>
    <td><a name="wp1038829"> </a><p class="pCellBody">
 VT_CF 
</p>
</td>
    <td><a name="wp1038831"> </a><p class="pCellBody">
CF
</p>
</td>
    <td><a name="wp1038833"> </a><p class="pCellBody">
N/A
</p>
</td>
    <td><a name="wp1038835"> </a><p class="pCellBody">
Clipboard format
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038837"> </a><p class="pCellBody">
72
</p>
</td>
    <td><a name="wp1038839"> </a><p class="pCellBody">
 VT_CLSID 
</p>
</td>
    <td><a name="wp1038841"> </a><p class="pCellBody">
CLSID
</p>
</td>
    <td><a name="wp1038843"> </a><p class="pCellBody">
alphanumeric
</p>
</td>
    <td><a name="wp1038845"> </a><p class="pCellBody">
A Class ID; any alphanumeric data item or literal
</p>
</td>
</tr>
</table>
</div>
<p class="pBody">
</p>
<a name="wp1038847"> </a><p class="pBody">
If DATE is in numeric form, days are represented by whole number increments starting with 30 December 1899, midnight as time zero.  Hour values are expressed as the absolute value of the fractional part of the number.  For example: 
</p>
<a name="wp1038848"> </a><p class="pIndented1">
0.00 is 30 December 1899, 12:00 A.M.  
</p>
<a name="wp1038849"> </a><p class="pIndented1">
5.25 is 4 January 1900, 6 A.M.  
</p>
<a name="wp1038850"> </a><p class="pIndented1">
5.875 is 4 January 1900, 9 P.M. 
</p>
<a name="wp1038851"> </a><p class="pBody">
If DATE is in alphanumeric form, the date can be in a variety of formats.  For example, the following are all valid formats:
</p>
<a name="wp1038852"> </a><p class="pIndented1">
&quot;25 January 1996&quot;
</p>
<a name="wp1038853"> </a><p class="pIndented1">
&quot;8:30:00&quot;
</p>
<a name="wp1038854"> </a><p class="pIndented1">
&quot;20:30:00&quot;
</p>
<a name="wp1038855"> </a><p class="pIndented1">
&quot;January 25, 1996 8:30:00&quot;
</p>
<a name="wp1038856"> </a><p class="pIndented1">
&quot;8:30:00 Jan. 25, 1996&quot;
</p>
<a name="wp1038857"> </a><p class="pIndented1">
&quot;1/25/1996 8:30:00&quot; 
</p>
<a name="wp1038858"> </a><p class="pBody">
You may pass a USAGE POINTER item that was filled in by a prior method or property call, or you may pass a USAGE HANDLE item which contains a handle to an ActiveX control or COM object.  You may not pass a Screen Section item name as a handle of an ActiveX control.  Instead, use the Format 11 SET verb to get a handle to the ActiveX control (e.g., SET my-handle to HANDLE OF screen-section-item).  The IUnknown interface is part of the Microsoft COM standard.  Any COM object or ActiveX control exports interfaces that are used to create, use, and destroy objects.  Each interface is based on a single interface called IUnknown.  This means that you may pass a pointer to any of these interfaces (objects) to a method or property that expects an IUnknown*.
</p>
<a name="wp1038859"> </a><p class="pBody">
The runtime automatically converts a handle to an ActiveX control or COM object to the IUnknown* type when you pass it to a method or property.
</p>
<a name="wp1038860"> </a><p class="pBody">
Any of these types may be followed by an asterisk to indicate that the parameter will be passed &quot;by reference&quot;.  This means that the ActiveX control or COM object method or property may modify the contents of the passed data item.
</p>
<a name="wp1038861"> </a><p class="pBody">
Any type name other than those in the list is a user-defined type.  User-defined types are those that are created by the ActiveX control or COM object programmer or vendor.  They always resolve to one of the types in the list but have different names to indicate their functions.  For example, OLE_COLOR is a user-defined type that is commonly used to represent colors in ActiveX controls and COM objects.  It resolves to a unsigned long which is a 32-bit unsigned integer.  You must read the programmer's documentation of the particular ActiveX control or COM object in order to determine how to use user-defined types.  For example, after reading about OLE_COLOR you may learn a formula to allow you to construct an OLE_COLOR if you know the red (0-255), green (0-255), and blue (0-255) components of the color you are trying to represent. 
</p>
<a name="wp1038862"> </a><p class="pBody">
Another common user-defined type is IFontDisp*.  This type is used to represent fonts.  Some ActiveX controls and/or COM objects have properties whose values are fonts, or methods whose parameters are fonts.  You may use INQUIRE to get a IFontDisp* into a HANDLE OF IFontDisp item. IFontDisp is defined in &quot;acuclass.def&quot;.  Then you may modify the NAME, SIZE, BOLD, ITALIC, UNDERLINE, STRIKETHROUGH, WEIGHT, or CHARSET properties of the IFontDisp item using the MODIFY verb.  For example:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
copy &quot;acuclass.def&quot;<a name="wp1038863"> </a>
...<a name="wp1038864"> </a>
77  my-font-disp  usage handle of IFontDisp<a name="wp1038865"> </a>
...<a name="wp1038866"> </a>
INQUIRE Calendar-1 DayFont in my-font-disp.<a name="wp1038867"> </a>
MODIFY my-font-disp Name = &quot;Courier New&quot;<a name="wp1038868"> </a>
     @Size = 15, Bold = 1.<a name="wp1038869"> </a>
</pre></div>
<a name="wp1038870"> </a><p class="pNote">
<hr />
<b>Note:  </b>Because SIZE is a common ACUCOBOL-GT property name, @Size uses the &quot;at&quot; sign to distinguish it as an ActiveX property name.
<hr />
</p>
<a name="wp1038871"> </a><p class="pBody">
Alternatively, you may use the double colon (&quot;::&quot;) operator to set these properties in a single MODIFY statement.  For example:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
MODIFY Calendar-1 DayFont::Name = &quot;Courier New&quot;<a name="wp1038872"> </a>
    DayFont::Size = 15, DayFont::Bold = 1.<a name="wp1038873"> </a>
</pre></div>
<a name="wp1038874"> </a><p class="pBody">
In this case, you do not use a HANDLE OF IFontDisp item.  Instead, the runtime creates a temporary HANDLE OF IFontDisp item, does the INQUIRE, and sets the properties &quot;behind the scenes&quot; in the processing of the MODIFY statement.
</p>
<a name="wp1038875"> </a><p class="pBody">
Another user-defined type that you might see is DataSource*, which is sometimes used as the value of a DataSource property in an ActiveX control.  It resolves to the IUnknown * type.  For example, to use the Microsoft DataGrid control and the Microsoft ADO control together, set the DataGrid control's DataSource property to the IUnknown* of the ADO control.  As stated above, to pass an ActiveX control or COM object as a IUnknown* you must pass the handle of the control or COM object.  
</p>
<a name="wp1038876"> </a><p class="pBody">
For example:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
01  main-screen.<a name="wp1038877"> </a>
    03 adoctrl, Adodc,<a name="wp1038878"> </a>
       COL 14 LINE 21 LINES 2.20 CELLS<a name="wp1038879"> </a>
       SIZE 29.00 CELLS<a name="wp1038880"> </a>
       LICENSE-KEY &quot;C4145310-469C-11d1-B182-00A0C922E820&quot;.<a name="wp1038881"> </a>
    03 testgrid, Datagrid,<a name="wp1038882"> </a>
       COL 14 LINE 9 LINES 10 CELLS<a name="wp1038883"> </a>
       SIZE 28 CELLS<a name="wp1038884"> </a>
       LICENSE-KEY &quot;CDE57A55-8B86-11D0-b3C6-00A0C90AEA82&quot;.<a name="wp1038885"> </a>
<a name="wp1038886"> </a>
    03 PUSH-BUTTON LINE 27 COL 23 TITLE &quot;Exit&quot;<a name="wp1038887"> </a>
       CANCEL-BUTTON LINES 4 CELLS SIZE 10 CELLS.<a name="wp1038888"> </a>
<a name="wp1038889"> </a>
...<a name="wp1038890"> </a>
<a name="wp1038891"> </a>
DISPLAY main-screen.<a name="wp1038892"> </a>
<a name="wp1038893"> </a>
MODIFY adoctrl ConnectionString = &quot;DSN=Customers&quot;.<a name="wp1038894"> </a>
MODIFY adoctrl DatasourceName = &quot;Customers&quot;.<a name="wp1038895"> </a>
MODIFY adoctrl RecordSource = &quot;Select * from publishers&quot;.<a name="wp1038896"> </a>
<a name="wp1038897"> </a>
MODIFY testgrid Caption = &quot;Test&quot;.<a name="wp1038898"> </a>
SET adoctrl-handle TO HANDLE OF adoctrl.<a name="wp1038899"> </a>
MODIFY testgrid DataSource = adoctrl-handle.<a name="wp1038900"> </a>
<a name="wp1038901"> </a>
DISPLAY testgrid.<a name="wp1038902"> </a>
</pre></div>
<a name="wp1038903"> </a><p class="pBody">
<span style="font-family: Arial, Verdana, Helvetica, sans-serif; font-weight: normal">T</span>he handle of the &quot;adoctrl&quot; is obtained with the SET verb.  It is then passed as the value of the DataSource property in the MODIFY statement that follows.
</p>
<a name="wp1037483"> </a><p class="pBody">

</p>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com?subject=E-01-UG-060622-Interop-7.2">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
