<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.5.1025" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/15/06 14:43:47" />
  <title>C$JAVA Routine</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       ACUCOBOL-GT Appendices <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="gt4i.htm">Appendix I:  ACUCOBOL-GT Library Routines</a> &gt; <a href="gt4i2.htm">I.1 Library Routines</a> &gt; </p>
<a name="wp1309802"> </a><h2 class="pHeading2">
C$JAVA Routine
</h2>
<a name="wp1309803"> </a><p class="pBody">
This routine enables your ACUCOBOL-GT program to invoke a Java program.  It causes the Java Virtual Machine (JVM) to be loaded (if it is not already) and the specified Java class to be loaded.  
</p>
<a name="wp1309804"> </a><p class="pBody">
Using this routine, you can create a Java object, call the methods of a Java object, create and use Java arrays, and use Java logging.
</p>
<a name="wp1309805"> </a><p class="pBody">
COBOL/Java interoperability is described fully in Chapter 2 of <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>.  Section 2.3.1, &quot;Calling the C$JAVA Routine,&quot; provides detailed information and best practices for working with the C$JAVA routine.
</p>
<a name="wp1309806"> </a><h3 class="pHeadingRef">
Usage
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
CALL &quot;C$JAVA&quot; <a name="wp1309807"> </a>
    USING OP-CODE, CLASS-NAME, METHOD-NAME, METHOD-SIGNATURE,<a name="wp1309808"> </a>
        FIELD-INT, FIELD-RETURN <a name="wp1323555"> </a>
    GIVING STATUS-VAL<a name="wp1309809"> </a>
</pre></div>
<a name="wp1309810"> </a><h3 class="pHeadingRef">
Parameters
</h3>
<a name="wp1309811"> </a><p class="pBody">
<b class="cBold">OP-CODE</b>    Numeric parameter
</p>
<a name="wp1309812"> </a><p class="pBody">
Specifies the operation to perform. These are defined in the description section below.
</p>
<a name="wp1309813"> </a><p class="pBody">
<b class="cBold">CLASS-NAME</b>   Alphanumeric data item or literal
</p>
<a name="wp1309814"> </a><p class="pBody">
Specifies the fully qualified class name, with package name if necessary, of the Java class to load.
</p>
<a name="wp1309815"> </a><p class="pBody">
<b class="cBold">METHOD-NAME</b>   Alphanumeric data item or literal
</p>
<a name="wp1309816"> </a><p class="pBody">
Specifies the name of the specific method in the Java class that you want to call.
</p>
<a name="wp1309817"> </a><p class="pBody">
<b class="cBold">METHOD-SIGNATURE</b>   Alphanumeric data item or literal
</p>
<a name="wp1309818"> </a><p class="pBody">
Specifies the method signature ID of the exact method to be called.  You can get this value by running the Java utility &quot;javap.exe&quot;on the desired jar file or class.  This utility comes with the Java JRE and automatically produces the exact signature of a given method.  You can copy and paste this signature ID into your CALL &quot;C$JAVA&quot; statement.  You can also determine this value manually as described in <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>, section 2.3.1.1.
</p>
<a name="wp1309819"> </a><p class="pBody">
FIELD-INT   <span style="font-family: Arial, Verdana, Helvetica, sans-serif; font-weight: normal">Numeric parameter</span>
</p>
<a name="wp1309820"> </a><p class="pBody">
Specifies the input parameters that the method requires.
</p>
<a name="wp1309821"> </a><p class="pBody">
<b class="cBold">FIELD-RETURN</b>   Numeric parameter
</p>
<a name="wp1309822"> </a><p class="pBody">
Specifies the parameter to hold the Java return value from the method.
</p>
<a name="wp1309823"> </a><p class="pBody">
<b class="cBold">STATUS-VAL</b>   Numeric parameter
</p>
<a name="wp1323637"> </a><p class="pBody">
Specifies a status value be returned after the call is complete.  Possible return values are:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
CJAVA-SUCCESS           VALUE 0.<a name="wp1323638"> </a>
CJAVA-INVALIDARG        VALUE -1.<a name="wp1323639"> </a>
CJAVA-INVALIDSIGNATURE  VALUE -2.<a name="wp1309827"> </a>
CJAVA-CLASSNOTFOUND     VALUE -3.<a name="wp1309828"> </a>
CJAVA-METHODNOTFOUND    VALUE -4.<a name="wp1309829"> </a>
CJAVA-INVALIDPARAMTYPE  VALUE -5.<a name="wp1309830"> </a>
CJAVA-JAVALIBNOTLOADED  VALUE -6.<a name="wp1309831"> </a>
CJAVA-MEMNOTALLOC       VALUE -7.<a name="wp1309832"> </a>
CJAVA-INVALIDOPCODE     VALUE -8.<a name="wp1309833"> </a>
CJAVA-NOMEMORY          VALUE -9.<a name="wp1309834"> </a>
CJAVA-METHODFAILED      VALUE -10.<a name="wp1309835"> </a>
</pre></div>
<a name="wp1309836"> </a><h3 class="pHeadingRef">
Description
</h3>
<a name="wp1309837"> </a><p class="pBody">
In all of the op-codes below, you can pass either the constant name or numeric value shown in parentheses. A &quot;java.def&quot; file is located in the sample/def directory where you installed ACUCOBOL-GT.  It contains the op-codes for C$JAVA, as well as array types and return values.  You can include the file &quot;java.def&quot; in your COBOL program using the following statement if the &quot;java.def&quot; file is located in the same directory as the &quot;.cbl&quot; file:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
   working-storage section.<a name="wp1309838"> </a>
   COPY &quot;java.def&quot;.<a name="wp1309839"> </a>
</pre></div>
<a name="wp1309840"> </a><h3 class="pHeadingRef">
CJAVA-NEW (op-code 1)
</h3>
<a name="wp1309841"> </a><p class="pBody">
Create a new Java object on the local Java Virtual Machine (JVM).  You must pass a fully qualified package/classname and a constructor signature. Use the GIVING statement to return the object handle.  For example:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
CALL &quot;C$JAVA&quot; USING CJAVA-NEW, &quot;acuCobolGT/CAcuCobol&quot;, &quot;()V&quot;<a name="wp1309842"> </a>
   GIVING OBJECT-HANDLE.<a name="wp1323651"> </a>
</pre></div>
<a name="wp1351849"> </a><p class="pBody">
Refer to <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>, Chapter 2, section 2.3.1.3, &quot;Creating and Using Java Objects in COBOL,&quot; for additional details.
</p>
<a name="wp1309843"> </a><h3 class="pHeadingRef">
CJAVA-DELETE (op-code 2)      
</h3>
<a name="wp1309844"> </a><p class="pBody">
Delete an existing Java object.
</p>
<a name="wp1309845"> </a><h3 class="pHeadingRef">
CJAVA-CREATE (op-code 3)
</h3>
<a name="wp1309846"> </a><p class="pBody">
Create a new Java object.  This is the same as using the CJAVA-NEW op-code.  See op-code 1 for more details.
</p>
<a name="wp1309847"> </a><h3 class="pHeadingRef">
CJAVA-DESTROY (op-code 4)
</h3>
<a name="wp1309848"> </a><p class="pBody">
Destroy a Java object. You must pass a valid object handle:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
CALL &quot;C$JAVA&quot; USING CJAVA-DESTROY, OBJECT-HANDLE <a name="wp1309849"> </a>
   GIVING STATUS-VAL.<a name="wp1323652"> </a>
</pre></div>
<a name="wp1356659"> </a><p class="pBody">
Refer to <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>, Chapter 2, section 2.3.1.3, &quot;Creating and Using Java Objects in COBOL,&quot; for additional details.
</p>
<a name="wp1309854"> </a><h3 class="pHeadingRef">
CJAVA-INVOKE (op-code 7)
</h3>
<a name="wp1309855"> </a><p class="pBody">
Same as CJAVA-CALLSTATIC.  See op-code 10 for details.
</p>
<a name="wp1309856"> </a><h3 class="pHeadingRef">
CJAVA-CALL (op-code 8)
</h3>
<a name="wp1309857"> </a><p class="pBody">
Call a virtual Java method.  For example:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
CALL &quot;C$JAVA&quot; USING CJAVA-CALL, OBJECT-HANDLE, <a name="wp1323655"> </a>
   &quot;acuCobolGT/CAcuCobol&quot;, &quot;CobolCallingJavaLong&quot;, <a name="wp1323656"> </a>
   &quot;(J)J&quot;, FIELD-LONG, FIELD-LONGRET <a name="wp1323667"> </a>
   GIVING STATUS-VAL<a name="wp1323666"> </a>
</pre></div>
<a name="wp1309859"> </a><p class="pBody">
Methods can be called as static methods, virtual methods, or non-virtual methods by using op-codes 8 -10.  If an op-code is not used, the default runtime behavior is to attempt to call the method statically, and then as a virtual method by attempting to create an object using a default constructor. A non-virtual method is called on the specific object that is being used. A virtual method can be called on a method that is inherited from one of the object's superclasses. 
</p>
<a name="wp1351902"> </a><p class="pBody">
Refer to <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>, Chapter 2, section 2.3.1.3, subsection &quot;Calling Methods on Java Objects,&quot; for additional details.
</p>
<a name="wp1309860"> </a><h3 class="pHeadingRef">
CJAVA-CALLNONVIRTUAL (op-code 9)
</h3>
<a name="wp1309861"> </a><p class="pBody">
Call a non-virtual Java method on the specific object that is being used.  For example:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
CALL &quot;C$JAVA&quot; USING CJAVA-CALLNONVIRTUAL, OBJECT-HANDLE,  <a name="wp1309862"> </a>
   &quot;acuCobolGT/CAcuCobol&quot;, &quot;CobolCallingJavaBoolean&quot;, <a name="wp1323673"> </a>
   &quot;(Z)Z&quot;, FIELD-BOOL, FIELD-BOOLRET <a name="wp1323676"> </a>
   GIVING STATUS-VAL<a name="wp1323675"> </a>
</pre></div>
<a name="wp1351921"> </a><p class="pBody">
Refer to <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>, Chapter 2, section 2.3.1.3, subsection &quot;Calling Methods on Java Objects,&quot; for additional details.
</p>
<a name="wp1309863"> </a><h3 class="pHeadingRef">
CJAVA-CALLSTATIC (op-code 10)
</h3>
<a name="wp1309864"> </a><p class="pBody">
Call a static Java method.  For example:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
CALL &quot;C$JAVA&quot; USING CJAVA-CALLSTATIC, &quot;acuCobolGT/CAcuCobol&quot;,<a name="wp1309865"> </a>
   &quot;CobolCallingJavaDouble&quot;, &quot;(D)D&quot;, <a name="wp1323682"> </a>
   FIELD-DOUBLE, FIELD-DOUBLERET <a name="wp1323683"> </a>
   GIVING STATUS-VAL<a name="wp1323684"> </a>
</pre></div>
<a name="wp1309866"> </a><div style="color: #000000; font-family: Arial, Verdana, Helvetica, sans-serif; font-size: 2pt; font-style: normal; font-variant: normal; font-weight: normal; margin-bottom: 0pt; margin-left: 0pt; margin-right: 0pt; margin-top: 0pt; text-align: center; text-decoration: none; text-indent: 0pt; text-transform: none">

</div>
<a name="wp1309867"> </a><p class="pBody">
Note that you can call static methods directly without having to create an object first.
</p>
<a name="wp1351929"> </a><p class="pBody">
Refer to <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>, Chapter 2, section 2.3.1.3, subsection &quot;Calling Methods on Java Objects,&quot; for additional details.
</p>
<a name="wp1309868"> </a><h3 class="pHeadingRef">
CJAVA-NEWARRAY (op-code 11)
</h3>
<a name="wp1309869"> </a><p class="pBody">
Create a new Java array.   This is the same as using the CJAVA-CREATEARRAY op-code.  See op-code 18 for more details. See also <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>, Chapter 2, section 2.3.1.4, &quot;Creating and Using Java Arrays in COBOL.&quot;
</p>
<a name="wp1309870"> </a><h3 class="pHeadingRef">
CJAVA-DESTROYARRAY (op-code 12)
</h3>
<a name="wp1309871"> </a><p class="pBody">
Destroy a Java array.  Refer to <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>, Chapter 2, section 2.3.1.4, &quot;Creating and Using Java Arrays in COBOL,&quot; for additional details.
</p>
<a name="wp1309872"> </a><h3 class="pHeadingRef">
CJAVA-SETARRAYELEMENT (op-code 13)
</h3>
<a name="wp1309873"> </a><p class="pBody">
Set Java array elements.  Pass in an array handle, the position in the array to set, and the value to set. In the following example, the first element of an array is set with the first value from an integer table that is USAGE IS SIGNED-INT OCCURS 10.
</p>
<div class="pPreformatted"><pre class="pPreformatted">
CALL &quot;C$JAVA&quot; USING CJAVA-SETARRAYELEMENT, <a name="wp1309874"> </a>
   ARRAY-HANDLE, 1, INT-TABLE(1), <a name="wp1323688"> </a>
   GIVING STATUS-VAL.<a name="wp1323689"> </a>
</pre></div>
<a name="wp1352152"> </a><p class="pBody">
Refer to <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>, Chapter 2, section 2.3.1.4, &quot;Creating and Using Java Arrays in COBOL,&quot; for additional details.
</p>
<a name="wp1309875"> </a><h3 class="pHeadingRef">
CJAVA-GETARRAYELEMENT (op-code 14)
</h3>
<a name="wp1309876"> </a><p class="pBody">
Get a Java array element.  This call requires an array handle, the position in the array to get, and the variable into which the array value will be placed. Here is an example:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
CALL &quot;C$JAVA&quot; USING CJAVA-GETARRAYELEMENT, <a name="wp1309877"> </a>
   ARRAY-HANDLE, 5, INT-TABLE(1), <a name="wp1323705"> </a>
   GIVING STATUS-VAL.<a name="wp1323706"> </a>
</pre></div>
<a name="wp1309878"> </a><p class="pBody">
In this case, we are getting element 5 from the array and placing it in the first element of an integer table.
</p>
<a name="wp1352123"> </a><p class="pBody">
Refer to <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>, Chapter 2, section 2.3.1.4, &quot;Creating and Using Java Arrays in COBOL,&quot; for additional details.
</p>
<a name="wp1309879"> </a><h3 class="pHeadingRef">
CJAVA-CLEARARRAY (op-code 15)
</h3>
<a name="wp1309880"> </a><p class="pBody">
Clear a Java array.  Pass in the array handle of the array to be cleared. Here is an example:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
CALL &quot;C$JAVA&quot; USING CJAVA-CLEARARRAY, ARRAY-HANDLE <a name="wp1309881"> </a>
   GIVING STATUS-VAL.<a name="wp1323707"> </a>
</pre></div>
<a name="wp1352140"> </a><p class="pBody">
Refer to <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>, Chapter 2, section 2.3.1.4, &quot;Creating and Using Java Arrays in COBOL,&quot; for additional details.
</p>
<a name="wp1309882"> </a><h3 class="pHeadingRef">
CJAVA-CONVERTARRAYTOTABLE (op-code 16)
</h3>
<a name="wp1309883"> </a><p class="pBody">
Convert a Java array to a COBOL table.  Although ACUCOBOL-GT normally does this automatically, this op-code gives the COBOL programmer more precise control over the conversion process.  The call takes the array handle, the number of elements to convert, the starting element position in the array, and the COBOL table variable in which to place the converted array.
</p>
<a name="wp1309884"> </a><p class="pBody">
Here is an example of an array of Java ints being converted to a USAGE SIGNED-INT OCCURS 10 table:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
CALL &quot;C$JAVA&quot; USING CJAVA-CONVERTARRAYTOTABLE, <a name="wp1309885"> </a>
   ARRAY_HANDLE, 10, 0, INT-TABLE(1) <a name="wp1323712"> </a>
   GIVING STATUS-VAL.<a name="wp1323713"> </a>
</pre></div>
<a name="wp1352111"> </a><p class="pBody">
Refer to <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>, Chapter 2, section 2.3.1.4, &quot;Creating and Using Java Arrays in COBOL,&quot; for additional details.
</p>
<a name="wp1309886"> </a><h3 class="pHeadingRef">
CJAVA-LOGMESSAGE (op-code 17)
</h3>
<a name="wp1309887"> </a><p class="pBody">
This operation places an entry in the Java log.  Java messages can be logged from a COBOL program using the CJAVA-LOGMESSAGE as follows:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
CALL &quot;C$JAVA&quot; USING CJAVA-LOGMESSAGE, &quot;Message to log&quot;.<a name="wp1309888"> </a>
</pre></div>
<a name="wp1309889"> </a><p class="pBody">
The advantage of using the Java log is that it is thread-safe, and all of the messages from a given thread of execution are written to the same log whether that thread is executing COBOL or Java. Also, logs in Java are highly configurable. Note that the log output above is formatted to report date, time, class, method, and log level before the message.  You can configure logging by modifying the &quot;logging.properties&quot; file found in the runtime directory.
</p>
<a name="wp1352058"> </a><p class="pBody">
Refer to <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>, Chapter 2, section 2.3.1.5, &quot;Using Java Logging from COBOL,&quot; for additional details.
</p>
<a name="wp1309890"> </a><h3 class="pHeadingRef">
CJAVA-CREATEARRAY (op-code 18)
</h3>
<a name="wp1309891"> </a><p class="pBody">
Create a new Java array.  Following are the array types supported by C$JAVA:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
   CJAVA-OBJECTARRAY     VALUE 300.<a name="wp1309892"> </a>
   CJAVA-BOOLEANARRAY    VALUE 301.<a name="wp1309893"> </a>
   CJAVA-BYTEARRAY       VALUE 302.<a name="wp1309894"> </a>
   CJAVA-CHARARRAY       VALUE 303.<a name="wp1309895"> </a>
   CJAVA-SHORTARRAY      VALUE 304.<a name="wp1309896"> </a>
   CJAVA-INTARRAY        VALUE 305.<a name="wp1309897"> </a>
   CJAVA-LONGARRAY       VALUE 306.<a name="wp1309898"> </a>
   CJAVA-FLOATARRAY      VALUE 307.<a name="wp1309899"> </a>
   CJAVA-DOUBLEARRAY     VALUE 308.<a name="wp1309900"> </a>
   CJAVA-STRINGARRAY     VALUE 309.<a name="wp1309901"> </a>
</pre></div>
<a name="wp1309902"> </a><p class="pBody">
<span style="font-family: Arial, Verdana, Helvetica, sans-serif; font-style: italic">To create an array of primitive types</span>, pass the type of array, the size of the array, and return the array handle through the GIVING statement. For example:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
CALL &quot;C$JAVA&quot; USING CJAVA-CREATEARRAY, <a name="wp1309903"> </a>
   CJAVA-INTARRAY, ARRAY-SIZE <a name="wp1323722"> </a>
   GIVING ARRAY-HANDLE.<a name="wp1323721"> </a>
</pre></div>
<a name="wp1309904"> </a><p class="pBody">
<span style="font-family: Arial, Verdana, Helvetica, sans-serif; font-style: italic">To create an object array</span>: 
</p>
<div class="pPreformatted"><pre class="pPreformatted">
CALL &quot;C$JAVA&quot; USING CJAVA-CREATEARRAY, <a name="wp1309905"> </a>
   CJAVA-OBJECTARRAY, 10 <a name="wp1323737"> </a>
   GIVING ARRAY-HANDLE.<a name="wp1323746"> </a>
</pre></div>
<a name="wp1309906"> </a><p class="pBody">
In this case, the array consists of an array of object handles. 
</p>
<a name="wp1309907"> </a><p class="pBody">
<span style="font-family: Arial, Verdana, Helvetica, sans-serif; font-style: italic">To create a string array</span>:
</p>
<a name="wp1309908"> </a><p class="pBody">
Even though strings in Java are objects, they are treated separately for the convenience of using them with PIC X tables.  Here is an example of creating a string array:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
CALL &quot;C$JAVA&quot; USING CJAVA-CREATEARRAY, <a name="wp1309909"> </a>
   CJAVA-STRINGARRAY, 10 <a name="wp1323755"> </a>
   GIVING ARRAY-HANDLE.<a name="wp1323764"> </a>
</pre></div>
<a name="wp1352083"> </a><p class="pBody">
Refer to <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>, Chapter 2, section 2.3.1.4, &quot;Creating and Using Java Arrays in COBOL,&quot; for additional details.
</p>
<a name="wp1309910"> </a><h3 class="pHeadingRef">
CJAVA-CONVERTTABLETOARRAY (op-code 19)
</h3>
<a name="wp1309911"> </a><p class="pBody">
Convert a COBOL table to a Java array.  Although ACUCOBOL-GT normally does this automatically, this op-code gives the COBOL programmer more precise control over the conversion process.  The call requires the COBOL table from which the values will be taken, the number of elements, the position of the first element, and the handle of the destination array.
</p>
<a name="wp1309912"> </a><p class="pBody">
Here is an example of call that converts a table to an array:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
CALL &quot;C$JAVA&quot; USING CJAVA-CONVERTTABLETOARRAY, <a name="wp1309913"> </a>
   INT-TABLE(1), 10, 0, ARRAY-HANDLE, <a name="wp1323769"> </a>
   GIVING STATUS-VAL.<a name="wp1323774"> </a>
</pre></div>
<a name="wp1352095"> </a><p class="pBody">
Refer to <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>, Chapter 2, section 2.3.1.4, &quot;Creating and Using Java Arrays in COBOL,&quot; for additional details.
</p>
<a name="wp1309914"> </a><h3 class="pHeadingRef">
CJAVA-LOADCLASS (op-code 20)
</h3>
<a name="wp1036055"> </a><p class="pBody">
Manually load a Java class prior to use.  Normally, java doesn't require classes to be manually loaded. When you create new object, java typically searches the classpath and loads the class.
</p>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com subject=E-01-DS-060621-ACUCOBOL-GT-7.2">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
