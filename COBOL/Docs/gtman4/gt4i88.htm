<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.5.1025" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/15/06 14:43:47" />
  <title>I$IO Routine</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       ACUCOBOL-GT Appendices <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="gt4i.htm">Appendix I:  ACUCOBOL-GT Library Routines</a> &gt; <a href="gt4i2.htm">I.1 Library Routines</a> &gt; </p>
<a name="wp1036914"> </a><h2 class="pHeading2">
I$IO Routine
</h2>
<a name="wp1036921"> </a><p class="pBody">
The I$IO routine provides an interface to the file handler.  An operation code and some number of additional parameters (depending on the operation called) are passed to the routine.  The return code is set automatically after the call.  The external variable &quot;F-ERRNO&quot; is set according to any errors found.  &quot;F-ERRNO&quot; may not be reset on entry to I$IO, and should be checked only if I$IO returns an error condition.  
</p>
<a name="wp1036922"> </a><h3 class="pHeadingRef">
Usage
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
CALL &quot;I$IO&quot; <a name="wp1036923"> </a>
    USING OP-CODE, parameters<a name="wp1481284"> </a>
</pre></div>
<a name="wp1036925"> </a><h3 class="pHeadingRef">
Parameters
</h3>
<a name="wp1036926"> </a><p class="pBody">
<b class="cBold">OP-CODE</b>     Numeric parameter
</p>
<a name="wp1036927"> </a><p class="pBody">
Specifies the file handling routine to be performed.  This table shows which operation corresponds to each operation code.  The operations are detailed in the description below:
</p>
<a name="wp1037014"> </a><p class="pBodyRelative">
</p><div>
<table border="1" cellpadding="2" cellspacing="2">
  <caption></caption>
  <tr align="left" valign="top">    <th><a name="wp1063027"> </a>
Code

</th>
    <th><a name="wp1063029"> </a>
Operation

</th>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036934"> </a><p class="pCellBody">
1
</p>
</td>
    <td><a name="wp1036936"> </a><p class="pCellBody">
OPEN-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036939"> </a><p class="pCellBody">
2
</p>
</td>
    <td><a name="wp1036941"> </a><p class="pCellBody">
CLOSE-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036943"> </a><p class="pCellBody">
3
</p>
</td>
    <td><a name="wp1036945"> </a><p class="pCellBody">
MAKE-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036947"> </a><p class="pCellBody">
4
</p>
</td>
    <td><a name="wp1036949"> </a><p class="pCellBody">
INFO-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036951"> </a><p class="pCellBody">
5
</p>
</td>
    <td><a name="wp1036953"> </a><p class="pCellBody">
READ-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036955"> </a><p class="pCellBody">
6
</p>
</td>
    <td><a name="wp1036957"> </a><p class="pCellBody">
NEXT-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036959"> </a><p class="pCellBody">
7
</p>
</td>
    <td><a name="wp1036961"> </a><p class="pCellBody">
PREVIOUS-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036963"> </a><p class="pCellBody">
8
</p>
</td>
    <td><a name="wp1036965"> </a><p class="pCellBody">
START-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036967"> </a><p class="pCellBody">
9
</p>
</td>
    <td><a name="wp1036969"> </a><p class="pCellBody">
WRITE-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036971"> </a><p class="pCellBody">
10
</p>
</td>
    <td><a name="wp1036973"> </a><p class="pCellBody">
REWRITE-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036975"> </a><p class="pCellBody">
11
</p>
</td>
    <td><a name="wp1036977"> </a><p class="pCellBody">
DELETE-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036979"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1036981"> </a><p class="pCellBody">
UNLOCK-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036983"> </a><p class="pCellBody">
13
</p>
</td>
    <td><a name="wp1036985"> </a><p class="pCellBody">
REMOVE-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036987"> </a><p class="pCellBody">
14
</p>
</td>
    <td><a name="wp1036989"> </a><p class="pCellBody">
SYNC-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036991"> </a><p class="pCellBody">
15
</p>
</td>
    <td><a name="wp1036993"> </a><p class="pCellBody">
EXECUTE-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036995"> </a><p class="pCellBody">
16
</p>
</td>
    <td><a name="wp1036997"> </a><p class="pCellBody">
BEGIN-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036999"> </a><p class="pCellBody">
17
</p>
</td>
    <td><a name="wp1037001"> </a><p class="pCellBody">
COMMIT-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1037003"> </a><p class="pCellBody">
18
</p>
</td>
    <td><a name="wp1037005"> </a><p class="pCellBody">
ROLLBACK-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1037007"> </a><p class="pCellBody">
19
</p>
</td>
    <td><a name="wp1037009"> </a><p class="pCellBody">
RECOVER-FUNCTION
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1037011"> </a><p class="pCellBody">
21
</p>
</td>
    <td><a name="wp1037013"> </a><p class="pCellBody">
IN-TRANSACTION-FUNCTION 
</p>
</td>
</tr>
</table>
</div>
<p class="pBodyRelative">
</p>
<a name="wp1037015"> </a><p class="pBody">
<b class="cBold">parameters  </b>    Vary depending on the op-code chosen
</p>
<a name="wp1037016"> </a><p class="pBody">
The remaining parameters vary depending on the operation selected.  They provide information and hold results for the operations specified.  All parameters are passed <em class="cEmphasis">by reference</em>.  Parameters may be omitted from those operations that do not require them.  These parameters are detailed in the &quot;Description&quot; below.
</p>
<a name="wp1037017"> </a><h3 class="pHeadingRef">
Description
</h3>
<a name="wp1037018"> </a><p class="pBody">
All parameters passed to I$IO are passed <em class="cEmphasis">by reference</em>.  This applies even to parameters that are integer values in the corresponding file handling routines.  All numeric parameters should be passed to I$IO as SIGNED-SHORT values.  The I$IO routine provides any necessary addressing conversions.  Note that a parameter must be in the correct format for its type.  Parameters that are PIC X must be terminated by a LOW-VALUES character.  
</p>
<a name="wp1037019"> </a><p class="pBody">
Except for the MAKE function, I$IO will automatically terminate any PIC X parameters with a LOW-VALUES byte for you.  Also, you do not have to specify SYNC for level 01 or level 77 parameters because they are automatically synchronized by ACUCOBOL-GT.
</p>
<a name="wp1037020"> </a><p class="pBody">
The file &quot;filesys.def&quot; is a COBOL COPY file that contains many useful definitions for use with I$IO.  It contains definitions for the I$IO codes along with the &quot;F-ERRNO&quot; error values and many useful pre-declared variables that are of the proper type and usage.  
</p>
<a name="wp1063062"> </a><p class="pBody">
The behavior of this routine is affected by the FILENAME_SPACES configuration variable. The value of  FILENAME_SPACES determines whether spaces are allowed in a file name.  See the entry for FILENAME_SPACES in Appendix&#160;H for more information.
</p>
<a name="wp1037022"> </a><p class="pNote">
<hr />
<b>Note:  </b>The runtime configuration variable FILE_PREFIX is ignored by the I$IO routine.
<hr />
</p>
<a name="wp1037023"> </a><h3 class="pHeadingRef">
OP-CODES and PARAMETERS 
</h3>
<a name="wp1037024"> </a><h3 class="pHeadingRef">
OPEN-FUNCTION (op-code 1)
</h3>
<a name="wp1037025"> </a><p class="pBody">
This routine opens an existing indexed file.  If it is successful, the value in RETURN-CODE should be moved to a data item that is USAGE POINTER.  This data item is passed as the open file handle to the other file handling routines.  If it fails, RETURN-CODE is set to a NULL value.  After the file is opened, the primary key is set as the current key of reference and is positioned at the beginning of the file.
</p>
<a name="wp1037026"> </a><p class="pBody">
The OPEN routine has three parameters, <em class="cEmphasis">name</em>, <em class="cEmphasis">mode</em> and <em class="cEmphasis">l_parms</em>.  
</p>
<a name="wp1063102"> </a><p class="pBody">
<span class="cBoldItalic">Name </span>is the name of the file to open.  It must be null-terminated.  
</p>
<a name="wp1063103"> </a><p class="pBody">
<span class="cBoldItalic">Mode </span>is one of the following values (defined in &quot;filesys.def&quot;):
</p>
<a name="wp1063121"> </a><p class="pBodyRelative">
</p><div>
<table border="0" cellpadding="6" cellspacing="1">
  <caption></caption>
  <tr align="left" valign="top">    <td><a name="wp1063106"> </a><p class="pCellBody">
Finput
</p>
</td>
    <td><a name="wp1063108"> </a><p class="pCellBody">
open for input only
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1063110"> </a><p class="pCellBody">
Foutput
</p>
</td>
    <td><a name="wp1063112"> </a><p class="pCellBody">
open for output only
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1063114"> </a><p class="pCellBody">
Fio
</p>
</td>
    <td><a name="wp1063116"> </a><p class="pCellBody">
open for input and output
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1063118"> </a><p class="pCellBody">
Fextend
</p>
</td>
    <td><a name="wp1063120"> </a><p class="pCellBody">
same as Foutput
</p>
</td>
</tr>
</table>
</div>
<p class="pBodyRelative">
</p>
<a name="wp1037047"> </a><p class="pBody">
This routine only opens already existing files.  If the file does not exist, the routine fails, even when opening with mode &quot;Foutput&quot;. 
</p>
<a name="wp1037048"> </a><p class="pBody">
 &quot;Foutput&quot; does <em class="cEmphasis">not</em> delete the current file (this is different from the OPEN OUTPUT verb in COBOL).
</p>
<a name="wp1037049"> </a><p class="pBody">
<em class="cEmphasis">Mode </em>may furthermore have one of the following flags added to it to indicate file locking options (defined in &quot;filesys.def&quot;):
</p>
<a name="wp1037067"> </a><p class="pBodyRelative">
</p><div>
<table border="0" cellpadding="6" cellspacing="1">
  <caption></caption>
  <tr align="left" valign="top">    <td><a name="wp1037052"> </a><p class="pCellBody">
Fread_lock
</p>
</td>
    <td><a name="wp1037054"> </a><p class="pCellBody">
locks file against other updaters
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1037056"> </a><p class="pCellBody">
Fwrite_lock
</p>
</td>
    <td><a name="wp1037058"> </a><p class="pCellBody">
locks file against all others
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1037060"> </a><p class="pCellBody">
Fmass_update
</p>
</td>
    <td><a name="wp1037062"> </a><p class="pCellBody">
same as Fwrite_lock
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1037064"> </a><p class="pCellBody">
Ftrans
</p>
</td>
    <td><a name="wp1037066"> </a><p class="pCellBody">
extended locking rules for transaction management
</p>
</td>
</tr>
</table>
</div>
<p class="pBodyRelative">
</p>
<a name="wp1037068"> </a><p class="pBody">
Some file systems cannot support the &quot;Fread_lock&quot; option correctly.  For these systems, the setting of the external variable &quot;F_UPGRADE_RLOCK&quot; determines what happens.  If this variable is set to the default, then the &quot;Fread_lock&quot; setting is treated as a normal open (no file locking).  If this variable is non-zero, then the &quot;Fread_lock&quot; setting is treated as &quot;Fwrite_lock&quot; instead.
</p>
<a name="wp1037069"> </a><p class="pBody">
A few file systems do not support any form of file locking.  If locking is requested on one of these file systems, the open proceeds as if file locking were not specified, but the external variable &quot;F-ERRNO&quot; is set to W_NO_SUPPORT.  This is also returned for file systems that cannot support multiple record locks when &quot;Fmulti_lock&quot; is specified.
</p>
<a name="wp1037070"> </a><p class="pBody">
If &quot;Fmass_update&quot; is used, then the file system is also requested to emphasize speed of updates over file security.
</p>
<a name="wp1037071"> </a><p class="pBody">
Additionally, &quot;Fmulti_lock&quot; may be also added to <em class="cEmphasis">mode</em> to request that more than one record lock be maintained in the file by this process.  If this option is not specified, then any I/O operation on the file will first release any currently locked record.  This results in only one record lock being set in the file at any time.  When this option is used, locked records are released only when the file is closed or when the UNLOCK routine is called.
</p>
<a name="wp1037072"> </a><p class="pBody">
<span class="cBoldItalic">L_parms </span>points to a null-terminated string that describes the key structure for the file.  The <em class="cEmphasis">l_parms</em> parameter is the same as the <em class="cEmphasis">l_parms</em> parameter passed when using the MAKE op-code.  This parameter is a string that contains three comma-separated numbers.  These values are (in order): </p><div>
<table border="0" cellpadding="6" cellspacing="1">
  <caption></caption>
  <tr align="left" valign="top">    <td><a name="wp1375858"> </a><p class="pCellBody">
1
</p>
</td>
    <td><a name="wp1375860"> </a><p class="pCellBody">
the maximum record size
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1375862"> </a><p class="pCellBody">
2
</p>
</td>
    <td><a name="wp1375864"> </a><p class="pCellBody">
the minimum record size
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1375866"> </a><p class="pCellBody">
3
</p>
</td>
    <td><a name="wp1375868"> </a><p class="pCellBody">
the number of keys for the file.  
</p>
</td>
</tr>
</table>
</div>
<p class="pBody">
</p>
<a name="wp1037076"> </a><p class="pBody">
If the maximum record size does not match the minimum record size, then variable sized records are implied.  This parameter is not used by all file systems, but is supplied for those file systems that cannot determine these values on their own.
</p>
<a name="wp1037077"> </a><p class="pNote">
<hr />
<b>Note:  </b>The <em class="cEmphasis">l_parms</em> parameter is always required, but it is ignored by the default file systems shipped with ACUCOBOL-GT (RMS for VAX/VMS machines and Vision for all others).  It is required by other file systems, however, including Btrieve and C-ISAM.  If you ever intend on using any of these file systems, you should ensure that the values passed in <em class="cEmphasis">l_params</em> are correct.
<hr />
</p>
<a name="wp1037078"> </a><h3 class="pHeadingRef">
CLOSE-FUNCTION (op-code 2)
</h3>
<a name="wp1037079"> </a><p class="pBody">
This routine closes an open file.  It also removes currently held locks on the file.  The CLOSE routine has only one parameter, <em class="cEmphasis">f</em>, a file handle returned by OPEN.  For some file systems, it is possible that CLOSE will write additional records that had been previously buffered by the system.  For this reason, it is possible that a &quot;disk full&quot; condition can occur. 
</p>
<a name="wp1037080"> </a><h3 class="pHeadingRef">
MAKE-FUNCTION (op-code 3)
</h3>
<a name="wp1037081"> </a><p class="pBody">
This routine is used to create a new indexed file.  It will overwrite any existing file.  This routine will not overwrite a file that is currently in use.  If the file is in use, the error E_FILE_LOCKED will be returned.  The MAKE routine has six parameters, <em class="cEmphasis">name</em>, <em class="cEmphasis">comment</em>, <em class="cEmphasis">p_parms</em>, <em class="cEmphasis">l_parms</em>, <em class="cEmphasis">keys</em> and <em class="cEmphasis">trans</em>.  
</p>
<a name="wp1037082"> </a><p class="pBody">
This routine does not automatically terminate its parameters with LOW-VALUES, you must insure that the parameters are correctly terminated yourself.  If you do not wish to supply an alternate collating sequence in the &quot;trans&quot; parameter to MAKE, then simply omit the parameter.  The I$IO routine does not allow you to specify a &quot;NULL&quot; parameter which is what is expected by the MAKE routine.  Instead, by omitting the parameter, the I$IO routine will construct a &quot;NULL&quot; parameter for you.
</p>
<a name="wp1037083"> </a><p class="pBody">
The host file system may ignore any or all of the values specified by <em class="cEmphasis">comment</em>, <em class="cEmphasis">p_parms</em> and <em class="cEmphasis">trans</em>.  If the host system cannot perform the requested operation, it is ignored (however, if the <em class="cEmphasis">trans</em> value is ignored, &quot;F-ERRNO&quot; is set to W_NO_SUPPORT).  If the host system cannot support one of the values specified in <em class="cEmphasis">l_parms</em> or <em class="cEmphasis">keys</em>, then MAKE fails and RETURN-CODE is set to the error condition E_NO_SUPPORT.  If any of the parameters are ill-formed or contain values outside of the legal range of values, E_PARAM_ERR is returned.
</p>
<a name="wp1037084"> </a><p class="pBody">
<span class="cBoldItalic">Name </span>points to the name of the file.  This must be null-terminated.
</p>
<a name="wp1037085"> </a><p class="pBody">
<span class="cBoldItalic">Comment </span>may be NULL or may point to comment string that describes the file.  This comment is stored in the file, but has no other functional use.  The comment may be up to 30 characters long and must be null-terminated.  Many host file systems cannot store comments.  On these systems, this parameter is ignored.
</p>
<a name="wp1037086"> </a><p class="pBody">
<span class="cBoldItalic">P_parms </span>points to a string that describes various physical characteristics of the file.  This string consists of five numeric fields separated by commas and must be null-terminated.  Each of these fields advises the file system of desired treatment for the physical storage of the file.  Individual file systems may ignore some or all of these fields.  Furthermore, <em class="cEmphasis">p_parms</em> may be NULL to imply &quot;0&quot; for each of the fields.  
</p>
<a name="wp1037087"> </a><p class="pBody">
The &quot;filesys.def&quot; COPY file has a data item containing these fields.
</p>
<a name="wp1037088"> </a><p class="pBody">
The fields are as follows:
</p>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1037089"> </a><div class="pSmartList1"><li>Blocking factor.  This value is the number of disk sectors to store in a single file block.  It may be zero to request the default blocking factor for the file system.</li></div>
<a name="wp1037090"> </a><div class="pSmartList1"><li>Pre-allocate amount.  This is the number of file blocks (the size of which depends on the blocking factor above) to initially allocate to the file.  The purpose of this is to allocate contiguous disk space for the file.  It does not limit the file's total size.  This value may be zero to request the default initial allocation amount.</li></div>
<a name="wp1037091"> </a><div class="pSmartList1"><li>Extension factor.  This is the number of file blocks to add to the file when it needs to grow.  The purpose of this is to help reduce disk fragmentation.  This value may be set to zero to request the default extension amount.</li></div>
<a name="wp1037092"> </a><div class="pSmartList1"><li>Compression factor.  This is a value between zero and 100.  It represents the amount of file compression desired.  A value of zero indicates no compression and a value of 100 indicates maximum compression.  Values in between indicate varying degrees of compression.  The exact meaning of this depends on the host file system.</li></div>
<a name="wp1037093"> </a><div class="pSmartList1"><li>Encryption flag.  If this value is &quot;1&quot;, then encryption is desired for the disk file.  If it is zero, then no encryption is desired.  The results of encryption depend on the host file system.  Since no key is supplied, the results of encryption are usually only moderately secure.</li></div>
</ol></div>
<a name="wp1037094"> </a><p class="pBody">
<span class="cBoldItalic">l_parms </span>points to a string that describes various logical characteristics of the file.  The string consists of three numeric fields separated by commas.  The string must be null-terminated.  
</p>
<a name="wp1037095"> </a><p class="pBody">
The &quot;filesys.def&quot; COPY file has a data item containing these fields.
</p>
<a name="wp1037096"> </a><p class="pBody">
The fields are as follows:
</p>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1037097"> </a><div class="pSmartList1"><li>Maximum record size.  This is the size of the largest record to be placed in the file.  For Vision 5 files, this may range from 1 to 67,108,864.  For Vision 2, 3, and 4 files, this may range from 1 to 32,767.</li></div>
<a name="wp1037098"> </a><div class="pSmartList1"><li>Minimum record size.  This is the size of the smallest record to be placed in the file.  This may range from 1 to the maximum record size.  If this field is the same as the maximum record size, then fixed-length records are implied.</li></div>
<a name="wp1037099"> </a><div class="pSmartList1"><li>Number of keys.  This is the number of keys in the file, including the primary key.  This may range from 1 to MAX_KEYS.</li></div>
</ol></div>
<a name="wp1037100"> </a><p class="pBody">
<span class="cBoldItalic">keys</span> -- points to a null-terminated string that describes the key structure for the file.  <em class="cEmphasis">keys</em> is a string of numbers separated by commas.  The first key described is the primary key.  It may not allow duplicate values.  The primary key is called key &quot;0&quot;.  The next key described is key &quot;1&quot; and so on.  There should be as many keys described as the &quot;number of keys&quot; field of <em class="cEmphasis">l_parms</em> indicates.  
</p>
<a name="wp1037101"> </a><p class="pBody">
The &quot;filesys.def&quot; COPY file has a data item containing these fields.
</p>
<a name="wp1037102"> </a><p class="pBody">
Each key description contains the following information:
</p>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1037103"> </a><div class="pSmartList1"><li>Number of segments.  This is the number of segments in this key.  A segment is a contiguous region of bytes in the record.  You may describe a split key by specifying more than one segment.  With Vision Version 3 files, this may range from 1 to V3_MAX_SEGS.  With Vision Version 4 and 5 files, this may range from 1 to MAX_SEGS.</li></div>
<a name="wp1037104"> </a><div class="pSmartList1"><li>Duplicates flag.  If this value is &quot;1&quot;, then duplicate keys are allowed.  If &quot;0&quot;, then duplicate values are not allowed.  This must be &quot;0&quot; for the primary key.</li></div>
<a name="wp1037105"> </a><div class="pSmartList1"><li>Segment size.  This is the number of bytes in the first segment.  This may be between 1 and MAX_KEY_SIZE.</li></div>
<a name="wp1037106"> </a><div class="pSmartList1"><li>Segment offset.  This is the offset from the beginning of the record to the first byte of the segment.  A segment that starts at the beginning of the record has an offset of &quot;0&quot;.</li></div>
<a name="wp1037107"> </a><div class="pSmartList1"><li>Remaining segments.  The segment size and segment offset fields are repeated for each additional segment in the key.  The sum of the segment sizes may not exceed MAX_KEY_SIZE.</li></div>
</ol></div>
<a name="wp1037108"> </a><p class="pBody">
For example, a file with two keys, the first one having two segments (offset zero, length 10 and offset 50, length 5) and the second one with one segment (offset 20, length 15) and allowing duplicates would be written:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
2,0,10,0,5,50,1,1,15,20<a name="wp1037109"> </a>
</pre></div>
<a name="wp1037110"> </a><p class="pBody">
<span class="cBoldItalic">trans </span>-- This parameter specifies an alternate collating sequence for the keys.  If this parameter is NULL, then keys are ordered in ascending sequence based on their native unsigned value.  If <em class="cEmphasis">trans</em> is not NULL, it must point to a 256 byte region of memory.  Unlike other strings, this need not be null-terminated and is likely to contain nulls within it.  This 256 byte region is used as a translation table on the bytes of each key to arrive at a new key-ordering.  Each byte is used as an index into this table, and the resulting value is used to order the keys.  Some host file systems cannot do key translations.  On these systems, this parameter is ignored.
</p>
<a name="wp1037111"> </a><h3 class="pHeadingRef">
INFO-FUNCTION (op-code 4)
</h3>
<a name="wp1037112"> </a><p class="pBody">
This routine returns a variety of information about the open indexed file <em class="cEmphasis">f</em>, depending on the value of <em class="cEmphasis">mode</em>.  The information is returned in the area pointed to by <em class="cEmphasis">result</em>.  Most of the <em class="cEmphasis">modes</em> return one or more numeric values.  These values are represented in <em class="cEmphasis">result</em> as fixed size fields with the numbers represented as strings.  When more than one value is returned in <em class="cEmphasis">result</em>, the values are separated by commas.
</p>
<a name="wp1037113"> </a><p class="pBody">
The &quot;filesys.def&quot; COPY file contains layouts for each kind of information that can be retrieved with this routine.
</p>
<a name="wp1037114"> </a><p class="pBody">
The INFO routine has three parameters, <em class="cEmphasis">f</em>, <em class="cEmphasis">mode</em>, and <em class="cEmphasis">result</em>.  
</p>
<a name="wp1037115"> </a><p class="pBody">
<span class="cBoldItalic">F</span> is a file handle returned by OPEN.
</p>
<a name="wp1037116"> </a><p class="pBody">
<span class="cBoldItalic">Mode </span>determines what <span class="cBoldItalic">result</span> is returned with a series of comma-separated numbers that define the format of <em class="cEmphasis">result</em>.  (Note that in the following descriptions, the first value is number &quot;1&quot;, the second is number &quot;2&quot; and so on.  The number of times the field number is repeated represents the size of the field.  For example &quot;111,22&quot; indicates that two values are returned, the first one is three digits long and the second one is two digits long.)
</p>
<a name="wp1037117"> </a><p class="pBody">
When a particular <em class="cEmphasis">mode</em> cannot be determined by the file system, then the error value E_NO_SUPPORT is set.  If a particular value of mode &quot;-1&quot; or mode &quot;-2&quot; cannot be determined, it is set to zero.
</p>
<a name="wp1037118"> </a><p class="pBody">
The following <em class="cEmphasis">modes</em> are supported:
</p>
<a name="wp1063248"> </a><p class="pBodyRelative">
</p><div>
<table border="0" cellpadding="6" cellspacing="1">
  <caption></caption>
  <tr align="left" valign="top">    <td><a name="wp1063264"> </a><p class="pCellBody">
<b class="cBold">-1</b>
</p>
</td>
    <td><a name="wp1063266"> </a><p class="pCellBody">
This returns the same information as the <em class="cEmphasis">l_parms</em> parameter of the MAKE function.  <em class="cEmphasis">Result</em> is in the format of &quot;11111,22222,333&quot; where:
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1063268"> </a>
</pre></div>
</td>
    <td><a name="wp1063270"> </a><p class="pCellBody">
1 = maximum record size
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1063272"> </a>
</pre></div>
</td>
    <td><a name="wp1063274"> </a><p class="pCellBody">
2 = minimum record size
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1063276"> </a>
</pre></div>
</td>
    <td><a name="wp1063278"> </a><p class="pCellBody">
3 = number of keys
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1063280"> </a><p class="pCellBody">
<b class="cBold">-2</b>
</p>
</td>
    <td><a name="wp1063282"> </a><p class="pCellBody">
Returns the same information as the <em class="cEmphasis">p_parms</em> parameter of the MAKE function.  <em class="cEmphasis">Result</em> is in the format of &quot;11,22222,33,444,5&quot; where:
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1063284"> </a>
</pre></div>
</td>
    <td><a name="wp1063286"> </a><p class="pCellBody">
1 = blocking factor
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1063288"> </a>
</pre></div>
</td>
    <td><a name="wp1063290"> </a><p class="pCellBody">
2 = pre-allocation amount
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1063292"> </a>
</pre></div>
</td>
    <td><a name="wp1063294"> </a><p class="pCellBody">
3 = extension factor
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1063296"> </a>
</pre></div>
</td>
    <td><a name="wp1063298"> </a><p class="pCellBody">
4 = compression factor
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1063300"> </a>
</pre></div>
</td>
    <td><a name="wp1063302"> </a><p class="pCellBody">
5 = encrypted flag
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1063304"> </a><p class="pCellBody">
<b class="cBold">-3</b>
</p>
</td>
    <td><a name="wp1063306"> </a><p class="pCellBody">
Returns the comment specified to the MAKE function that made the file.  The format is a null-terminated string of up to thirty characters.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1063308"> </a><p class="pCellBody">
<b class="cBold">-4</b>
</p>
</td>
    <td><a name="wp1063310"> </a><p class="pCellBody">
Returns the number of records in the file.  This is returned as a 10-digit number.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1063312"> </a><p class="pCellBody">
<b class="cBold">-5</b>
</p>
</td>
    <td><a name="wp1063314"> </a><p class="pCellBody">
Returns the 256-byte key translation table specified to MAKE when the file was originally made.  If no key translation table was specified, then the E_NO_SUPPORT error is set.  In this case, this should be simply taken to mean that the native key ordering was used.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1063316"> </a><p class="pCellBody">
<b class="cBold">-6</b>
</p>
</td>
    <td><a name="wp1063318"> </a><p class="pCellBody">
Returns the number of currently locked records for the file handle passed to I$IO.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1063320"> </a><p class="pCellBody">
<b class="cBold">-7</b>
</p>
</td>
    <td><a name="wp1063322"> </a><p class="pCellBody">
For Vision Version 4 and 5 files, returns the number of data and index  segments in the form: &quot;11111,22222&quot; where  
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1063324"> </a>
</pre></div>
</td>
    <td><a name="wp1063326"> </a><p class="pCellBody">
1 = number of data segments
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1063328"> </a>
</pre></div>
</td>
    <td><a name="wp1063330"> </a><p class="pCellBody">
2 = number of index segments
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1063332"> </a>
</pre></div>
</td>
    <td><a name="wp1063334"> </a><p class="pCellBody">
For Vision Version 2 and 3 files, this mode always returns &quot;00000,00000&quot;.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1063336"> </a><p class="pCellBody">
<b class="cBold">-8</b>
</p>
</td>
    <td><a name="wp1063338"> </a><p class="pCellBody">
Returns the name and size of a Vision Version 4 or 5 file segment. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1063340"> </a>
</pre></div>
</td>
    <td><a name="wp1063342"> </a><p class="pCellBody">
This mode is different from the other modes in that it uses the third argument as both INPUT and OUTPUT.  Set FS-TYPE to FS-DATA (255) or FS-INDEX&#160;(254) and FILE-SEGMENT-NUMBER to the number of the segment you want information about.  Upon return, name will contain the filename of the segment and FS-SIZE will contain the size of the segment.  The FILE-SEGMENT-INFO data item in filesys.def describes this structure.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1063344"> </a>
</pre></div>
</td>
    <td><a name="wp1063346"> </a><p class="pCellBody">
This operation can be called with a Vision Version 2 or 3 file, also.  In this case, type is ignored, but seg must be 1.  The name and size returned will be those of the single Version 2 or 3 file.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1063348"> </a><p class="pCellBody">
<b class="cBold">-9</b>
</p>
</td>
    <td><a name="wp1063350"> </a><p class="pCellBody">
Returns the sum of the sizes of all the segments that make up a Vision Version 4 or 5 file.  The return value is 15 digits long.  If called with a Vision Version 2 or 3 file, this operation returns the size of the single Version 2 or 3 file. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1063352"> </a><p class="pCellBody">
<b class="cBold">-10</b>
</p>
</td>
    <td><a name="wp1063354"> </a><p class="pCellBody">
Returns the version number of the Vision file in a three character string.  For example, if the file is Vision Version 5, &quot;005&quot; is returned.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1063356"> </a><p class="pCellBody">
<b class="cBold">0+</b>
</p>
</td>
    <td><a name="wp1063358"> </a><p class="pCellBody">
A <em class="cEmphasis">mode</em> of zero or greater indicates that information about a particular key is desired.  That key information is returned as &quot;11,2,333,44444&quot; where
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1063360"> </a>
</pre></div>
</td>
    <td><a name="wp1063362"> </a><p class="pCellBody">
1 = number of segments in key
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1063364"> </a>
</pre></div>
</td>
    <td><a name="wp1063366"> </a><p class="pCellBody">
2 = &quot;1&quot; if duplicates are allowed
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1063368"> </a>
</pre></div>
</td>
    <td><a name="wp1063370"> </a><p class="pCellBody">
3 = size of first segment
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1063372"> </a>
</pre></div>
</td>
    <td><a name="wp1063374"> </a><p class="pCellBody">
4 = byte offset of first segment
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><div class="pPreformatted"><pre class="pPreformatted">
    <a name="wp1063376"> </a>
</pre></div>
</td>
    <td><a name="wp1063378"> </a><p class="pCellBody">
The third and fourth fields are repeated for each additional segment in the key.
</p>
</td>
</tr>
</table>
</div>
<p class="pBodyRelative">
</p>
<a name="wp1037148"> </a><p class="pNote">
<hr />
<b>Note:  </b>Versions of INFO prior to the version used by the 3.2 runtime returned only one digit for the number of segments in the key.
<hr />
</p>
<a name="wp1037149"> </a><h3 class="pHeadingRef">
READ-FUNCTION (op-code 5)
</h3>
<a name="wp1037150"> </a><p class="pBody">
This routine reads a record out of an indexed file.  The READ routine has three parameters, <em class="cEmphasis">f</em>, <em class="cEmphasis">record</em>, and <em class="cEmphasis">keynum</em>.  
</p>
<a name="wp1037151"> </a><p class="pBody">
<span class="cBoldItalic">F </span>must be a valid file handle returned by OPEN.  
</p>
<a name="wp1037152"> </a><p class="pBody">
<span class="cBoldItalic">Record </span>points to the area to hold the record read.  
</p>
<a name="wp1037153"> </a><p class="pBody">
<span class="cBoldItalic">Keynum</span> is the key number to read from.  Key &quot;0&quot; is the primary key, key &quot;1&quot; is the first alternate and so on.  The bytes in <em class="cEmphasis">record</em> corresponding to the key <em class="cEmphasis">keynum</em> must contain the key value of the record to be read.  If this routine succeeds, RETURN-CODE is set to the size of the record read.  RETURN-CODE is set to zero on failure.
</p>
<a name="wp1037154"> </a><p class="pBody">
Records read by a file open for input only are not locked.  Furthermore, most file systems do not block the reading of locked records by a file open for input (Note that this feature depends on the host file system - not all can support it).  Records read from a file open for I/O are automatically locked unless the external variable &quot;f-no-lock&quot; is set to a non-zero value first in which case they are treated in the same manner as files open for input.
</p>
<a name="wp1037155"> </a><p class="pBody">
If the key <em class="cEmphasis">keynum</em> allows duplicates and the next record in the file contains the same key value as the record read, the variable &quot;F-ERRNO&quot; is set to W-DUP-OK.  This feature is not supported by many host file systems.
</p>
<a name="wp1037156"> </a><p class="pBody">
A successful READ causes the current key of reference to be set to <em class="cEmphasis">keynum</em> and the file position is set to the record read.  This is used by the NEXT and PREVIOUS routines.  If READ is unsuccessful, then the current key of reference is set to an undefined state.
</p>
<a name="wp1037157"> </a><h3 class="pHeadingRef">
NEXT-FUNCTION (op-code 6)
</h3>
<a name="wp1037158"> </a><p class="pBody">
This routine reads the next record in the sequence of records specified by the current key of reference.  When a file is first opened, its key of reference is the primary key and the file is positioned so that the NEXT record is the first record in the file.  The READ and START routines can change the current key of reference.  The NEXT routine has two parameters, <em class="cEmphasis">f</em>, and <em class="cEmphasis">record</em>.  <em class="cEmphasis">F</em> must be a valid file handle returned by OPEN.  <em class="cEmphasis">Record</em> points to the area to hold the record read.  
</p>
<a name="wp1037159"> </a><p class="pBody">
If this routine succeeds, RETURN-CODE is set to the size of the record read.  If it fails, RETURN-CODE is set to zero and sets the current key of reference to the &quot;undefined&quot; state.  However, if it fails due to the record being locked, the current key of reference is unchanged and the file pointer is set to the locked record (some file systems do not support this rule).  Also, if it fails because it reached the end of the file, then the current key of reference is left unchanged and the file pointer is positioned so that a call to PREVIOUS returns the last record in the file.
</p>
<a name="wp1037160"> </a><p class="pBody">
The NEXT routine follows the same record locking rules as the READ routine.  
</p>
<a name="wp1037161"> </a><p class="pBody">
If the record following the one read contains the same key value (in the current key of reference), then &quot;F-ERRNO&quot; is set to W-DUP-OK.
</p>
<a name="wp1037162"> </a><h3 class="pHeadingRef">
PREVIOUS-FUNCTION (op-code 7)
</h3>
<a name="wp1037163"> </a><p class="pBody">
This routine behaves just like the NEXT routine with two exceptions.  The first is that RETURN-CODE is set to the preceding record in the file instead of the next one.  The second is that it never sets the W_DUP_OK error value.  The PREVIOUS routine has two parameters, <em class="cEmphasis">f</em>, and <em class="cEmphasis">record</em>.  <em class="cEmphasis">F</em> must be a valid file handle returned by OPEN.  <em class="cEmphasis">Record</em> points to the area to hold the record read.  
</p>
<a name="wp1372642"> </a><p class="pBody">
Some file systems do not support the ability to read a file backwards.  For these systems, this routine sets the error value E_NO_SUPPORT.
</p>
<a name="wp1372643"> </a><p class="pBody">
This routine treats the beginning of the file in a manner that is analogous to the way NEXT treats the end of the file.  If an PREVIOUS call reaches the beginning of the file, a call to NEXT returns the first record of the file.
</p>
<a name="wp1037166"> </a><h3 class="pHeadingRef">
START-FUNCTION (op-code 8)
</h3>
<a name="wp1037167"> </a><p class="pBody">
This routine selects the current key of reference and positions the file pointer for the next NEXT or PREVIOUS routine.  The START routine has five parameters, <em class="cEmphasis">f</em>, <em class="cEmphasis">record</em>, <em class="cEmphasis">keynum</em>, <em class="cEmphasis">keysize</em> and <em class="cEmphasis">mode</em>.  
</p>
<a name="wp1037168"> </a><p class="pBody">
<span class="cBoldItalic">F </span>must be a valid file handle returned by OPEN.  
</p>
<a name="wp1037169"> </a><p class="pBody">
<span class="cBoldItalic">Record </span>points to the area to hold the record read.  
</p>
<a name="wp1037170"> </a><p class="pBody">
<span class="cBoldItalic">Keynum </span>selects which key to use.  The corresponding key area in <em class="cEmphasis">record</em> must contain the key value that will be used to position the file.  
</p>
<a name="wp1037171"> </a><p class="pBody">
<span class="cBoldItalic">Keysize </span>indicates the size of the key.  If <em class="cEmphasis">keysize</em> is zero, the entire key is used.  Otherwise, only the first <em class="cEmphasis">keysize</em> bytes of the key will be used.  
</p>
<a name="wp1037172"> </a><p class="pBody">
<span class="cBoldItalic">Mode </span>selects how the file is to be positioned with respect to the key value defined in <em class="cEmphasis">record</em>.  It can be one of the following values:
</p>
<a name="wp1063903"> </a><p class="pBodyRelative">
</p><div>
<table border="0" cellpadding="6" cellspacing="1">
  <caption></caption>
  <tr align="left" valign="top">    <td><a name="wp1063909"> </a><p class="pCellBody">
F_EQUALS 
</p>
</td>
    <td><a name="wp1063911"> </a><p class="pCellBody">
The file is positioned at the record that matches the key value
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1063913"> </a><p class="pCellBody">
F_NOT_LESS
</p>
</td>
    <td><a name="wp1063915"> </a><p class="pCellBody">
The file is positioned at the record that matches the key value, or the next greater one if no one matches
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1063917"> </a><p class="pCellBody">
F_GREATER
</p>
</td>
    <td><a name="wp1063919"> </a><p class="pCellBody">
The file is positioned at the first record greater than the key value specified
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1063921"> </a><p class="pCellBody">
F_LESS
</p>
</td>
    <td><a name="wp1063923"> </a><p class="pCellBody">
The file is positioned at the last record smaller than the key value specified
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1063925"> </a><p class="pCellBody">
F_NOT_GREATER
</p>
</td>
    <td><a name="wp1063927"> </a><p class="pCellBody">
The file is positioned at the record that matches the key value, or the last record smaller than the key value if no one matches
</p>
</td>
</tr>
</table>
</div>
<p class="pBodyRelative">
</p>
<a name="wp1037178"> </a><p class="pBody">
The F_EQUALS mode is usually used to test for the existence of a record or to position a file when the key value is known.  The F_NOT_LESS and F_GREATER modes are used to position the file for a series of NEXT calls and the F_LESS and F_NOT_GREATER modes are used to prepare for a series of PREVIOUS calls.
</p>
<a name="wp1037179"> </a><p class="pBody">
After a successful START, the current key of reference will set to <em class="cEmphasis">keynum</em>.  The next NEXT or PREVIOUS call will return the record selected by the START routine.  Note that in this case, NEXT and PREVIOUS both return the same record.
</p>
<a name="wp1037180"> </a><p class="pBody">
If the START routine fails, then the current key of reference is placed in the &quot;undefined&quot; state.
</p>
<a name="wp1037181"> </a><p class="pBody">
Some file systems cannot perform the F_LESS or F_NOT_GREATER modes.  On these file systems, specifying these modes causes START to return an error and set the E_NO_SUPPORT condition.
</p>
<a name="wp1037182"> </a><h3 class="pHeadingRef">
WRITE-FUNCTION (op-code 9)
</h3>
<a name="wp1037183"> </a><p class="pBody">
This routine adds a new record to the passed file.  The WRITE routine has three parameters, <em class="cEmphasis">f</em>, <em class="cEmphasis">record</em>, and <em class="cEmphasis">size</em>.  
</p>
<a name="wp1037184"> </a><p class="pBody">
<span class="cBoldItalic">F </span>must be a valid file handle returned by OPEN.  
</p>
<a name="wp1037185"> </a><p class="pBody">
<span class="cBoldItalic">Record </span>points to the record to add.
</p>
<a name="wp1037186"> </a><p class="pBody">
<span class="cBoldItalic">Size</span> is the size of the record.  If <em class="cEmphasis">size</em> is zero, then the maximum record size for the file is used.
</p>
<a name="wp1037187"> </a><p class="pBody">
If the file has keys that allow duplicate values, and one or more of those keys in <em class="cEmphasis">record</em> match keys that already exist in the file, then &quot;F-ERRNO&quot; is set to W-DUP-OK.  Several file systems cannot detect this condition and in this case, &quot;F-ERRNO&quot; is set to zero instead.
</p>
<a name="wp1037188"> </a><p class="pBody">
For keys that allow duplicates, the new record is added such that its keys are placed at the end of the sequence of those keys with the same value.  Many file systems do not support this rule, in which case the ordering is defined by the file system.
</p>
<a name="wp1037189"> </a><p class="pBody">
The WRITE routine does not change the current file position or affect the current key of reference.
</p>
<a name="wp1037190"> </a><h3 class="pHeadingRef">
REWRITE-FUNCTION (op-code 10)
</h3>
<a name="wp1037191"> </a><p class="pBody">
This routine replaces an existing record in the file.  The REWRITE routine has three parameters, <em class="cEmphasis">f</em>, <em class="cEmphasis">record</em>, and <em class="cEmphasis">size</em>.  
</p>
<a name="wp1037192"> </a><p class="pBody">
<span class="cBoldItalic">F</span> must be a valid file handle returned by OPEN.  
</p>
<a name="wp1037193"> </a><p class="pBody">
<span class="cBoldItalic">Record </span>points to the new record to place in the file.   
</p>
<a name="wp1037194"> </a><p class="pBody">
<span class="cBoldItalic">Size </span>may be zero to indicate the maximum record size for the file.  The record replaced is specified by the primary key value found in <em class="cEmphasis">record</em>.  The size of the new record need not match the size of the existing record.
</p>
<a name="wp1037195"> </a><p class="pBody">
For keys that are unchanged between the new record and the old record, the ordering of those keys is unchanged.  For keys that have changed, the new keys are placed at the end of the sequence of keys that have the same value.  If any of the changed keys match keys that already exist in the file (and these keys allow duplicates), then &quot;F-ERRNO&quot; is set to W-DUP-OK.  Note that these rules depend on the host system and may be different for some file systems.
</p>
<a name="wp1037196"> </a><p class="pBody">
The REWRITE routine does not affect the file position or the current key of reference.
</p>
<a name="wp1037197"> </a><h3 class="pHeadingRef">
DELETE-FUNCTION (op-code 11)
</h3>
<a name="wp1037198"> </a><p class="pBody">
This routine deletes the record identified by the value found in the primary key area of <em class="cEmphasis">record</em>.  It does not affect the current file position or key of reference.  The DELETE routine has two parameters, <em class="cEmphasis">f</em>, and <em class="cEmphasis">record</em>.  <em class="cEmphasis">F</em> must be a valid file handle returned by OPEN.  <em class="cEmphasis">Record</em> points to the area to hold the record read.  
</p>
<a name="wp1037199"> </a><h3 class="pHeadingRef">
UNLOCK-FUNCTION (op-code 12)
</h3>
<a name="wp1037200"> </a><p class="pBody">
This routine unlocks any locked records held by the current process in the passed file.  It is not an error to call this routine when there are no locked records.  This routine does not affect the current file position or key of reference.  This routine will not unlock any records if it is called during a transaction.  &quot;Commit&quot;<span style="font-family: Arial, Verdana, Helvetica, sans-serif"> </span>(see below) should be used instead.  The &quot;unlock &quot; routine has only one parameter, <em class="cEmphasis">f</em>.  <em class="cEmphasis">F</em> must be a valid file handle returned by OPEN.  
</p>
<a name="wp1037201"> </a><h3 class="pHeadingRef">
REMOVE-FUNCTION (op-code 13)
</h3>
<a name="wp1037202"> </a><p class="pBody">
This routine should remove from disk the indexed file indicated by <em class="cEmphasis">name</em>.  This routine is specialized for indexed files because some host systems implement indexed files in more than one physical file.  This routine should be called only when the file to be removed is closed. It has only one parameter, <em class="cEmphasis">name</em>.  <em class="cEmphasis">Name</em> points to the name of the file.  It must be NULL terminated.
</p>
<a name="wp1037203"> </a><h3 class="pHeadingRef">
SYNC-FUNCTION (op-code 14)
</h3>
<a name="wp1037204"> </a><p class="pBody">
This routine causes all file buffers to be flushed to disk.  The SYNC routine has only one parameter, <em class="cEmphasis">all_files</em>, which is a bit field.  If 
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
<em class="cEmphasis">(all_files</em> &amp; FA-MASS-UPDATE) <a name="wp1037205"> </a>
</pre></div>
<a name="wp1037206"> </a><p class="pBody">
is non-zero, then MASS-UPDATE files should be synced.  If 
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
(<em class="cEmphasis">all_files</em> &amp; FA-REMOTE) <a name="wp1037207"> </a>
</pre></div>
<a name="wp1037208"> </a><p class="pBody">
is non-zero, then remote files should be synced.
</p>
<a name="wp1037209"> </a><p class="pBody">
The constants FA-MASS-UPDATE and FA-REMOTE are defined in &quot;filesys.def&quot;.
</p>
<a name="wp1037210"> </a><p class="pBody">
The exact effect of this routine depends on the host file system.  It is entirely possible that this routine will do nothing under a particular system.  Because of the highly host-dependent nature of this routine, no error reporting is done.
</p>
<a name="wp1037211"> </a><h3 class="pHeadingRef">
EXECUTE-FUNCTION (op-code 15)
</h3>
<a name="wp1037212"> </a><p class="pBody">
This routine executes a file-system specific command.  The EXECUTE routine has two parameters, <em class="cEmphasis">system</em>, and <em class="cEmphasis">command</em>.  
</p>
<a name="wp1037213"> </a><p class="pBody">
<span class="cBoldItalic">System </span>points to the name of the file system (e.g. &quot;vision&quot;, &quot;btrieve&quot;, etc.).  
</p>
<a name="wp1037214"> </a><p class="pBody">
<span class="cBoldItalic">Command </span>contains a command to be executed by that file system.  The list of available commands is completely file-system specific.  Many file systems do not have any commands that can be executed in this manner.  The routine returns 0 if successful, otherwise, RETURN-CODE is set to a file-system specific error value.  For file systems that do not support any commands, &quot;-1&quot; is always returned.
</p>
<a name="wp1037215"> </a><p class="pNote">
<hr />
<b>Note:  </b>Different file systems process this routine differently.  For example, the interface for Microsoft SQL Server has some unique parameters.  See the documentation for the specific file system interface for exceptions to this operation.
<hr />
</p>
<a name="wp1037216"> </a><h3 class="pHeadingRef">
BEGIN-FUNCTION (op-code 16)
</h3>
<a name="wp1037217"> </a><p class="pBody">
The BEGIN routine initiates a transaction.  On indexed file systems this usually opens the log file for appending the first time it is called (if the log file doesn't exist, it is created).  This routine has no parameters.
</p>
<a name="wp1037218"> </a><h3 class="pHeadingRef">
COMMIT-FUNCTION (op-code 17)
</h3>
<a name="wp1409819"> </a><p class="pBody">
This routine commits all changes and releases all locks.  It also ends a transaction.  This routine has no parameters.  
</p>
<a name="wp1054790"> </a><h3 class="pHeadingRef">
ROLLBACK-FUNCTION (op-code 18)
</h3>
<a name="wp1054791"> </a><p class="pBody">
This routine rolls back all files affected to the state that they were in after the last completed transaction.  This routine has no parameters.
</p>
<a name="wp1037226"> </a><h3 class="pHeadingRef">
RECOVER-FUNCTION (op-code 19)
</h3>
<a name="wp1037227"> </a><p class="pBody">
This routine rolls forward all files affected to the state that they were in after the last completed transaction.  This routine has no parameters.
</p>
<a name="wp1037228"> </a><h3 class="pHeadingRef">
IN-TRANSACTION-FUNCTION (op-code 21)
</h3>
<a name="wp1037229"> </a><p class="pBody">
This routine returns a value indicating whether or not the program is currently in an unfinished transaction.   The return value is &quot;1&quot; if there is current and unfinished transaction, &quot;0&quot; otherwise.  This routine has no parameters.
</p>
<a name="wp1037230"> </a><h3 class="pHeadingRef">
Example
</h3>
<a name="wp1037231"> </a><p class="pBody">
The following program opens a file, determines the number of records in the file, and then reads each of those records, printing out the size of each record found.  
</p>
<a name="wp1037232"> </a><p class="pBody">
This example makes heavy use of variables found in &quot;filesys.def&quot;.
</p>
<div class="pPreformatted"><pre class="pPreformatted">
IDENTIFICATION DIVISION.<a name="wp1037233"> </a>
PROGRAM-ID.  EXAMPLE.<a name="wp1037234"> </a>
<a name="wp1037235"> </a>
DATA DIVISION.<a name="wp1037236"> </a>
<a name="wp1037237"> </a>
WORKING-STORAGE SECTION.<a name="wp1037238"> </a>
<a name="wp1037239"> </a>
* Assume that we already know the maximum record size, minimum<a name="wp1037240"> </a>
* record size and the number of keys in the file.<a name="wp1064654"> </a>
<a name="wp1037242"> </a>
78 MAX-SIZE    VALUE 1000.<a name="wp1037243"> </a>
78 MIN-SIZE    VALUE 100.<a name="wp1037244"> </a>
78 KEY-COUNT   VALUE 1.<a name="wp1037245"> </a>
<a name="wp1037246"> </a>
COPY &quot;filesys.def&quot;.<a name="wp1037247"> </a>
<a name="wp1037248"> </a>
77  FILE-HANDLE               USAGE POINTER.<a name="wp1037249"> </a>
01  RECORD-AREA.<a name="wp1037250"> </a>
    03 OCCURS MAX-SIZE TIMES  PIC X.<a name="wp1037251"> </a>
<a name="wp1037252"> </a>
PROCEDURE DIVISION.<a name="wp1037253"> </a>
MAIN-LOGIC.<a name="wp1037254"> </a>
* Open the file<a name="wp1037255"> </a>
    SET OPEN-FUNCTION TO TRUE.<a name="wp1037256"> </a>
    MOVE MAX-SIZE TO MAX-REC-SIZE.<a name="wp1037257"> </a>
    MOVE MIN-SIZE TO MIN-REC-SIZE.<a name="wp1037258"> </a>
    MOVE KEY-COUNT TO NUM-KEYS.<a name="wp1037259"> </a>
    MOVE Finput TO OPEN-MODE.<a name="wp1037260"> </a>
    CALL &quot;I$IO&quot; USING IO-FUNCTION, &quot;MYFILE&quot;, OPEN-MODE,<a name="wp1037261"> </a>
                LOGICAL-INFO.<a name="wp1064684"> </a>
    IF RETURN-CODE = ZERO<a name="wp1037262"> </a>
        DISPLAY &quot;Could not open file, error code = &quot;, F-ERRNO,<a name="wp1037263"> </a>
                CONVERT<a name="wp1064693"> </a>
        STOP RUN.<a name="wp1037264"> </a>
    MOVE RETURN-CODE TO FILE-HANDLE.<a name="wp1037265"> </a>
* Now get the record count<a name="wp1037266"> </a>
    SET INFO-FUNCTION TO TRUE.<a name="wp1037267"> </a>
    SET GET-RECORD-COUNT TO TRUE.<a name="wp1037268"> </a>
    CALL &quot;I$IO&quot; USING IO-FUNCTION, FILE-HANDLE, INFO-MODE,<a name="wp1037269"> </a>
                RECORD-COUNT-INFO.<a name="wp1037270"> </a>
    IF E-NO-SUPPORT<a name="wp1037271"> </a>
        DISPLAY &quot;File system cannot determine record count&quot;<a name="wp1037272"> </a>
        PERFORM CLOSE-FILE<a name="wp1037273"> </a>
        STOP RUN.<a name="wp1037274"> </a>
* Read each record<a name="wp1037275"> </a>
    SET NEXT-FUNCTION TO TRUE<a name="wp1037276"> </a>
    PERFORM NUMBER-OF-RECORDS TIMES<a name="wp1037277"> </a>
        CALL &quot;I$IO&quot; USING IO-FUNCTION, FILE-HANDLE, RECORD-AREA<a name="wp1037278"> </a>
        IF RETURN-CODE = ZERO<a name="wp1037279"> </a>
        DISPLAY &quot;Error reading record, code = &quot;, F-ERRNO,<a name="wp1037280"> </a>
                 CONVERT<a name="wp1064702"> </a>
        PERFORM CLOSE-FILE<a name="wp1037281"> </a>
        STOP RUN<a name="wp1037282"> </a>
        ELSE<a name="wp1037283"> </a>
        DISPLAY &quot;Record size = &quot;, RETURN-CODE, CONVERT, LEFT<a name="wp1037284"> </a>
        END-IF<a name="wp1037285"> </a>
    END-PERFORM.<a name="wp1037286"> </a>
* All done<a name="wp1037287"> </a>
    PERFORM CLOSE-FILE.<a name="wp1037288"> </a>
    STOP RUN.<a name="wp1037289"> </a>
<a name="wp1037290"> </a>
CLOSE-FILE.<a name="wp1037291"> </a>
    SET CLOSE-FUNCTION TO TRUE.<a name="wp1037292"> </a>
    CALL &quot;I$IO&quot; USING IO-FUNCTION, FILE-HANDLE.<a name="wp1037293"> </a>
</pre></div>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com subject=E-01-DS-060621-ACUCOBOL-GT-7.2">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
