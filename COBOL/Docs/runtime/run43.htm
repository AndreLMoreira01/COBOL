<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.6.1058" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="07/13/05 15:22:05" />
  <title>4.2  List of Runtime Options</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       ACUCOBOL-GT Runtime Manual <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="run4.htm"><br />Chapter 4: Runtime Options</a> &gt; </p>
<a name="wp1036553"> </a><h2 class="pHeading1">
4.2  List of Runtime Options
</h2>
<a name="wp1036167"> </a><p class="pBody">
The allowed runtime options include:  
</p>
<a name="wp1036442"> </a><p class="pBody">
</p><div>
<table border="0" cellpadding="6" cellspacing="1">
  <caption></caption>
  <tr align="left" valign="top">    <td><a name="wp1036170"> </a><p class="pCellBody">
<span style="font-family: Arial, Verdana, Helvetica, sans-serif; font-style: normal; font-weight: bold; text-decoration: none; vertical-align: baseline">-#<br /></span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
</p>
</td>
    <td><a name="wp1036173"> </a><p class="pCellBody">
This option must be followed (as the next separate argument) by a series of letters that determine which SPECIAL-NAMES switches to turn on.  There are 26 SPECIAL-NAMES switches.  The letter &quot;a&quot; corresponds to switch 1, &quot;b&quot; to switch 2, and so forth.  For example, to start the program with switches 1, 5 and 8 turned on, specify &quot;-# aeh&quot;. 
</p>
<a name="wp1036176"> </a><p class="pCellBody">
For convenience, you can turn on any of the first 8 switches by simply specifying the switch number or numbers without the &quot;#&quot; argument.  For example, &quot;-# aeh&quot; can also be specified as &quot;-158&quot;. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036178"> </a><p class="pCellBody">
<b class="cBold">-a</b>
</p>
</td>
    <td><a name="wp1036180"> </a><p class="pCellBody">
This flag is now obsolete and should not be used. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036182"> </a><p class="pCellBody">
<b class="cBold">-b</b>
</p>
</td>
    <td><a name="wp1036185"> </a><p class="pCellBody">
Inhibits the terminal initialization done by <b class="cBold">runcbl</b>.  This can be useful if the program is run in background because terminal initialization can prevent normal use of the terminal by the operating system.  This is particularly true on UNIX systems.  If you specify this flag, the behavior of ACCEPT and DISPLAY statements is undefined; therefore use this flag with caution.  A program can examine the ACU-NO-TERMINAL field after an ACCEPT FROM TERMINAL-INFO statement to determine whether it was started with &quot;-b&quot;. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036187"> </a><p class="pCellBody">
<b class="cBold">-c</b>
</p>
</td>
    <td><a name="wp1036193"> </a><p class="pCellBody">
 This option must be followed (as the next separate argument) by the name of an alternate runtime configuration file.  It causes <b class="cBold">runcbl</b> to use this configuration file instead of the default file.  
</p>
<a name="wp1036198"> </a><p class="pCellBody">
Remote name notation is allowed for this option if your runtime is client-enabled.  
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036206"> </a><p class="pCellBody">
<b class="cBold">--char2gui</b>   
</p>
</td>
    <td><a name="wp1036208"> </a><p class="pCellBody">
This option is used to convert character-based screens into their graphical equivalents for use in the AcuBench Screen Designer.  When you run your program with this option, ACUCOBOL-GT's Character-to-GUI Wizard launches in the background.  
</p>
<a name="wp1036209"> </a><p class="pCellBody">
After your program starts, navigate to the screen you want to convert and right-click on the window's background.  A pop-up menu is displayed.  Select  &quot;Build Graphical Screen&quot; to continue with the conversion.  The Character-to-GUI Wizard then creates a graphical version of the current screen and displays it together with a Properties dialog box.  You can use the Properties dialog to make some basic changes to the screen.  Repeat this process for each screen you want to convert. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036211"> </a><p class="pCellBody">
&#160;
</p>
</td>
    <td><a name="wp1036213"> </a><p class="pCellBody">
When you are done, exit the application.  When the application exits, the runtime writes an &quot;import.out&quot; file into your current working directory that contains information describing the converted screens.  You can then start AcuBench and, using the &quot;Add Screen&quot; function, display the contents of the &quot;import.out&quot; file in a Screen Designer window.  <em class="cEmphasis">If you already have a file called &quot;import.out&quot; in your current working directory, the wizard overwrites it</em>; therefore, if you intend to convert screens in stages, you should rename the file and save it in a separate directory.
</p>
<a name="wp1036214"> </a><p class="pCellBody">
If you execute the program in AcuBench, then after you exit the application, the workbench creates a new program in the workspace Structural View.  The program's Screen node contains entries for each screen described in the &quot;import.out&quot; file.  Those screens open in the workbench development area, where they can be modified.  Screen node entries can be moved in the workspace as needed.  
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036216"> </a><p class="pCellBody">
&#160;
</p>
</td>
    <td><a name="wp1036218"> </a><p class="pCellBody">
It is important to note that the purpose of the Character-to-GUI Wizard is to simplify the initial task of converting traditional text-based applications into ones that use a graphical user interface.  Although the wizard greatly reduces the task of converting character-based screens, it is only a first step in the process.  It is expected that after you use the wizard, you will spend time manipulating the screens to your liking using AcuBench Screen Designer.  You will also need to integrate the newly generated screen section code back into your program.  For more information on using the Character-to-GUI Wizard, please refer to the <em class="cEmphasis">AcuBench User's Guide</em>.  
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036220"> </a><p class="pCellBody">
<b class="cBold">-d</b>
</p>
</td>
    <td><a name="wp1036224"> </a><p class="pCellBody">
This starts the program in debugging mode.  See <a  href="run5.htm#wp1039944">Chapter 5, &quot;Runtime Debugger.&quot;</a> 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036229"> </a><p class="pCellBody">
<b class="cBold">-e</b>
</p>
</td>
    <td><a name="wp1036234"> </a><p class="pCellBody">
This option must be followed by the name of a file (as the next separate argument).  This option causes the error output from the runtime system to be placed in this file.  This can be used to trap runtime system error messages and trace output from the debugger.  &quot;-e&quot; creates a new file or overwrites an existing file.  Use &quot;+e&quot; to cause error output to be appended to the file. The format of the output can be tailored with the TRACE_STYLE configuration variable.  See Chapter 3.
</p>
<a name="wp1036235"> </a><p class="pCellBody">
Under UNIX systems, redirecting error output causes problems for &quot;more&quot; and &quot;vi&quot;.  For this reason, we offer two options for redirecting error messages under UNIX:
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036237"> </a><p class="pCellBody">
&#160;
</p>
</td>
    <td><a name="wp1036239"> </a><p class="pCellBody">
<b class="cBold">&quot;-e&quot;</b> - causes all of the runtime's tracing and error messages and DISPLAY UPON SYSERR output to go to &quot;errorfile&quot;.  It does not redirect stderr.  This means that error output from programs called by CALL &quot;SYSTEM&quot; is not redirected.  If you call &quot;more&quot; or &quot;vi&quot; from within COBOL, you can safely use &quot;-e&quot; to redirect error messages.  
</p>
<a name="wp1036240"> </a><p class="pCellBody">
<b class="cBold">&quot;-ee&quot;</b> - If you expect programs called by CALL &quot;SYSTEM&quot; to send their errors to the error file, use the option &quot;-ee&quot; instead of &quot;-e&quot;.
</p>
<a name="wp1036241"> </a><p class="pCellBody">
Remote name notation is allowed for this option if your runtime is client-enabled. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036246"> </a><p class="pCellBody">
<b class="cBold">--embedded-config-file</b>
</p>
</td>
    <td><a name="wp1036251"> </a><p class="pCellBody">
 This option causes the runtime to load and use a configuration file embedded in a COBOL object library.  The name of the embedded configuration file can be specified with the runtime -c option.   Otherwise, it must be named &quot;cblconfi&quot; or &quot;cblconfig&quot;.
</p>
<a name="wp1036252"> </a><p class="pCellBody">
The configuration file may be embedded either by using cblutil or the &quot;COPY RESOURCE&quot; statement.
</p>
<a name="wp1036253"> </a><p class="pCellBody">
The object library must be preloaded using the runtime -y command line option.  This is so that the configuration file settings will be available before the primary module is loaded.
</p>
<a name="wp1036254"> </a><p class="pCellBody">
Certain configuration variables must be set before the object library is loaded.  Therefore, these variables cannot be set in an embedded configuration file.  The following is a list of  variables that <em class="cEmphasis">cannot</em> be set in an embedded configuration file:
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036256"> </a><p class="pCellBody">
&#160;
</p>
</td>
    <td><a name="wp1036258"> </a><p class="pBody">
CGI
</p>
<a name="wp1036861"> </a><p class="pBody">
MESSAGE-QUEUE-SIZE
</p>
<a name="wp1036862"> </a><p class="pBody">
ICON
</p>
<a name="wp1036863"> </a><p class="pBody">
NO-CONSOLE
</p>
<a name="wp1036864"> </a><p class="pBody">
LOCKS-PER-FILE
</p>
<a name="wp1036865"> </a><p class="pBody">
TEST-CHAR
</p>
<a name="wp1036866"> </a><p class="pBody">
MAX-FILES
</p>
<a name="wp1036867"> </a><p class="pBody">
MAX-LOCKS
</p>
<a name="wp1036868"> </a><p class="pBody">
WINDOW-TITLE
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036260"> </a><p class="pCellBody">
&#160;
</p>
</td>
    <td><a name="wp1036262"> </a><p class="pCellBody">
The runtime uses the following higher default values for the LOCKS-PER-FILE, MAX-FILES, and MAX-LOCKS variables when &quot;--embedded-config-file&quot; is specified:
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036264"> </a><p class="pCellBody">
&#160;
</p>
</td>
    <td><a name="wp1036266"> </a><p class="pBody">
256   LOCKS-PER-FILE
</p>
<a name="wp1036267"> </a><p class="pBody">
255   MAX-FILES
</p>
<a name="wp1036268"> </a><p class="pBody">
512   MAX-LOCKS
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036270"> </a><p class="pCellBody">
<b class="cBold">-f</b>
</p>
</td>
    <td><a name="wp1036275"> </a><p class="pCellBody">
This option ensures that the runtime does not perform user interface functions when the COBOL program is functioning as a Common Gateway Interface (CGI) program on the Internet.  This option causes the runtime to suppress warning messages that are normally displayed in a message box.  If the runtime shuts down due to an error that is not handled by the COBOL program, it constructs an HTML page containing the shutdown message and sends it to the standard output stream before terminating.  This option performs the same function as the environment variable &quot;A_CGI&quot; but does not affect the entire environment.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036277"> </a><p class="pCellBody">
<b class="cBold">-g</b>
</p>
</td>
    <td><a name="wp1036279"> </a><p class="pCellBody">
This option causes the error file (specified after the &quot;-e&quot; option) to be compressed with the gzip compression method.  A compressed file must be decompressed with gzip before reading or editing.  For clarity, it is best to give the error file a &quot;.gz&quot; extension.  When appending to an existing file (with the &quot;+e&quot; option), you must use the same format--compressed or uncompressed--in which the file was originally created.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036281"> </a><p class="pCellBody">
<b class="cBold">-h</b>
</p>
</td>
    <td><a name="wp1036284"> </a><p class="pCellBody">
This option causes the runtime to explicitly ignore hang-up signals.  You can also ignore hang-up signals by specifying both the &quot;-s&quot; and &quot;-b&quot; options.  However, the &quot;-sb&quot; combination also inhibits terminal initialization and prevents the user from killing a program with an abort key such as &quot;Control-C&quot; or &quot;Delete&quot;.  Unlike &quot;-sb&quot;, the &quot;-h&quot; option ignores only the hang-up signals. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036286"> </a><p class="pCellBody">
<b class="cBold">-i</b>
</p>
</td>
    <td><a name="wp1036291"> </a><p class="pCellBody">
This option must be followed (as the next separate argument) by a file name.  This causes the keyboard input to be taken from this file.  It can be used as an alternate to input redirection on UNIX systems.  Remote name notation is <em class="cEmphasis">not</em> allowed for this option. 
</p>
<a name="wp1036292"> </a><p class="pCellBody">
Examine your input files carefully, paying particular attention to the way the &lt;enter&gt; key is represented.  On many systems, it is represented by a hex &quot;0A&quot; (line feed).  Note that the line feed does not, by default, terminate an ACCEPT.  So, when you use the &quot;-i&quot; option, you will want to add the following to your &quot;cblconfig&quot; file: 
</p>
<a name="wp1036293"> </a><p class="pCellBody">
KEYSTROKE TERMINATE=10 ^J
</p>
<a name="wp1036294"> </a><p class="pCellBody">
<em class="cEmphasis">This option has no effect on Windows platforms.</em>
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036296"> </a><p class="pCellBody">
<b class="cBold">-import</b>
</p>
</td>
    <td><a name="wp1036300"> </a><p class="pCellBody">
This option is available only on Windows and Windows NT systems.  It requires the file &quot;WEXPRT32.DLL&quot;, which must be installed in the same directory as the runtime executable.  This option is used to import graphical screens created with ACUCOBOL-GT Version 3.x or AcuScreens so that these screens can be used with the AcuBench Screen Designer.  If you are running with this option, simply right-click on any window to have the opportunity to add it to the file &quot;import.out&quot;.  See the AcuBench documentation for details.
</p>
<a name="wp1036301"> </a><p class="pCellBody">
It is important to note that the original purpose of the screen import utility was specifically to upgrade users from AcuScreens to AcuBench, and it was not intended as a permanent device to keep importing all the new screens you create either from scratch or from AcuBench.  For that reason, when new control types are added, the screen import utility is not necessarily updated at all, or it may be updated with basic information about the new control type but not all the different properties and styles of the new control type.  You should not rely on this utility to be able to import all new screens you create.
</p>
<a name="wp1036302"> </a><p class="pCellBody">
When the screen import utility tries to import an unrecognized type or property of a control, you will see the following message on your screen:
</p>
<a name="wp1036303"> </a><p class="pCellBody">
This screen contains at least one control type that the Screen Import Utility does not know about.  You should add these controls manually.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036305"> </a><p class="pCellBody">
<b class="cBold">-k</b>
</p>
</td>
    <td><a name="wp1036309"> </a><p class="pCellBody">
This option causes the immediate playback of a keystroke file.  It must be followed (as the next separate argument) by a file name.  The <em class="cEmphasis">filename</em> argument is the name of a file containing recorded keystrokes.  The runtime internally calls W$KEYBUF using opcode &quot;9&quot; and this file name prior to executing the first COBOL program.  The effect is that the keystrokes recorded in the file are treated as the runtime's first user input.  For more information on W$KEYBUF, see Appendix I in Book 4, <em class="cEmphasis">Appendices</em>.  Remote name notation is <em class="cEmphasis">not</em> allowed for this option.  Use this as an alternative to &quot;-i&quot; in Windows systems. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036311"> </a><p class="pCellBody">
<b class="cBold">-l</b>
</p>
</td>
    <td><a name="wp1036315"> </a><p class="pCellBody">
Causes a listing of the contents of the runtime configuration file to be printed on the error output.  Prints the runtime's version number on the first line.  Also prints the steps taken by <b class="cBold">runcbl</b> when it is trying to load a program, along with any problems encountered.  This is useful for debugging problems with the configuration file or program path resolution.  This is best used in conjunction with the &quot;-e&quot; option to capture the debugging information in a file. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036320"> </a><p class="pCellBody">
<b style="font-weight: bold" class="cBold">-m </b><span style="font-weight: normal" class="cBoldItalic">value file</span>
</p>
</td>
    <td><a name="wp1036322"> </a><p class="pCellBody">
Turns on memory handling descriptions.  These descriptions report detailed information about memory allocation, reallocation, and frees
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036327"> </a><p class="pCellBody">
<b class="cBold">--no-acusw</b>
</p>
</td>
    <td><a name="wp1036329"> </a><p class="pCellBody">
Inhibits the processing of the ACUSW environment variable. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036331"> </a><p class="pCellBody">
<b class="cBold">--no-save-debug  </b>
</p>
</td>
    <td><a name="wp1036333"> </a><p class="pCellBody">
This option has two effects:  (a) it prevents the debugger from reading the &quot;.adb&quot; file, thus causing the debugger to start in its default state, and (b) it prevents the debugger from writing out a new &quot;.adb&quot; file when it exits.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036335"> </a><p class="pCellBody">
&#160;
</p>
</td>
    <td><a name="wp1036337"> </a><p class="pCellBody">
The debugger saves state information in a &quot;.adb&quot; file which is used when the debugger is executed in another run.  This information includes window placement and breakpoint settings.  There are some cases when you may find this inconvenient, and the &quot;--no-save-debug&quot; option provides a way to eliminate this behavior.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036339"> </a><p class="pCellBody">
<b class="cBold">--no-signal-handlers</b>
</p>
</td>
    <td><a name="wp1036341"> </a><p class="pCellBody">
This switch allows you to initialize the runtime without installing its signal handlers.  This option is designed for use in environments like CICS that call the ACUCOBOL-GT runtime from a C main program and want to install their own signal handlers.  For more information, see the entry for acu_abend() in section 4.4.3 of <em class="cEmphasis">A&#160;Guide to Interoperating with ACUCOBOL-GT</em>.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036343"> </a><p class="pCellBody">
<b class="cBold">-o</b>
</p>
</td>
    <td><a name="wp1036347"> </a><p class="pCellBody">
This option must be followed by the name of a file that will take the display output from the program.  This is similar to output redirection on UNIX systems.  If &quot;+o&quot; is used instead, then the output is appended to the named file.  Remote name notation is <em class="cEmphasis">not</em> allowed for this option. 
</p>
<a name="wp1036348"> </a><p class="pCellBody">
<em class="cEmphasis">This option has no effect on Windows platforms.</em>
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036350"> </a><p class="pCellBody">
-p
</p>
</td>
    <td><a name="wp1036353"> </a><p class="pCellBody">
Activates a built-in execution profiling facility, prompting the runtime to collect information about I/O operations and CALLs, and to install a timer to track the amount of time spent in different parts of the code.  Information collected by the runtime is placed into an output file called &quot;acumon.xml&quot;.  For more information, see the <em class="cEmphasis">ACUCOBOL-GT User's Guid</em>e section 3.7, &quot;The Profiler.&quot;
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036358"> </a><p class="pCellBody">
<b class="cBold">-r</b>
</p>
</td>
    <td><a name="wp1036362"> </a><p class="pCellBody">
Starts the program in debugging mode (like &quot;-d&quot;).  This option must be followed by the name of a file containing debugging commands.  The debugger is run under control of this file.  Remote name notation is <em class="cEmphasis">not</em> allowed for this option. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036364"> </a><p class="pCellBody">
<b class="cBold">-s</b>
</p>
</td>
    <td><a name="wp1036367"> </a><p class="pCellBody">
Runs the program in &quot;safe&quot; mode.  On non-UNIX systems, the &quot;-s&quot; option prevents the user from killing the program with the operating system's abort key (Control-C, Delete, etc.).  However, any kill command will interrupt the program run. On UNIX systems only, the &quot;-s&quot; option must be issued <em class="cEmphasis">twice</em> (runcbl -ss) to protect it from the system's abort key.  This option allows only a kill -9 to stop the program run. 
</p>
<a name="wp1036368"> </a><p class="pCellBody">
&quot;Safe&quot; mode can help preserve the integrity of files used by the program.  If the program is not in &quot;safe&quot; mode, then <b class="cBold">runcbl</b> will automatically close its files if the user kills the program.  Note that this keeps each file intact but does not keep separate files synchronized with each other, which may be required by the user's application. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036370"> </a><p class="pCellBody">
<b class="cBold">-t</b>
</p>
</td>
    <td><a name="wp1036373"> </a><p class="pCellBody">
This option can be used to capture the runtime's terminal output to a disk file.  This option must be directly followed by a filename of the output file.
</p>
<a name="wp1036374"> </a><p class="pCellBody">
The -t option can be used instead of piping the output to the &quot;tee&quot; command.   Notice that piping runtime output to &quot;tee&quot; can cause the runtime to hang.  This is because runtime detects that the output is not a terminal and so it will not set terminal attributes for the terminal.  In such state, the runtime has a hard time accepting input, and the output may not be flushed to the screen in a timely manner.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036376"> </a><p class="pCellBody">
&#160;
</p>
</td>
    <td><a name="wp1036378"> </a><p class="pCellBody">
When the &quot;-t <em class="cEmphasis">filename</em>&quot; flag is set, all the output to the terminal goes to this file, including cursor addressing This option can be used only with a version of the runtime which has an addressable terminal capability.   It will not work with any of the graphical runtimes, nor will it work with the Windows console runtime.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036380"> </a><p class="pCellBody">
<b class="cBold">-u</b>
</p>
</td>
    <td><a name="wp1036382"> </a><p class="pCellBody">
By default, the runtime tests each use of a LINKAGE data item to check that the item passed by the calling program is at least as large as the item declared by the called program. This ensures that unallocated memory is not accidentally referenced.  The &quot;-u&quot; option disables that test, as well as the test that verifies that all parameters of a subprogram were passed by the caller.  (The same can be accomplished with the CHECK_USING configuration variable.  See Appendix&#160;H.)
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036384"> </a><p class="pCellBody">
<b class="cBold">-v</b>
</p>
</td>
    <td><a name="wp1036389"> </a><p class="pCellBody">
Prints the current version number of <b class="cBold">runcbl</b>, the serial number, and the maximum number of users licensed to use the runtime simultaneously.  No program is run. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036391"> </a><p class="pCellBody">
<b class="cBold">-vv</b>
</p>
</td>
    <td><a name="wp1036393"> </a><p class="pCellBody">
(double &quot;v&quot;)<span style="font-family: Arial, Verdana, Helvetica, sans-serif"> </span>Prints the current version number of <b class="cBold">runcbl</b>, along with extended information. No program is run. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036395"> </a><p class="pCellBody">
<b class="cBold">-vvv</b>
</p>
</td>
    <td><a name="wp1036397"> </a><p class="pCellBody">
(triple &quot;v&quot;) This option is valid on UNIX systems and causes <b class="cBold">runcbl</b> to display additional configuration information about the UNIX port. The information displayed varies depending on the UNIX system and is subject to change without notice.  No program is run. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036399"> </a><p class="pCellBody">
<b class="cBold">-w</b>
</p>
</td>
    <td><a name="wp1036402"> </a><p class="pCellBody">
This has the same effect as specifying &quot;WARNINGS  0&quot; and &quot;MAKE-ZERO  0&quot; in the runtime configuration file.  This option is provided for compatibility with previous versions of ACUCOBOL-GT.<span style="font-family: Arial, Verdana, Helvetica, sans-serif"> </span> We recommend that the corresponding configuration entries be used instead.  
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036408"> </a><p class="pCellBody">
<b class="cBold">-x</b>
</p>
</td>
    <td><a name="wp1036412"> </a><p class="pCellBody">
When a file error &quot;30&quot; occurs, the root cause of this error is often not apparent.  Specifying &quot;-x&quot; will cause the runtime system to display the operating system's corresponding error number on the error output.  This information may help in determining the problem.  You can use the &quot;-e&quot; option to direct the error output to a file. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036414"> </a><p class="pCellBody">
<b class="cBold">-y</b>
</p>
</td>
    <td><a name="wp1036419"> </a><p class="pCellBody">
This option causes the runtime to pre-load the specified ACUCOBOL-GT object library, UNIX/Linux shared object library, or Windows DLL.  This option must be followed (as the next separate argument) by the name of the library to load.  You can pre-load multiple libraries by specifying multiple &quot;-y&quot; options.  If the library is a DLL, the C calling convention can be specified after the name (see section 3.3.2, in<em class="cEmphasis"> A Guide to Interoperating with ACUCOBOL-GT).</em>
</p>
<a name="wp1036420"> </a><p class="pCellBody">
The directory of the object module and ENTRY points contained in the library are loaded by the runtime before it loads the main program.  All of the object modules in the library are thus available to be called at any time.  Note that the main program may be contained in the library because the library is loaded first.  
</p>
<a name="wp1036421"> </a><p class="pCellBody">
When specifying a shared object library, you can include the file suffix or use the SHARED_LIBRARY_EXTENSION configuration variable to specify the filename extension.  
</p>
<a name="wp1036422"> </a><p class="pCellBody">
Note that shared libraries can also be loaded with the SHARED_LIBRARY_LIST configuration variable. You can also use the SHARED_LIBRARY_PREFIX configuration variable to specify a set of directories that the runtime will search when attempting to locate a shared library.  For more information on these variables, see their entries in Appendix H of Book 4.
</p>
<a name="wp1036423"> </a><p class="pCellBody">
Libraries loaded with the &quot;-y&quot; option remain in memory until the process exits.  The CANCEL statement cannot be used to unload the library.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036425"> </a><p class="pCellBody">
&#160;
</p>
</td>
    <td><a name="wp1036427"> </a><p class="pCellBody">
ACUCOBOL-GT object libraries are described in more detail in section 3.2 of the <em class="cEmphasis">ACUCOBOL-GT User's Guide</em>.   Windows DLLs and UNIX shared libraries are described in Chapters 3 and&#160;4 of <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>.
</p>
<a name="wp1036433"> </a><p class="pCellBody">
Remote name notation is allowed.  See section 5.2.2 of the <em class="cEmphasis">ACUCOBOL-GT User's Guide</em>
</p>
<a name="wp1036435"> </a><p class="pCellBody">
<b class="cBold">Note: </b> &quot;-y&quot; does not load client-side DLLs for thin client applications that make calls using the CALL verb &quot;@[DISPLAY]:&quot; syntax. These applications must explicitly load the DLL by calling it with the CALL verb before calling a function within the DLL.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036437"> </a><p class="pCellBody">
 <b class="cBold">-z</b>
</p>
</td>
    <td><a name="wp1036441"> </a><p class="pCellBody">
After an unexpected runtime termination resulting from a memory access violation, this option causes the program to output the current contents of memory where the violation occurred. 
</p>
</td>
</tr>
</table>
</div>
<p class="pBody">
</p>
<a name="wp1034611"> </a><p class="pBody">

</p>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: (800) 262-6585 (U.S.A. and Canada)<br />
         Voice: (858) 689-4500<br />
         Fax: (858) 689-4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
