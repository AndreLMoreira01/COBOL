<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.5.1025" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/15/06 11:29:19" />
  <title>6.2.2  Defaults Used in XFD Files</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       AcuODBC User's Guide <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="odb6.htm">Chapter 6: Mapping COBOL Data Items and Database Fields</a> &gt; <a href="odb63.htm">6.2  XFD Files</a> &gt; </p>
<a name="wp1028298"> </a><h2 class="pHeading2">
6.2.2  Defaults Used in XFD Files
</h2>
<a name="wp1028302"> </a><p class="pBody">
There are several elements of COBOL file descriptors that require special handling when data dictionaries are built.  These include multiple record definitions, REDEFINES, FILLER, and OCCURS.  This section describes how ACUCOBOL-GT<sup class="cSuperscript">®</sup> handles each of these situations.
</p>
<a name="wp1028303"> </a><p class="pBody">
As described earlier, in many instances you can override the default behavior described below by placing <em class="cEmphasis">directives</em> in the FDs of your COBOL code.  Directives are described in <a  href="odb69.htm#wp1028480">section 6.3, &quot;Using Directives.&quot;</a>  For example, the WHEN directive allows you to use multiple definitions for a single set of data by specifying when each definition should be used.  
</p>
<a name="wp1028304"> </a><p class="pBody">
Like most data sources, Vision does not support the notion of multiple definitions for the same column.  As the following paragraphs explain, whenever a COBOL program gives more than one definition for the same data, the compiler makes a choice about which definition to use in the dictionary.  Then it disregards the rest.  
</p>
<a name="wp1028305"> </a><h3 class="pHeadingRef">
KEY IS phrase
</h3>
<a name="wp1028310"> </a><p class="pBody">
Fields named in KEY IS phrases of SELECT statements are included as column names in the &quot;virtual&quot; database.  Other fields that occupy the same areas as the key fields (by either explicit or implicit redefinition) are not included by name, but are mapped to the key field column names by the data dictionary.
</p>
<a name="wp1028311"> </a><p class="pBody">
Remember, if the field named in the KEY IS phrase is a group item, it will not be included in the XFD unless a USE GROUP directive is used (see <a  href="odb64.htm#wp1044190">section 6.2.1, &quot;How the Data Dictionary Is Formed&quot;</a>).
</p>
<a name="wp1028312"> </a><h3 class="pHeadingRef">
REDEFINES clause
</h3>
<a name="wp1028317"> </a><p class="pBody">
Fields contained in a redefining item occupy the same positions as the fields being redefined.  The compiler needs to select only one of the field definitions to use.  The default rule that it follows is to use the fields in the item being redefined as column names; fields that appear subordinate to a REDEFINES clause are mapped to column names in the &quot;virtual&quot; database using the data dictionary.
</p>
<a name="wp1028318"> </a><h3 class="pHeadingRef">
Multiple record definitions
</h3>
<a name="wp1028323"> </a><p class="pBody">
This same rule extends to multiple record definitions.  In COBOL, multiple record definitions are redefinitions of the entire record area.  This leads to the same complication that is encountered with REDEFINES: multiple definitions for the same data.  So the compiler needs to select one definition to use.  
</p>
<a name="wp1028324"> </a><p class="pBody">
Because the multiple record types can be different sizes, the compiler must use the largest one, so that it can cover all of the fields adequately.  Thus, the compiler's rule is to use the fields in the largest record defined for the file.  If more than one record is of the largest size, the compiler uses the first one.  
</p>
<a name="wp1028325"> </a><h3 class="pHeadingRef">
Group items
</h3>
<a name="wp1037520"> </a><p class="pBody">
Note that group items are, by default, never included in a data dictionary for the same reason that REDEFINES are excluded: they result in multiple names for the same data items, and they are shown in the XFD file as a comment.  You can, however, choose to combine grouped fields into one data item by specifying the USE GROUP directive, described in <a  href="odb619.htm#wp1044530">section 6.3.10</a>.
</p>
<a name="wp1037524"> </a><h3 class="pHeadingRef">
FILLER data items
</h3>
<a name="wp1028336"> </a><p class="pBody">
In a COBOL FD, FILLER data items are place holders.  FILLER items are not uniquely named and thus cannot be uniquely referenced.  For this reason, they are not placed into the Acucorp data dictionary.  The dictionary maintains the correct mapping of the other fields, and no COBOL record positional information is lost.  
</p>
<a name="wp1028337"> </a><p class="pBody">
If your ODBC application refers to a FILLER data item, you may need to include it.  In such a case, you could include it under a USE GROUP directive or give it a name of its own with the NAME directive, described in <a  href="odb616.htm#wp1028900">section 6.3.7</a>.
</p>
<a name="wp1028339"> </a><h3 class="pHeadingRef">
OCCURS clauses
</h3>
<a name="wp1028344"> </a><p class="pBody">
An OCCURS clause always requires special handling, because the ACUCOBOL-GT compiler must assign a unique name to each database column.  The compiler accomplishes this by appending sequential index numbers to the item named in the OCCURS.  
</p>
<a name="wp1028345"> </a><p class="pBody">
For example, if the following were part of a file's description:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
     03  employee-table occurs 20 times.<a name="wp1028346"> </a>
         05  employee-number     pic 9(3)<a name="wp1028347"> </a>
</pre></div>
<a name="wp1028348"> </a><p class="pBody">
these column names would be created in the &quot;virtual&quot; database table, that is, the &quot;table&quot; of Vision data created when AcuODBC performs its translation:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
employee_number_1<a name="wp1028349"> </a>
employee_number_2<a name="wp1028350"> </a>
.<a name="wp1028351"> </a>
.<a name="wp1028352"> </a>
.<a name="wp1028353"> </a>
employee_number_10<a name="wp1028354"> </a>
employee_number_11<a name="wp1028355"> </a>
.<a name="wp1028356"> </a>
.<a name="wp1028357"> </a>
.<a name="wp1028358"> </a>
employee_number_20<a name="wp1028359"> </a>
</pre></div>
<a name="wp1028360"> </a><p class="pBody">
Note that the hyphens in the COBOL code are translated to underscores in database field names, and the index number is preceded by an underscore.
</p>
<a name="wp1028361"> </a><h3 class="pHeadingRef">
Identical field names 
</h3>
<a name="wp1028367"> </a><p class="pBody">
In COBOL you distinguish fields with identical names by qualification.  For example, there are two fields named MONTH in the following code, but they can be qualified by their group items.  Thus, you would reference MONTH OF LAST_VISIT and MONTH OF LAST_PAYMENT in your program:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
10  last_visit.<a name="wp1028368"> </a>
    15  month               pic 99.<a name="wp1028369"> </a>
    15  day                 pic 99.<a name="wp1028370"> </a>
    15  year                pic 99.<a name="wp1028371"> </a>
10  last_payment.            <a name="wp1028372"> </a>
    15  month               pic 99.<a name="wp1028373"> </a>
    15  day                 pic 99.<a name="wp1028374"> </a>
    15  year                pic 99.<a name="wp1028375"> </a>
</pre></div>
<a name="wp1028376"> </a><p class="pBody">
However, database systems consider duplicate names an error.  Thus, if more than one field in a particular file has the same name, you receive a compile error when the &quot;.xfd&quot; file is generated.  
</p>
<a name="wp1028377"> </a><p class="pBody">
The solution to this situation is to add a NAME directive that associates an alternate name with one or both of the conflicting fields.  (See <a  href="odb616.htm#wp1028900">section 6.3.7</a> for more information.)
</p>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com?subject=E-01-UG-060621-AcuODBC-7.2">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
