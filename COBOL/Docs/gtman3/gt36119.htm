<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.5.1025" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/14/06 08:28:08" />
  <title>INQUIRE Statement</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       ACUCOBOL-GT Reference Manual <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="gt36.htm"><br />Chapter 6:  Procedure Division</a> &gt; <a href="gt3678.htm">6.6  Procedure Division Statements </a> &gt; </p>
<a name="wp1039403"> </a><h2 class="pHeading2">
INQUIRE Statement
</h2>
<a name="wp1039408"> </a><p class="pBody">
The INQUIRE verb allows you to retrieve information from a control, or retrieve the dimensions of a window.  
</p>
<a name="wp1039410"> </a><h3 class="pHeadingRef">
General Format
</h3>
<a name="wp1039411"> </a><h3 class="pHeadingRef">
Format 1
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">INQUIRE</u> { control-item } [ ( {index-1} ... ) ]<a name="wp1039412"> </a>
        { <u class="cUnderline">CONTROL</u>      }<a name="wp1039413"> </a>
<a name="wp1039414"> </a>
</pre></div>
<a name="wp1039415"> </a><p class="pBody">
Remaining phrases are optional, can appear in any order.
</p>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">AT</u> screen-loc   [<u class="cUnderline">CELL</u>  ]<a name="wp1039416"> </a>
                [<u class="cUnderline">CELLS</u> ]<a name="wp1039417"> </a>
                [<u class="cUnderline">PIXEL</u> ]<a name="wp1039418"> </a>
                [<u class="cUnderline">PIXELS</u>]<a name="wp1039419"> </a>
<a name="wp1039420"> </a>
AT <u class="cUnderline">LINE</u> NUMBER line-num   [<u class="cUnderline">CELL</u>  ]<a name="wp1039421"> </a>
                          [<u class="cUnderline">CELLS</u> ]<a name="wp1039422"> </a>
                          [<u class="cUnderline">PIXEL</u> ]<a name="wp1039423"> </a>
                          [<u class="cUnderline">PIXELS</u>]<a name="wp1039424"> </a>
<a name="wp1039425"> </a>
AT {<u class="cUnderline">COLUMN</u>  } NUMBER col-num   [<u class="cUnderline">CELL</u>  ]<a name="wp1039426"> </a>
   {<u class="cUnderline">COL</u>     }                  [<u class="cUnderline">CELLS</u> ]<a name="wp1039427"> </a>
   {<u class="cUnderline">POSITION</u>}                  [<u class="cUnderline">PIXEL</u> ]<a name="wp1039428"> </a>
   {<u class="cUnderline">POS</u>     }                  [<u class="cUnderline">PIXELS</u>]<a name="wp1039429"> </a>
<a name="wp1039430"> </a>
AT <u class="cUnderline">CLINE</u> NUMBER cline-num   [CELL ]<a name="wp1039431"> </a>
                            [CELLS]<a name="wp1039432"> </a>
<a name="wp1039433"> </a>
AT <u class="cUnderline">CCOL</u> NUMBER ccol-num   [CELL ]<a name="wp1039434"> </a>
                          [CELLS]<a name="wp1039435"> </a>
<a name="wp1039436"> </a>
<u class="cUnderline">TITLE</u> {IN} title<a name="wp1039437"> </a>
      {= }<a name="wp1039438"> </a>
<a name="wp1039439"> </a>
<u class="cUnderline">VALUE</u> {IN} [ <u class="cUnderline">MULTIPLE</u> ] value [ <u class="cUnderline">LENGTH</u> {IN} length-1 ]<a name="wp1039440"> </a>
      {= } [ <u class="cUnderline">TABLE</u>    ]                {= }<a name="wp1039441"> </a>
<a name="wp1039442"> </a>
<u class="cUnderline">STYLE</u> {IN} style-flags<a name="wp1039443"> </a>
      {= }<a name="wp1039444"> </a>
<a name="wp1039445"> </a>
<u class="cUnderline">HELP-ID</u> {IN} help-id<a name="wp1039446"> </a>
        {= }<a name="wp1039447"> </a>
<a name="wp1039448"> </a>
{{property-name         } [({param-expr}...)] {IN} property-value ...<a name="wp1039449"> </a>
 {<u class="cUnderline">PROPERTY</u> property-name}                     {= }   <a name="wp1039451"> </a>
 {object-expression     }<a name="wp1160366"> </a>
     [ <u class="cUnderline">LENGTH</u> {IN} length-1 ] }<a name="wp1039462"> </a>
              {= }<a name="wp1039463"> </a>
<a name="wp1039464"> </a>
<u class="cUnderline">SYSTEM</u> <u class="cUnderline">HANDLE</u> {IN} system-handle<a name="wp1039465"> </a>
              {= }<a name="wp1039466"> </a>
<a name="wp1039467"> </a>
POP-UP <u class="cUnderline">MENU</u> {IN}  {menu-1}<a name="wp1039468"> </a>
            {= }<a name="wp1039469"> </a>
<a name="wp1039470"> </a>
<u class="cUnderline">LINE</u> NUMBER {IN} line-num<a name="wp1039471"> </a>
            {= }<a name="wp1039472"> </a>
<a name="wp1039473"> </a>
{<u class="cUnderline">COLUMN</u>  } NUMBER {IN} col-num<a name="wp1039474"> </a>
{<u class="cUnderline">COL</u>     }        {= }<a name="wp1039475"> </a>
{<u class="cUnderline">POSITION</u>}<a name="wp1039476"> </a>
{<u class="cUnderline">POS</u>     }<a name="wp1039477"> </a>
<a name="wp1039478"> </a>
<u class="cUnderline">SIZE</u> {IN} width<a name="wp1039479"> </a>
     {= }<a name="wp1039480"> </a>
<a name="wp1039481"> </a>
<u class="cUnderline">LINES</u> {IN} height<a name="wp1039482"> </a>
      {= }<a name="wp1039483"> </a>
<a name="wp1039484"> </a>
<u class="cUnderline">MAX-HEIGHT</u> {IN} max-height<a name="wp1095190"> </a>
           {= }<a name="wp1095191"> </a>
<a name="wp1095192"> </a>
<u class="cUnderline">MAX-WIDTH</u>  {IN} max-width<a name="wp1095193"> </a>
           {= }<a name="wp1095194"> </a>
<a name="wp1095195"> </a>
<u class="cUnderline">MIN-HEIGHT</u> {IN} min-height<a name="wp1095196"> </a>
           {= }<a name="wp1095197"> </a>
<a name="wp1095198"> </a>
<u class="cUnderline">MIN-WIDTH</u>  {IN} min-width<a name="wp1095199"> </a>
           {= }<a name="wp1095200"> </a>
<a name="wp1095201"> </a>
<u class="cUnderline">ID</u> {IN} id<a name="wp1039485"> </a>
   {= }<a name="wp1039486"> </a>
<a name="wp1039487"> </a>
<u class="cUnderline">CLASS</u> {IN} class-code<a name="wp1039488"> </a>
      {= }<a name="wp1039489"> </a>
<a name="wp1171100"> </a>
<u class="cUnderline">EXCLUDE-EVENT-LIST</u> {IN} list-state<a name="wp1171107"> </a>
                   {= }<a name="wp1171108"> </a>
<a name="wp1171079"> </a>
<u class="cUnderline">LAYOUT-DATA</u> {IN} layout-data					<a name="wp1171080"> </a>
            {= }<a name="wp1171081"> </a>
<a name="wp1081582"> </a>
<u class="cUnderline">ENABLED</u> {IN} enabled-state					<a name="wp1039491"> </a>
        {= }<a name="wp1039492"> </a>
<a name="wp1039493"> </a>
<u class="cUnderline">VISIBLE</u> {IN} visible-state				<a name="wp1039494"> </a>
        {= }<a name="wp1039495"> </a>
</pre></div>
<a name="wp1161561"> </a><p class="pBody">
where <em class="cEmphasis">param-expr</em> is one of the following:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
{ param                               } [ <u class="cUnderline">AS</u> type_num ]<a name="wp1161562"> </a>
<a name="wp1161563"> </a>
{ {BY} NAME parameter-name {IS} param }<a name="wp1161564"> </a>
{                          {= }       }<a name="wp1161565"> </a>
<a name="wp1161566"> </a>
{ parameter-name {IS} param           }<a name="wp1161567"> </a>
{                {= }                 }<a name="wp1161568"> </a>
</pre></div>
<a name="wp1161976"> </a><p class="pBody">
<em class="cEmphasis">object-expression</em> has the following format:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
{ {^} property-1 [ (param-expr ... ) ]<a name="wp1162069"> </a>
  [ :: property-2 [ ( param-expr ... ) ] ... }<a name="wp1162099"> </a>
</pre></div>
<a name="wp1039496"> </a><h3 class="pHeadingRef">
Format 2
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">INQUIRE</u> { window-handle           }<a name="wp1039497"> </a>
        { <u class="cUnderline">WINDOW</u> [generic-handle] }<a name="wp1039498"> </a>
</pre></div>
<a name="wp1039499"> </a><p class="pBody">
Remaining phrases are optional, can appear in any order.
</p>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">LINE</u> NUMBER {IN} line-no<a name="wp1039500"> </a>
            {= }<a name="wp1039501"> </a>
<a name="wp1039502"> </a>
{<u class="cUnderline">COLUMN</u>  } NUMBER {IN} col-num<a name="wp1039503"> </a>
{<u class="cUnderline">COL</u>     }        {= }<a name="wp1039504"> </a>
{<u class="cUnderline">POSITION</u>}<a name="wp1039505"> </a>
{<u class="cUnderline">POS</u>     }<a name="wp1039506"> </a>
<a name="wp1039507"> </a>
<u class="cUnderline">TITLE</u> {IN} title<a name="wp1039508"> </a>
      {= }<a name="wp1039509"> </a>
<a name="wp1039510"> </a>
<u class="cUnderline">SCREEN</u> <u class="cUnderline">LINE</u> NUMBER {IN} screen-line<a name="wp1039511"> </a>
                   {= }<a name="wp1039512"> </a>
<a name="wp1039513"> </a>
<u class="cUnderline">SCREEN</u> {<u class="cUnderline">COLUMN</u>  } NUMBER {IN} screen-col<a name="wp1039514"> </a>
       {<u class="cUnderline">COL</u>     }        {= }<a name="wp1039515"> </a>
       {<u class="cUnderline">POSITION</u>}<a name="wp1039516"> </a>
       {<u class="cUnderline">POS</u>     }<a name="wp1039517"> </a>
<a name="wp1039518"> </a>
<u class="cUnderline">SIZE</u> {IN} width<a name="wp1039519"> </a>
     {= }<a name="wp1039520"> </a>
<a name="wp1039521"> </a>
<u class="cUnderline">LINES</u> {IN} height<a name="wp1039522"> </a>
      {= }<a name="wp1039523"> </a>
<a name="wp1039524"> </a>
<u class="cUnderline">SYSTEM</u> <u class="cUnderline">HANDLE</u> {IN} system-handle<a name="wp1039525"> </a>
              {= }<a name="wp1039526"> </a>
<a name="wp1039527"> </a>
<u class="cUnderline">LAYOUT-MANAGER</u> {IN} layout-manager<a name="wp1081623"> </a>
               {= }<a name="wp1081624"> </a>
<a name="wp1081625"> </a>
<u class="cUnderline">VISIBLE</u> {IN} visible-state<a name="wp1039528"> </a>
        {= }<a name="wp1039529"> </a>
<a name="wp1039530"> </a>
<u class="cUnderline">POP-UP</u> <u class="cUnderline">MENU</u> {IN} menu-1<a name="wp1039531"> </a>
            {= }<a name="wp1039532"> </a>
</pre></div>
<a name="wp1039534"> </a><h3 class="pHeadingRef">
Syntax Rules
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1039535"> </a><div class="pSmartList1"><li><em class="cEmphasis">Control-item</em> is a USAGE HANDLE data item that identifies the control to be inquired.  If it is a typed handle, then it must be associated with a control.  <em class="cEmphasis">Control-item</em> can also be an elementary Screen Section item that describes a control.  </li></div>
<a name="wp1039536"> </a><div class="pSmartList1"><li><em class="cEmphasis">Index-1</em> is a numeric expression.  The parentheses surrounding <em class="cEmphasis">index-1</em> are required.</li></div>
<a name="wp1039537"> </a><div class="pSmartList1"><li>The AT, LINE, COLUMN, CLINE, and CCOL phrases must appear in conjunction with the CONTROL phrase. </li></div>
<a name="wp1039538"> </a><div class="pSmartList1"><li><em class="cEmphasis">Screen-loc</em> is an integer data item or literal that contains exactly 4, 6, or 8 digits.</li></div>
<a name="wp1039539"> </a><div class="pSmartList1"><li><em class="cEmphasis">Line-num</em>, <em class="cEmphasis">col-num</em>, <em class="cEmphasis">cline-num</em>, and <em class="cEmphasis">ccol-num</em> are numeric data items or literals.  Note that they may contain non-integer values, except when pixels are specified.  </li></div>
<a name="wp1039540"> </a><div class="pSmartList1"><li><em class="cEmphasis">Title</em> is an alphanumeric data item.</li></div>
<a name="wp1039541"> </a><div class="pSmartList1"><li><em class="cEmphasis">Value</em> may be any data item.  </li></div>
<a name="wp1039542"> </a><div class="pSmartList1"><li><em class="cEmphasis">Style-flags</em> is a numeric data item capable of holding 10 or more digits.</li></div>
<a name="wp1039543"> </a><div class="pSmartList1"><li><em class="cEmphasis">Help-id</em> is a numeric data item.</li></div>
<a name="wp1039544"> </a><div class="pSmartList1"><li><em class="cEmphasis">Property-name</em> is the name of a property specific to the type of control being inquired.  If <em class="cEmphasis">control-item</em> refers to a generic handle, or if the CONTROL option is specified, then <em class="cEmphasis">property-name</em> cannot be used.  Use the PROPERTY phrase instead. </li></div>
<a name="wp1039545"> </a><div class="pSmartList1"><li><em class="cEmphasis">Property-type</em> is a numeric literal or data item.  </li></div>
<a name="wp1039546"> </a><div class="pSmartList1"><li><em class="cEmphasis">Property-value</em> is a data item.  Its data type should be appropriate for the specified property. </li></div>
<a name="wp1162203"> </a><div class="pSmartList1"><li>In <em class="cEmphasis">param-expr</em>:</li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1039547"> </a><div class="pSmartList2"><li><em class="cEmphasis">Param</em> is a literal, data-item, or numeric expression used when inquiring the property value of an ActiveX control or COM object.</li></div>
<a name="wp1162126"> </a><div class="pSmartList2"><li><em class="cEmphasis">Type-num</em> is a numeric data item or numeric literal.</li></div>
</ol></div>
<a name="wp1039548"> </a><div class="pSmartList1"><li>In<em class="cEmphasis"> object-expression</em>:</li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1039551"> </a><div class="pSmartList2"><li>^ can only be used in conjunction with a Format 5 USE verb for an ActiveX control or COM object.</li></div>
<a name="wp1162114"> </a><div class="pSmartList2"><li><em class="cEmphasis">Property-1</em> is the name of a property of the ActiveX control or COM object. <em class="cEmphasis"> Property-1</em> cannot be a write-only property.</li></div>
<a name="wp1162115"> </a><div class="pSmartList2"><li><em class="cEmphasis">Property-2</em> is the name of a property of the ActiveX control or COM object that is the value of <em class="cEmphasis">property-1</em>.  <em class="cEmphasis">Property-2</em> cannot be a write-only property.</li></div>
</ol></div>
<a name="wp1039555"> </a><div class="pSmartList1"><li><em class="cEmphasis">Length-1 </em>is a numeric data item.  The LENGTH phrase may be specified only if the <em class="cEmphasis">value </em>or <em class="cEmphasis">property-value</em> immediately preceding it is an alphanumeric data item.</li></div>
<a name="wp1039556"> </a><div class="pSmartList1"><li><em class="cEmphasis">Window-handle</em> is a USAGE HANDLE OF WINDOW or PIC X(10) data item.</li></div>
<a name="wp1039557"> </a><div class="pSmartList1"><li><em class="cEmphasis">Generic-handle</em> is a USAGE HANDLE, HANDLE OF WINDOW, or PIC X(10) data item.</li></div>
<a name="wp1039558"> </a><div class="pSmartList1"><li><em class="cEmphasis">Line-no, col-no, screen-line, screen-col, width,</em> <em class="cEmphasis">height, max-height</em>, <em class="cEmphasis">max-width</em>, <em class="cEmphasis">min-height</em>, and <em class="cEmphasis">min-width</em> are numeric data items.  <em class="cEmphasis">Line-no</em> and <em class="cEmphasis">col-no</em> should be signed and have at least two digits after the decimal point to get the best results.  <em class="cEmphasis">Screen-line</em> and <em class="cEmphasis">screen-col</em> should be signed to get the best result.</li></div>
<a name="wp1039559"> </a><div class="pSmartList1"><li><em class="cEmphasis">System-handle, visible-state</em>, and<em class="cEmphasis"> layout-data</em> are numeric data items.</li></div>
<a name="wp1039560"> </a><div class="pSmartList1"><li><em class="cEmphasis">Menu-1</em> is a USAGE HANDLE or HANDLE OF MENU data item.</li></div>
<a name="wp1039561"> </a><div class="pSmartList1"><li><em class="cEmphasis">Id</em>, <em class="cEmphasis">class-code</em> and <em class="cEmphasis">enabled-state</em> are numeric data items.</li></div>
<a name="wp1171033"> </a><div class="pSmartList1"><li><em class="cEmphasis">List-state</em> is a numeric data item.</li></div>
<a name="wp1081685"> </a><div class="pSmartList1"><li>Layout<em class="cEmphasis">-manager</em> is a HANDLE or HANDLE OF LAYOUT-MANAGER data item.</li></div>
<a name="wp1039562"> </a><div class="pSmartList1"><li>In Format 1, the LINE IN phrase and the COLUMN IN phrase may be used only if the <em class="cEmphasis">control-item</em> option is specified. </li></div>
</ol></div>
<a name="wp1039564"> </a><h3 class="pHeadingRef">
General Rules
</h3>
<a name="wp1039565"> </a><h3 class="pHeadingRef">
Format 1 (INQUIRE CONTROL)
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1039566"> </a><div class="pSmartList1"><li>The INQUIRE CONTROL statement retrieves some or all of a control's current properties, and stores them as data items.  It can also be used to retrieve property data from ActiveX controls, COM objects, and .NET controls (also known as assemblies).  <em class="cEmphasis">Control-item</em> identifies the control to inquire.  If the CONTROL phrase is used instead, the runtime inquires the control located at the screen position specified by the AT, LINE, and COLUMN phrases in the current window (on non-graphical systems, the CLINE and CCOL phrases also apply).  The runtime system maintains a list of controls in each window.  When you are attempting to inquire from a control at a specific location, the runtime searches this list, inquiring the first control it finds that exactly matches the given location.  The list is maintained in the order in which the controls are created.  </li></div>
<a name="wp1039567"> </a><div class="pSmartList1"><li>If <em class="cEmphasis">control-item </em>does not refer to a valid control, or if the runtime cannot locate a control at the specified screen location, the INQUIRE statement has no effect.  </li></div>
<a name="wp1039568"> </a><div class="pSmartList1"><li>If <em class="cEmphasis">index-1</em> is specified, then certain properties in the control being inquired are modified to match the value of <em class="cEmphasis">index-1</em>.  This modification occurs before any inquiry occurs.  The exact set of properties modified depends on the control's type.  Three controls have properties that are modified in this way:</li></div>
<a name="wp1039569"> </a><p class="pBodyRelative">
   <div>
<table border="1" cellpadding="2" cellspacing="2">
  <caption></caption>
  <tr align="left" valign="top">    <th><a name="wp1056496"> </a>
Control Type

</th>
    <th><a name="wp1056498"> </a>
Properties Affected

</th>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1056500"> </a><p class="pCellBody">
List Box 
</p>
</td>
    <td><a name="wp1056502"> </a><p class="pCellBody">
QUERY-INDEX
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1056504"> </a><p class="pCellBody">
Grid 
</p>
</td>
    <td><a name="wp1056506"> </a><p class="pCellBody">
Y, X
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1056508"> </a><p class="pCellBody">
Tree View
</p>
</td>
    <td><a name="wp1056510"> </a><p class="pCellBody">
ITEM
</p>
</td>
</tr>
</table>
</div>

</p>
<a name="wp1039588"> </a><p class="pIndented1">
Each occurrence of <em class="cEmphasis">index-1</em> modifies one property.  The first occurrence modifies the first property in the list presented in the preceding table.  The second occurrence modifies the second property.  For example, the statement fragment
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
INQUIRE grid-1(2, 3)<a name="wp1039589"> </a>
</pre></div>
<a name="wp1039590"> </a><p class="pIndented1">
Would have the effect of setting the grid property &quot;Y&quot; to &quot;2&quot; and &quot;X&quot; to &quot;3&quot;.  
</p>
<a name="wp1039591"> </a><p class="pIndented1">
Supplying more index values than the control supports has no additional effect.  You may omit trailing indexes; this leaves the corresponding properties unchanged.  
</p>
<a name="wp1039592"> </a><p class="pIndented1">
This feature can be used to simplify inquiry on specific elements of controls that hold multiple values.  For example, you can retrieve the contents of row 2, column 3 in a grid with the statement:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
INQUIRE grid-1(2, 3), CELL-DATA IN data-1<a name="wp1039593"> </a>
</pre></div>
<a name="wp1039594"> </a><p class="pIndented1">
This is exactly equivalent to the more cumbersome:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
MODIFY grid-1, Y = 2, X = 3<a name="wp1039595"> </a>
INQUIRE grid-1, CELL-DATA IN data-1<a name="wp1039596"> </a>
</pre></div>
<a name="wp1039597"> </a><div class="pSmartList1"><li>When the runtime is storing data items, the rules for the MOVE statement are applied.  The source for the title is alphanumeric.  The type of control determines the source format of the value.  The source format for a property is either numeric or alphanumeric depending on the specific property.  </li></div>
<a name="wp1039598"> </a><div class="pSmartList1"><li>When used with an ActiveX control or COM object, INQUIRE gets the value of a property or gets the style flags.</li></div>
<a name="wp1039599"> </a><div class="pSmartList1"><li>When the PROPERTY phrase is used to set an ActiveX control or COM object, the runtime automatically converts parameters to the appropriate styles.</li></div>
<a name="wp1039601"> </a><div class="pSmartList1"><li>When the LENGTH option is specified, <em class="cEmphasis">length-1</em> gives you the exact number of characters that were placed by the control in <em class="cEmphasis">value</em> or <em class="cEmphasis">property-value</em>.  This option is useful in determining how long the logical data is in <em class="cEmphasis">value </em>or <em class="cEmphasis">property-value</em>, or if there are trailing spaces.  If, for example, you inquired the SELECTION-TEXT property in an entry-field and specified the LENGTH option, you could tell if the user's selection contains trailing spaces.  If you do not use the LENGTH option, your program will not distinguish between the trailing spaces in the selection and the trailing spaces added by the runtime. </li></div>
<a name="wp1039602"> </a><div class="pSmartList1"><li>The SYSTEM HANDLE phrase retrieves the host graphical system's handle that corresponds to the control and stores this value in <em class="cEmphasis">system-handle</em>.  This value is the way the host graphical system identifies the control.  You usually need it if you want to affect the control from some other language such as C.  There is no use for the host system's handle if you are using only ACUCOBOL-GT; the handle is useful only when you need to have another language interact with an ACUCOBOL-GT screen.  </li></div>
<a name="wp1039603"> </a><div class="pSmartList1"><li>Each host system defines its own technique for identifying graphical components.  Under Windows, the Windows API uses the &quot;HWND&quot; type, which is a 32-bit unsigned value.  You can use UNSIGNED-INT as an appropriate USAGE type for <em class="cEmphasis">system-handle</em> to cover these two cases portably.  </li></div>
<a name="wp1039605"> </a><div class="pSmartList1"><li>If the control does not have a corresponding host handle, then <em class="cEmphasis">system-handle</em> is set to zero.  This indicates that either the host system does not have an underlying graphical system, or that the particular control does not use the host's notion of a control in its implementation.  </li></div>
<a name="wp1039606"> </a><div class="pSmartList1"><li>The POP-UP MENU option returns the handle of the pop-up menu associated with the control in <em class="cEmphasis">menu-1</em>.  If the control has no pop-up menu, <em class="cEmphasis">menu-1</em> is set to NULL.  </li></div>
<a name="wp1039607"> </a><div class="pSmartList1"><li>The LINE NUMBER IN and COLUMN NUMBER IN phrases return the location of the control in <em class="cEmphasis">line-num </em>and <em class="cEmphasis">col-num</em> respectively.  The SIZE IN and LINES IN phrases return the dimensions of the control in <em class="cEmphasis">width</em> and <em class="cEmphasis">height</em> respectively.  These values have the same meaning and units that they have in a DISPLAY or MODIFY statement.  </li></div>
<a name="wp1095322"> </a><p class="pNoteList">
<hr />
<b>Note:  </b>In order for the LINES IN and SIZE IN phrases to return a value, the control must have been <em class="cEmphasis">created</em> with its LINE and SIZE dimensions specified.  Then the value returned is in the units used to create the control.  If the control was not given dimensions when it was created, the INQUIRE statement has no effect.
<hr />
</p>
<a name="wp1095323"> </a><div class="pSmartList1"><li>The MAX-HEIGHT, MAX-WIDTH, MIN-HEIGHT, and MIN-WIDTH phrases return the value of the control's current maximum and minimum size restrictions in <em class="cEmphasis">max-height</em>, <em class="cEmphasis">max-width</em>, <em class="cEmphasis">min-height</em>, and <em class="cEmphasis">min-width</em>, respectively.  These values have the same meaning and units that they have in a DISPLAY or MODIFY statement. </li></div>
<a name="wp1095324"> </a><div class="pSmartList1"><li>The ID IN phrase returns the control's ID if it has one.  If it does not (or the control does not exist), <em class="cEmphasis">id</em> is set to zero.  </li></div>
<a name="wp1039610"> </a><div class="pSmartList1"><li>The CLASS IN phrase returns the type of the control (label, entry field, etc).  This is coded as a unique number for each class.  The appropriate values can be found in the COPY library &quot;controls.def&quot;.  </li></div>
<a name="wp1081610"> </a><div class="pSmartList1"><li>The LAYOUT-DATA IN phrase sets <em class="cEmphasis">layout-data</em> to the current value of the control's LAYOUT-DATA property.  </li></div>
<a name="wp1039611"> </a><div class="pSmartList1"><li>The ENABLED IN phrase sets <em class="cEmphasis">enabled-state</em> to &quot;1&quot; if the control is enabled and &quot;0&quot; if the control is disabled.  </li></div>
<a name="wp1039612"> </a><div class="pSmartList1"><li>The VISIBLE IN phrase sets <em class="cEmphasis">visible-state</em> to &quot;1&quot; if the control is visible and &quot;0&quot; if it is invisible.  </li></div>
<a name="wp1039613"> </a><div class="pSmartList1"><li>You cannot use named parameters to avoid entering required parameters.  You can omit optional parameters only.</li></div>
<a name="wp1039614"> </a><div class="pSmartList1"><li>You must specify only unnamed parameters before the BY NAME clause, and only named parameters after the BY NAME clause.</li></div>
<a name="wp1039615"> </a><div class="pSmartList1"><li>You can use one- and two-dimensional COBOL tables as property and method parameters for use in COM SAFEARRAYs.   The runtime automatically converts the table to an COM SAFEARRAY, as long as it contains only one elementary item that is USAGE HANDLE or USAGE HANDLE OF VARIANT.  See section 4.3 in <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>.</li></div>
<a name="wp1162217"> </a><div class="pSmartList1"><li>Use the &quot;AS <em class="cEmphasis">type-num&quot;</em> phrase in the parameter expression if you want to force the parameter to be converted to a particular VARIANT type before it is passed to a property or method of an ActiveX control or COM object.  You can tell from the object's documentation and the name of the parameter whether the object expects a particular VARIANT type, such as boolean.  </li></div>
<a name="wp1162218"> </a><p class="pIndented1">
Use the AS phrase if the ActiveX or COM object requires a method or property parameter to be something different from the default VARIANT type chosen by the runtime for the particular COBOL data item or literal.  (See section 4.3 in <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em> for the rules that the runtime uses to determine the VARIANT type).  Specify the word &quot;AS&quot; followed by a numeric literal or level 78 numeric constant that indicates the variant type to which you want the parameter converted.  The &quot;activex.def&quot; COPY file in the ACUCOBOL-GT sample/def directory contains predefined level 78 constants for each of the VARIANT types. 
</p>
</ol></div>
<a name="wp1039616"> </a><h3 class="pHeadingRef">
Format 2 (INQUIRE WINDOW)
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1039617"> </a><div class="pSmartList1"><li>The INQUIRE WINDOW statement returns one or more attributes of the window identified by <em class="cEmphasis">window-handle</em> or <em class="cEmphasis">generic-handle</em>.  If the WINDOW phrase is used and <em class="cEmphasis">generic-handle</em> is omitted, information is retrieved from the current window.  </li></div>
<a name="wp1039618"> </a><div class="pSmartList1"><li>The LINE NUMBER and COLUMN NUMBER phrases return the position of the window relative to the interior of its parent.  For the initial window, this will always be line &quot;1&quot;, column &quot;1&quot;.  Note that the position returned can be negative, or larger than the parent window, indicating that the window's upper left corner is outside of its parent's interior.  </li></div>
<a name="wp1039619"> </a><div class="pSmartList1"><li>The TITLE phrase returns the title of the current window.</li></div>
<a name="wp1039620"> </a><div class="pSmartList1"><li>The SCREEN LINE and SCREEN COLUMN phrases return the position of the window on the screen.  This is an absolute position, not relative to any other window.  The position is expressed in the screen's base units, with &quot;1, 1&quot; being the upper left corner of the screen.  Screen base units are machine dependent.  Under character systems, the base unit is a character cell, for graphical systems, the base unit is a pixel.  A negative value indicates that the window's home location (the upper left corner) is off the screen.</li></div>
<a name="wp1039621"> </a><div class="pSmartList1"><li>The SIZE and LINES phrases return the window's width and height, respectively.  </li></div>
<a name="wp1039622"> </a><div class="pSmartList1"><li>The SYSTEM HANDLE phrase retrieves the host graphical system's handle that corresponds to the window and stores this value in <em class="cEmphasis">system-handle</em>.  This value is the way the host graphical system identifies the window.  You usually need it if you want to affect the window from some other language such as C.  There is no use for the host system's handle if you are using only ACUCOBOL-GT; the handle is useful only when you need to have another language interact with an ACUCOBOL-GT screen.  </li></div>
<a name="wp1039623"> </a><div class="pSmartList1"><li>Each host system defines its own technique for identifying graphical components.  Under Windows, the Windows API uses the &quot;HWND&quot; type, which is a 32-bit unsigned value.  You can use UNSIGNED-INT as an appropriate USAGE type for <em class="cEmphasis">system-handle</em> to cover these two cases portably.  </li></div>
<a name="wp1039624"> </a><div class="pSmartList1"><li>If the window does not have a corresponding host handle, then <em class="cEmphasis">system-handle</em> is set to zero.  This indicates that either the host system does not have an underlying graphical system, or that the particular window does not use the host's notion of a control in its implementation.  </li></div>
<a name="wp1081699"> </a><div class="pSmartList1"><li>The LAYOUT-MANAGER phrase sets <em class="cEmphasis">layout-manager</em> to the handle of the layout manager currently attached to the window. </li></div>
<a name="wp1039625"> </a><div class="pSmartList1"><li>The VISIBLE option returns in <em class="cEmphasis">visible-state</em> whether the window is visible or invisible.  <em class="cEmphasis">Visible-state</em> is set to &quot;1&quot; if the window is visible, or &quot;0&quot; if it is invisible.  </li></div>
<a name="wp1039626"> </a><p class="pNoteList">
<hr />
<b>Note:  </b>A &quot;visible&quot; window may actually be hidden behind other windows on the screen, and thus may not actually be viewable by the user.  
<hr />
</p>
<a name="wp1039627"> </a><div class="pSmartList1"><li>The POP-UP MENU option returns the handle of the pop-up menu associated with the window in <em class="cEmphasis">menu-1</em>.  If the window has no pop-up menu, <em class="cEmphasis">menu-1</em> is set to NULL.  </li></div>
</ol></div>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
