<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.5.1025" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/14/06 08:28:08" />
  <title>PROPERTY and Property-Name Phrases  </title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       ACUCOBOL-GT Reference Manual <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="gt36.htm"><br />Chapter 6:  Procedure Division</a> &gt; <a href="gt3621.htm">6.4  Common Statement Rules</a> &gt; <a href="gt3630.htm">6.4.9  Common Screen Options</a> &gt; </p>
<a name="wp1035416"> </a><h2 class="pHeading3">
PROPERTY and Property-Name Phrases  
</h2>
<div class="pPreformatted"><pre class="pPreformatted">
{ property-name          } {IS } <a name="wp1035417"> </a>
   { <em class="cEmphasis">prop-option </em>[GIVING result-1] }...<a name="wp1119979"> </a>
{ <u class="cUnderline">PROPERTY</u> property-type } {ARE} <a name="wp1035418"> </a>
{ method-name            } {=  } <a name="wp1035419"> </a>
{ object-expression      }<a name="wp1035420"> </a>
</pre></div>
<a name="wp1035421"> </a><p class="pBody">
where <em class="cEmphasis">prop-option</em> is one of the following:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
{ property-value [ <u class="cUnderline">LENGTH</u> {IS} length-1 ] }<a name="wp1035422"> </a>
{                         {= }            }<a name="wp1035423"> </a>
{                                         )<a name="wp1035424"> </a>
{ ( {property-value} ... )                }<a name="wp1035425"> </a>
{                                         }<a name="wp1035426"> </a>
{ { <u class="cUnderline">MULTIPLE</u> } property-table             }<a name="wp1035427"> </a>
{ { <u class="cUnderline">TABLE</u>    }                            }<a name="wp1035428"> </a>
{                                         }<a name="wp1035429"> </a>
{ parameter                               }<a name="wp1035430"> </a>
{                                         }<a name="wp1035431"> </a>
{ ( { parameter } ... )                   }<a name="wp1035432"> </a>
</pre></div>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1035433"> </a><div class="pSmartList1"><li>The PROPERTY phrase assigns a value to one of a control's <em class="cEmphasis">special</em> properties or invokes a control-specific <em class="cEmphasis">method</em>.  The PROPERTY phrase takes the types of only special properties and methods for controls (for a discussion of Common and Special properties, see section 5.1, Book 2, <em class="cEmphasis">ACUCOBOL-GT User Interface Programming;</em> for a discussion of Methods, see section 4.5 of that book).  Each type of control has its own set of special properties and methods.  These are described in the sections documenting each control type.  <em class="cEmphasis">Property-type</em> specifies which special property to modify or which method to invoke (each of a control's special properties and methods is uniquely identified by a number).  <em class="cEmphasis">Property-value</em> is the value to assign to that special property.  <em class="cEmphasis">Property-value</em> must be a data type that is appropriate for the specified property.  If <em class="cEmphasis">property-type</em> specifies a special property that does not exist, it is ignored for most control types.  If the control type is ACTIVE-X, then an exception is raised (for a discussion of the ActiveX control types, see section 5.3, Book 2, <em class="cEmphasis">ACUCOBOL-GT User Interface Programming</em>).  Each property's unique value is defined in the file &quot;controls.def&quot; or in the ActiveX control's COPY file.</li></div>
<a name="wp1035434"> </a><div class="pSmartList1"><li><em class="cEmphasis">Property-name</em> and <em class="cEmphasis">method-name</em> provide an alternate method for identifying which special property to modify or which method to invoke.  The compiler knows the names of the special properties and methods that belong to each control type.  In situations where the compiler knows which type of control is being acted upon, you can use the appropriate <em class="cEmphasis">property-name</em> or <em class="cEmphasis">method-name</em> directly instead of using the special property's or method's identifying number in the PROPERTY phrase.  </li></div>
<a name="wp1035435"> </a><p class="pIndented1">
For example, the MAX-TEXT special property of entry fields is property number &quot;1&quot;.  You can set the value of this property to &quot;10&quot; with either of the following phrases:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
PROPERTY 1 = 10<a name="wp1035436"> </a>
MAX-TEXT = 10<a name="wp1035437"> </a>
</pre></div>
<a name="wp1035438"> </a><p class="pIndented1">
The second method can be used only when your code makes it clear to the compiler that you're acting on an entry field.
</p>
<a name="wp1035439"> </a><p class="pIndented1">
You can use either the PROPERTY phrase or <em class="cEmphasis">method-name</em> to specify which method to invoke.  For example, the LoadFile method of the Microsoft Rich Textbox Control is  method number &quot;37&quot;. You can invoke this method with either of the  following phrases:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
PROPERTY 37 (&quot;myfile.rtf&quot;, rtfRtf)<a name="wp1035440"> </a>
LoadFile (&quot;myfile.rtf&quot;, rtfRtf)<a name="wp1035441"> </a>
</pre></div>
<a name="wp1035442"> </a><p class="pIndented1">
The second method can be used only when your code makes it clear to the compiler that you're acting on a Microsoft Rich Textbox Control.
</p>
<a name="wp1035443"> </a><div class="pSmartList1"><li>Some properties return specific values when set.  These values are placed in <em class="cEmphasis">result-1 </em>of the GIVING phrase.  The meaning of the value depends on the property being set; see the documentation for the specific property.  Properties that do not have a pre-defined return value set <em class="cEmphasis">result-1</em> to &quot;1&quot; if the property was set successfully, or &quot;0&quot; if not.  When a property is being given multiple values in a single assignment (for example: &quot;Display-Columns = (1, 10, 30)&quot;), then <em class="cEmphasis">result-1</em> is set in response to the last value assigned.</li></div>
<a name="wp1035444"> </a><div class="pSmartList1"><li>When multiple special property assignments are made in a single statement, those assignments are performed in the order listed in the statement.  </li></div>
<a name="wp1035445"> </a><div class="pSmartList1"><li>If more than one <em class="cEmphasis">property-value</em> is specified, each one is applied to the property in the order listed.  This is normally used for <em class="cEmphasis">cumulative</em> properties.  These are properties that perform some special action each time they have a value assigned to them.  For example, you can set three columns in a list box with &quot;DISPLAY-COLUMNS = ( 1, 20, 35&#160;)&quot;.  In the case of the DISPLAY-COLUMNS property, each time it is assigned a value, it sets a new column location.  Note that the parentheses are required.</li></div>
<a name="wp1035446"> </a><p class="pIndented1">
When you specify <em class="cEmphasis">property-table</em>, then each element of the table is assigned to the property.  The elements are assigned in ascending occurrence order.  For example, the following code fragment fills a list box with the names of three colors:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
01  COLOR-NAMES.<a name="wp1035447"> </a>
    03  PIC X(10) VALUE &quot;Red&quot;.<a name="wp1035448"> </a>
    03  PIC X(10) VALUE &quot;Green&quot;.<a name="wp1035449"> </a>
    03  PIC X(10) VALUE &quot;Blue&quot;.<a name="wp1035450"> </a>
<a name="wp1035451"> </a>
01  COLOR-TABLE REDEFINES COLOR-NAMES<a name="wp1035452"> </a>
    OCCURS 3 TIMES<a name="wp1035453"> </a>
    PIC X(10).<a name="wp1035454"> </a>
<a name="wp1035455"> </a>
PROCEDURE DIVISION.<a name="wp1035456"> </a>
MAIN-LOGIC.<a name="wp1035457"> </a>
    DISPLAY LIST-BOX, SIZE 10, LINES 3,<a name="wp1035458"> </a>
            ITEM-TO-ADD = TABLE COLOR-TABLE.<a name="wp1035459"> </a>
</pre></div>
<a name="wp1035460"> </a><p class="pNoteList">
<hr />
<b>Note:  </b>The current size of the table is used, so you can use OCCURS DEPENDING ON tables when you want to have a variable number of items in a table.  
<hr />
</p>
<a name="wp1035461"> </a><p class="pIndented1">
You should use caution when specifying property tables in the Screen Section.  Remember that each DISPLAY statement of a Screen Section item reloads all of that item's properties into the control.  This can be inefficient if the property table is large, and it can cause duplicate entries if you are not careful.  To avoid this, you can create your controls in the Screen Section, but use the MODIFY statement to set any table-oriented properties at the appropriate point in your program.  In this way, the tables are not referenced in the Screen Section and a DISPLAY will not cause those tables to be reprocessed.  
</p>
<a name="wp1035462"> </a><div class="pSmartList1"><li>When the LENGTH option is specified, <em class="cEmphasis">length-1</em> establishes the exact size of <em class="cEmphasis">property-value</em>.  The text value presented to the control must not contain trailing spaces or have trailing spaces added.  When you specify the LENGTH option, the control uses exactly the number of characters of <em class="cEmphasis">length-1</em>.  However, if <em class="cEmphasis">length-1</em> is a value larger than the size of the data item it is modifying, the size of the data item is used instead.  If <em class="cEmphasis">length-1</em> is negative, it is ignored and the default handling occurs.</li></div>
<a name="wp1035463"> </a><div class="pSmartList1"><li>{<em class="cEmphasis">parameter</em>}... is a list of parameters to pass when invoking one of a control's  methods or setting a multiple-parameter property.  When setting a multiple-parameter property, the first parameters identify which aspect of the property to set. The last parameter is the actual property value.  For example, to set the Microsoft Chart Control DataGrid::RowLabel property you must specify the row number and label index.  You could use the following phrase:</li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
DataGrid::RowLabel( ROW-NUMBER, ROW-LABEL-INDEX, <a name="wp1035464"> </a>
    &quot;My Row Label&quot; )<a name="wp1035465"> </a>
</pre></div>
<a name="wp1035466"> </a><div class="pSmartList1"><li><em class="cEmphasis">Object-expression</em> can only be used in the procedure division, not the screen section. It has the following format:</li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
{ {^} property-1 [ ( param-1 ... ) ]<a name="wp1035467"> </a>
  [ :: property-2 [ ( param-2 ... ) ] ]... }<a name="wp1035468"> </a>
</pre></div>
<a name="wp1152445"> </a><p class="pIndented1">
<em class="cEmphasis">Object-expression</em> specifies a property or method of an object referenced by another object.  This object in turn can be referenced by yet another object.  The &quot;root&quot; object can be an ActiveX control or COM object or a graphical control.  &quot;^&quot; can only be used in conjunction with Format 5 USE verb (see the documentation for the USE verb for more information).  <em class="cEmphasis">Property-1</em> is the name of a property of the ActiveX control or COM object.  <em class="cEmphasis">Property-1</em> must not be a write-only property.  <em class="cEmphasis">Property-2</em> is the name of a property of the ActiveX control or COM object which is the value of <em class="cEmphasis">property-1</em>.  <em class="cEmphasis">Property-2</em> must not be a write-only property.  <em class="cEmphasis">Param-1</em> and <em class="cEmphasis">param-2</em> are literals, data items or numeric expressions. <em class="cEmphasis">Param-1</em> is the first parameter passed when getting the value of <em class="cEmphasis">property-1</em> and <em class="cEmphasis">param-2</em> is the first parameter passed when getting the value of <em class="cEmphasis">property-2</em>.  
</p>
<a name="wp1035470"> </a><p class="pIndented1">
For example, to set the Microsoft Chart Control legend, you get the value of the Legend property. This value is an object that you may then modify to change the legend. The Legend object has properties whose values are other objects, and so on. The following phrases set properties and invoke methods of the Microsoft Chart Legend object:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
Legend::Location::Visible = 1<a name="wp1035471"> </a>
Legend::Location::LocationType = VtChLocationTypeRight<a name="wp1035472"> </a>
Legend::TextLayout::HorzAlignment = <a name="wp1035473"> </a>
           VtHorizontalAlignmentRight<a name="wp1035474"> </a>
Legend::VtFont::VtColor::Set (255, 255, 0)<a name="wp1035475"> </a>
Legend::BackDrop::Fill::Style = VtFillStyleBrush<a name="wp1035476"> </a>
Legend::BackDrop::Fill::Brush::Style = VtBrushStyleSolid<a name="wp1035477"> </a>
Legend::BackDrop::Fill::Brush::FillColor::Set (255, 0, 255)<a name="wp1035478"> </a>
</pre></div>
<a name="wp1035479"> </a><p class="pIndented1">
or assuming the handle to the Microsoft Chart Control is MS-CHART-1:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
USE MS-CHART-1 Legend<a name="wp1035480"> </a>
      MODIFY ^Location::Visible = 1<a name="wp1035481"> </a>
         ^Location::LocationType = VtChLocationTypeRight<a name="wp1035482"> </a>
         ^TextLayout::HorzAlignment = <a name="wp1035483"> </a>
               VtHorizontalAlignmentRight<a name="wp1035484"> </a>
         ^VtFont::VtColor::Set ( 255, 255, 0 ).<a name="wp1035485"> </a>
USE MS-CHART-1 Legend::BackDrop::Fill<a name="wp1035486"> </a>
      MODIFY ^Style = VtFillStyleBrush<a name="wp1035487"> </a>
         ^Brush::Style = VtBrushStyleSolid<a name="wp1035488"> </a>
         ^Brush::FillColor::Set ( 255, 0, 255 ).<a name="wp1035489"> </a>
</pre></div>
</ol></div>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
