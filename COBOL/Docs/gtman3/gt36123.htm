<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.5.1025" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/14/06 08:28:08" />
  <title>MODIFY Statement</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       ACUCOBOL-GT Reference Manual <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="gt36.htm"><br />Chapter 6:  Procedure Division</a> &gt; <a href="gt3678.htm">6.6  Procedure Division Statements </a> &gt; </p>
<a name="wp1040262"> </a><h2 class="pHeading2">
MODIFY Statement
</h2>
<a name="wp1040267"> </a><p class="pBody">
The MODIFY verb is used to change the characteristics of an existing screen control item or window.  It acts on control handles, elementary Screen Section control items, and window handles. 
</p>
<a name="wp1040269"> </a><h3 class="pHeadingRef">
General Format
</h3>
<a name="wp1040270"> </a><h3 class="pHeadingRef">
Format 1
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">MODIFY</u> {control-item} [ ( {index-1} ... ) ]<a name="wp1040271"> </a>
       {<u class="cUnderline">CONTROL</u>     }<a name="wp1040272"> </a>
</pre></div>
<a name="wp1040273"> </a><p class="pBody">
Remaining phrases are optional, can appear in any order.
</p>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">AT</u> screen-loc   [<u class="cUnderline">CELL</u>  ]<a name="wp1040274"> </a>
                [<u class="cUnderline">CELLS</u> ]<a name="wp1040275"> </a>
                [<u class="cUnderline">PIXEL</u> ]<a name="wp1040276"> </a>
                [<u class="cUnderline">PIXELS</u>]<a name="wp1040277"> </a>
<a name="wp1040278"> </a>
AT <u class="cUnderline">LINE</u> NUMBER line-num   [<u class="cUnderline">CELL</u>  ]<a name="wp1040279"> </a>
                          [<u class="cUnderline">CELLS</u> ]<a name="wp1040280"> </a>
                          [<u class="cUnderline">PIXEL</u> ]<a name="wp1040281"> </a>
                          [<u class="cUnderline">PIXELS</u>]<a name="wp1040282"> </a>
<a name="wp1040283"> </a>
AT {<u class="cUnderline">COLUMN</u>  } NUMBER col-num   [<u class="cUnderline">CELL</u>  ]<a name="wp1040284"> </a>
   {<u class="cUnderline">COL</u>     }                  [<u class="cUnderline">CELLS</u> ]<a name="wp1040285"> </a>
   {<u class="cUnderline">POSITION</u>}                  [<u class="cUnderline">PIXEL</u> ]<a name="wp1040286"> </a>
   {<u class="cUnderline">POS</u>     }                  [<u class="cUnderline">PIXELS</u>]<a name="wp1040287"> </a>
<a name="wp1040288"> </a>
AT <u class="cUnderline">CLINE</u> NUMBER cline-num [CELL ]<a name="wp1040289"> </a>
                          [CELLS]<a name="wp1040290"> </a>
<a name="wp1040291"> </a>
AT <u class="cUnderline">CCOL</u> NUMBER ccol-num [CELL ]<a name="wp1040292"> </a>
                        [CELLS]<a name="wp1040293"> </a>
<a name="wp1040294"> </a>
<u class="cUnderline">SIZE</u>    {IS} length  [<u class="cUnderline">CELL</u>  ]<a name="wp1040295"> </a>
        {= }         [<u class="cUnderline">CELLS </u>]<a name="wp1040296"> </a>
                     [<u class="cUnderline">PIXEL</u> ]<a name="wp1040297"> </a>
                     [<u class="cUnderline">PIXELS</u>]<a name="wp1040298"> </a>
<a name="wp1040299"> </a>
<u class="cUnderline">LINES</u>   {IS} height  [<u class="cUnderline">CELL</u>  ]<a name="wp1040300"> </a>
        {= }         [<u class="cUnderline">CELLS</u> ]<a name="wp1040301"> </a>
                     [<u class="cUnderline">PIXEL</u> ]<a name="wp1040302"> </a>
                     [<u class="cUnderline">PIXELS</u>]<a name="wp1040303"> </a>
<a name="wp1040304"> </a>
<u class="cUnderline">CSIZE</u>   {IS} clength  [<u class="cUnderline">CELL</u> ]<a name="wp1040305"> </a>
        {= }          [<u class="cUnderline">CELLS</u>]<a name="wp1040306"> </a>
<a name="wp1040307"> </a>
<u class="cUnderline">CLINES</u>  {IS} cheight  [<u class="cUnderline">CELL</u> ]<a name="wp1040308"> </a>
        {= }          [<u class="cUnderline">CELLS</u>]<a name="wp1040309"> </a>
<a name="wp1040310"> </a>
<u class="cUnderline">MAX-HEIGHT</u> {IS} max-height<a name="wp1095354"> </a>
           {= }<a name="wp1095355"> </a>
<a name="wp1095356"> </a>
<u class="cUnderline">MAX-WIDTH</u>  {IS} max-width<a name="wp1095357"> </a>
           {= }<a name="wp1095358"> </a>
<a name="wp1095359"> </a>
<u class="cUnderline">MIN-HEIGHT</u> {IS} min-height<a name="wp1095360"> </a>
           {= }<a name="wp1095361"> </a>
<a name="wp1095362"> </a>
<u class="cUnderline">MIN-WIDTH</u>  {IS} min-width<a name="wp1095363"> </a>
           {= }<a name="wp1095364"> </a>
<a name="wp1095365"> </a>
<u class="cUnderline">TITLE</u> {IS} title<a name="wp1040311"> </a>
      {= }<a name="wp1040312"> </a>
<a name="wp1191532"> </a>
{<u class="cUnderline">COLOR</u> } IS color-val<a name="wp1040313"> </a>
{<u class="cUnderline">COLOUR</u>}<a name="wp1040314"> </a>
<a name="wp1040315"> </a>
{<u class="cUnderline">FOREGROUND-COLOR</u> } IS fg-color<a name="wp1040316"> </a>
{<u class="cUnderline">FOREGROUND-COLOUR</u>}<a name="wp1040317"> </a>
<a name="wp1040318"> </a>
{<u class="cUnderline">BACKGROUND-COLOR</u> } IS bg-color<a name="wp1040319"> </a>
{<u class="cUnderline">BACKGROUND-COLOUR</u>}<a name="wp1040320"> </a>
<a name="wp1040321"> </a>
{<u class="cUnderline">HIGHLIGHT</u>}<a name="wp1040322"> </a>
{<u class="cUnderline">HIGH</u>     }<a name="wp1040323"> </a>
{<u class="cUnderline">BOLD</u>     }<a name="wp1040324"> </a>
{<u class="cUnderline">LOWLIGHT</u> }<a name="wp1040325"> </a>
{<u class="cUnderline">LOW</u>      }<a name="wp1040326"> </a>
{<u class="cUnderline">STANDARD</u> }<a name="wp1040327"> </a>
<a name="wp1040328"> </a>
{<u class="cUnderline">BACKGROUND-HIGH</u>}<a name="wp1040329"> </a>
{<u class="cUnderline">BACKGROUND-LOW</u>}<a name="wp1040330"> </a>
{<u class="cUnderline">BACKGROUND-STANDARD</u>}<a name="wp1040331"> </a>
<a name="wp1040332"> </a>
<u class="cUnderline">STYLE</u> {IS} style-flags<a name="wp1040334"> </a>
      {= }<a name="wp1040335"> </a>
<a name="wp1040336"> </a>
{ [<u class="cUnderline">NOT</u>] style-name } ...<a name="wp1040337"> </a>
<a name="wp1040338"> </a>
<u class="cUnderline">VALUE</u> {IS} [ <u class="cUnderline">MULTIPLE</u> ] value [ <u class="cUnderline">LENGTH</u> {IS} length-1 ]<a name="wp1040339"> </a>
      {= } [ <u class="cUnderline">TABLE</u>    ]                {= }<a name="wp1040340"> </a>
<a name="wp1040341"> </a>
<u class="cUnderline">LAYOUT-DATA</u> {IS} layout-data<a name="wp1081715"> </a>
            {= }<a name="wp1081716"> </a>
<a name="wp1081717"> </a>
<u class="cUnderline">FONT</u>  {IS} font-handle<a name="wp1040342"> </a>
      {= }<a name="wp1040343"> </a>
<a name="wp1040344"> </a>
<u class="cUnderline">ENABLED</u>  {IS} {<u class="cUnderline">TRUE</u>         }<a name="wp1040345"> </a>
         {= } {<u class="cUnderline">FALSE</u>        }<a name="wp1040346"> </a>
              {enabled-state}<a name="wp1040347"> </a>
<a name="wp1040348"> </a>
<u class="cUnderline">VISIBLE</u>  {IS} {<u class="cUnderline">TRUE</u>         }<a name="wp1040349"> </a>
         {= } {<u class="cUnderline">FALSE</u>        }<a name="wp1040350"> </a>
              {visible-state}<a name="wp1040351"> </a>
<a name="wp1040352"> </a>
POP-UP <u class="cUnderline">MENU</u> {IS} {menu-1}<a name="wp1040353"> </a>
            {= } {<u class="cUnderline">NULL</u>  }<a name="wp1040354"> </a>
<a name="wp1171031"> </a>
<u class="cUnderline">EVENT-LIST</u>    {IS} ( event-value { event-value ... } )<a name="wp1171000"> </a>
              {= }<a name="wp1171001"> </a>
<a name="wp1171002"> </a>
<u class="cUnderline">AX-EVENT-LIST</u> {IS} ( ax-event-value { ax-event-value ... } )<a name="wp1171003"> </a>
              {= }<a name="wp1171004"> </a>
<a name="wp1171005"> </a>
<u class="cUnderline">EXCLUDE-EVENT-LIST</u> {IS} list-state<a name="wp1171006"> </a>
                   {= }<a name="wp1171007"> </a>
<a name="wp1040355"> </a>
<u class="cUnderline">EVENT</u> PROCEDURE IS { proc-1 [ {<u class="cUnderline">THROUGH</u>} proc-2 ] }<a name="wp1040356"> </a>
                              {<u class="cUnderline">THRU</u>   }<a name="wp1040357"> </a>
                   { <u class="cUnderline">NULL</u>                        }<a name="wp1040358"> </a>
<a name="wp1040359"> </a>
{ property-name          } {IS } { <em class="cEmphasis">prop-option </em><a name="wp1040360"> </a>
                                     [GIVING result-1] }...<a name="wp1124666"> </a>
{ <u class="cUnderline">PROPERTY</u> property-type } {ARE} <a name="wp1040361"> </a>
{ method-name            } {=  } <a name="wp1040362"> </a>
{ object-expression      }<a name="wp1040363"> </a>
</pre></div>
<a name="wp1040364"> </a><p class="pBody">
<em class="cEmphasis">prop-option</em> is one of the following:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
{ property-value [ <u class="cUnderline">LENGTH</u> {IS} length-1 ] }<a name="wp1040365"> </a>
{                         {= }            }<a name="wp1040366"> </a>
{                                         )<a name="wp1040367"> </a>
{ ( {property-value} ... )                }<a name="wp1040368"> </a>
{                                         }<a name="wp1040369"> </a>
{ { <u class="cUnderline">MULTIPLE</u> } property-table             }<a name="wp1040370"> </a>
{ { <u class="cUnderline">TABLE</u>    }                            }<a name="wp1040371"> </a>
{                                         }<a name="wp1040372"> </a>
{ <em class="cEmphasis">parameter-expression</em>                  }<a name="wp1040373"> </a>
{                                         }<a name="wp1040374"> </a>
{ ( { <em class="cEmphasis">parameter-expression</em> } ... )      }<a name="wp1040375"> </a>
</pre></div>
<a name="wp1040376"> </a><p class="pBody">
<em class="cEmphasis">parameter-expression</em> is one of the following:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
{ parameter                               } [ <u class="cUnderline">AS</u> type-num ]<a name="wp1040377"> </a>
{                                         }<a name="wp1040378"> </a>
{ {BY} <u class="cUnderline">NAME</u> parameter-name {IS} parameter }<a name="wp1040379"> </a>
{                          {= }           }<a name="wp1040380"> </a>
{ parameter-name {IS} parameter           }<a name="wp1040381"> </a>
{                {= }                     }<a name="wp1040382"> </a>
</pre></div>
<a name="wp1162511"> </a><p class="pBody">
<em class="cEmphasis">object-expression</em> has the following format:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
{ {^} property-1 [ (param-expr ... ) ]<a name="wp1162512"> </a>
  [ :: property-2 [ ( param-expr ... ) ] ... }<a name="wp1162513"> </a>
</pre></div>
<a name="wp1040383"> </a><h3 class="pHeadingRef">
Format 2
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">MODIFY</u> {window-handle           }<a name="wp1040384"> </a>
       {<u class="cUnderline">WINDOW</u> [generic-handle] }<a name="wp1040385"> </a>
</pre></div>
<a name="wp1040386"> </a><p class="pBody">
Remaining phrases are optional, can appear in any order.
</p>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">AT</u> screen-loc<a name="wp1040387"> </a>
<a name="wp1040388"> </a>
<u class="cUnderline">LINE</u> NUMBER line-num<a name="wp1040389"> </a>
<a name="wp1040390"> </a>
{<u class="cUnderline">COLUMN</u>  } NUMBER col-num<a name="wp1040391"> </a>
{<u class="cUnderline">COL</u>     }<a name="wp1040392"> </a>
{<u class="cUnderline">POSITION</u>}<a name="wp1040393"> </a>
{<u class="cUnderline">POS</u>     }<a name="wp1040394"> </a>
<a name="wp1040395"> </a>
<u class="cUnderline">SCREEN</u> <u class="cUnderline">LINE</u> NUMBER screen-line<a name="wp1040396"> </a>
<a name="wp1040397"> </a>
<u class="cUnderline">SCREEN</u> {<u class="cUnderline">COLUMN</u>  } NUMBER screen-col<a name="wp1040398"> </a>
       {<u class="cUnderline">COL</u>     }<a name="wp1040399"> </a>
       {<u class="cUnderline">POSITION</u>}<a name="wp1040400"> </a>
       {<u class="cUnderline">POS</u>     }<a name="wp1040401"> </a>
<a name="wp1040402"> </a>
<u class="cUnderline">SIZE</u> width<a name="wp1040403"> </a>
<a name="wp1040404"> </a>
<u class="cUnderline">LINES</u> height<a name="wp1040405"> </a>
<a name="wp1040406"> </a>
<u class="cUnderline">TITLE</u> title<a name="wp1040407"> </a>
<a name="wp1040408"> </a>
ON <u class="cUnderline">EXCEPTION</u> statement-1<a name="wp1040409"> </a>
<a name="wp1040410"> </a>
<u class="cUnderline">NOT</u> ON <u class="cUnderline">EXCEPTION</u> statement-2<a name="wp1040411"> </a>
<a name="wp1040412"> </a>
<u class="cUnderline">LAYOUT-MANAGER</u> {IS} manager<a name="wp1081728"> </a>
               {= }<a name="wp1081729"> </a>
<a name="wp1081732"> </a>
<u class="cUnderline">VISIBLE</u>  {IS} {<u class="cUnderline">TRUE</u>         }<a name="wp1040413"> </a>
         {= } {<u class="cUnderline">FALSE</u>        }<a name="wp1040414"> </a>
              {visible-state}<a name="wp1040415"> </a>
<a name="wp1040416"> </a>
<u class="cUnderline">POP-UP</u> <u class="cUnderline">MENU</u> {IS} {menu-1}<a name="wp1040417"> </a>
            {= } {<u class="cUnderline">NULL</u>  }<a name="wp1040418"> </a>
<a name="wp1113368"> </a>
<u class="cUnderline">ENABLED</u>  {IS} {<u class="cUnderline">TRUE</u>         }<a name="wp1113369"> </a>
         {= } {<u class="cUnderline">FALSE</u>        }<a name="wp1113370"> </a>
              {enabled-state}<a name="wp1113371"> </a>
<a name="wp1040419"> </a>
<u class="cUnderline">EVENT</u> PROCEDURE IS { proc-1 [ {<u class="cUnderline">THROUGH</u>} proc-2 ] }<a name="wp1040420"> </a>
                              {<u class="cUnderline">THRU</u>   }<a name="wp1040421"> </a>
                   { <u class="cUnderline">NULL</u>                        }<a name="wp1040422"> </a>
<a name="wp1040423"> </a>
ACTION  {IS} action<a name="wp1040424"> </a>
        {= }<a name="wp1040425"> </a>
<a name="wp1040426"> </a>
END-MODIFY<a name="wp1040427"> </a>
</pre></div>
<a name="wp1040429"> </a><h3 class="pHeadingRef">
Syntax Rules
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1040430"> </a><div class="pSmartList1"><li><em class="cEmphasis">Control-item </em>is a USAGE HANDLE data item or elementary Screen Section item that describes a control.  </li></div>
<a name="wp1040431"> </a><div class="pSmartList1"><li><em class="cEmphasis">Index-1</em> is a numeric expression.  The parentheses surrounding <em class="cEmphasis">index-1</em> are required.</li></div>
<a name="wp1040432"> </a><div class="pSmartList1"><li><em class="cEmphasis">Window-handle</em> is a USAGE HANDLE OF WINDOW or PIC X(10) data item.  </li></div>
<a name="wp1040433"> </a><div class="pSmartList1"><li><em class="cEmphasis">Generic-handle</em> is a USAGE HANDLE, HANDLE OF WINDOW or PIC X(10) data item.  </li></div>
<a name="wp1040434"> </a><div class="pSmartList1"><li><em class="cEmphasis">Screen-loc</em> is an integer data item or literal that contains exactly 4, 6, or 8 digits, or a group item of 4, 6, or 8 characters.  </li></div>
<a name="wp1040435"> </a><div class="pSmartList1"><li><em class="cEmphasis">Line-num</em>, <em class="cEmphasis">col-num, cline-num, ccol-num, length, height, width, clength, </em>and<em class="cEmphasis"> cheight </em>are numeric data items or literals.  They can be non-integer values, except when pixels are specified.</li></div>
<a name="wp1040436"> </a><div class="pSmartList1"><li><em class="cEmphasis">Screen-line</em> and <em class="cEmphasis">screen-col</em> are numeric expressions.  They should be integer values.  </li></div>
<a name="wp1040437"> </a><div class="pSmartList1"><li>If the CELLS option is used with either the SIZE or CSIZE phrase, then it must be present in both phrases if both are specified.  The same is true for use of the CELLS option in the LINES and CLINES phrases.  </li></div>
<a name="wp1095639"> </a><div class="pSmartList1"><li><em class="cEmphasis">Max-height</em>, <em class="cEmphasis">max-width</em>, <em class="cEmphasis">min-height</em>, and <em class="cEmphasis">min-width</em> are numeric data items, literals, or expressions.</li></div>
<a name="wp1040438"> </a><div class="pSmartList1"><li><em class="cEmphasis">Color-val</em> is an integer data item or literal.  </li></div>
<a name="wp1040439"> </a><div class="pSmartList1"><li><em class="cEmphasis">Fg-color</em> and <em class="cEmphasis">bg-color</em> are integer literals or numeric data items.  They may be arithmetic expressions.  See <a  href="gt3630.htm#wp1034866">section 6.4.9</a>, &quot;FOREGROUND-COLOR and BACKGROUND-COLOR Phrases&quot;, for a more detailed discussion of color settings and values. </li></div>
<a name="wp1040441"> </a><div class="pSmartList1"><li>If you use the AT phrase, you may not use the LINE, COLUMN, SCREEN LINE, or SCREEN COLUMN phrases.</li></div>
<a name="wp1040442"> </a><div class="pSmartList1"><li>The SCREEN LINE and SCREEN COLUMN phrases must be used together.  If used, the AT, LINE, and COLUMN phrases may not be used.  </li></div>
<a name="wp1040443"> </a><div class="pSmartList1"><li>If the COLOR phrase is specified, neither the FOREGROUND-COLOR nor the BACKGROUND-COLOR phrase may be specified.</li></div>
<a name="wp1040444"> </a><div class="pSmartList1"><li><em class="cEmphasis">Style-flags</em> is a numeric expression.  </li></div>
<a name="wp1040445"> </a><div class="pSmartList1"><li><em class="cEmphasis">Style-name</em> is the name of a style associated with the class of control being described.  The <em class="cEmphasis">style-name</em> phrase adds the named style to the control.  If <em class="cEmphasis">control-handle</em> refers to a generic handle, or if the CONTROL phrase is used, you may not use the <em class="cEmphasis">style-name</em> phrase.  Use the STYLE phrase instead.  If the NOT option is used with the <em class="cEmphasis">style-name</em> phrase, the named style is removed from the control instead.  When a style is added, any conflicting styles are removed first.  For example, if you add the FRAMED style to a button, then the UNFRAMED style is removed first.</li></div>
<a name="wp1040446"> </a><div class="pSmartList1"><li><em class="cEmphasis">Value</em> is a literal or data item.  If the MULTIPLE option is specified, then <em class="cEmphasis">value</em> must be a one-dimensional table.  In this case, <em class="cEmphasis">value</em> is not subscripted.  </li></div>
<a name="wp1040447"> </a><div class="pSmartList1"><li><em class="cEmphasis">Length-1</em> is a numeric literal or data item.  The LENGTH phrase may be specified only if the <em class="cEmphasis">value</em> or <em class="cEmphasis">property-value</em> immediately preceding it is an alphanumeric literal or data item, and not a figurative constant.  In addition, the MULTIPLE option may not be specified along with the LENGTH phrase.</li></div>
<a name="wp1040448"> </a><div class="pSmartList1"><li><em class="cEmphasis">Title</em> is an alphanumeric literal or data item.  </li></div>
<a name="wp1081758"> </a><div class="pSmartList1"><li><em class="cEmphasis">Layout-data</em> is an integer literal, data item, or expression.</li></div>
<a name="wp1081761"> </a><div class="pSmartList1"><li><em class="cEmphasis">Manager</em> is a USAGE HANDLE or HANDLE OF LAYOUT-MANAGER data item that contains a valid reference to a layout manager.</li></div>
<a name="wp1040449"> </a><div class="pSmartList1"><li><em class="cEmphasis">Font-handle</em> is a USAGE HANDLE data item that identifies a font.</li></div>
<a name="wp1040450"> </a><div class="pSmartList1"><li><em class="cEmphasis">Enabled-state</em> and <em class="cEmphasis">visible-state</em> are integer numeric literals or data items.</li></div>
<a name="wp1040451"> </a><div class="pSmartList1"><li><em class="cEmphasis">Menu-1</em> is a USAGE HANDLE or HANDLE OF MENU data item.</li></div>
<a name="wp1171121"> </a><div class="pSmartList1"><li><em class="cEmphasis">Event-value</em> and <em class="cEmphasis">ax-event-value</em> are numeric literals or data items that identify an event type.  List elements must be enclosed by parentheses. Elements must be separated by a space.  If the list contains a single element, the parentheses can be omitted.</li></div>
<a name="wp1171122"> </a><div class="pSmartList1"><li><em class="cEmphasis">List-state</em> is an integer literal or numeric data item.  Valid values are &quot;0&quot; and &quot;1&quot;.</li></div>
<a name="wp1040452"> </a><div class="pSmartList1"><li><em class="cEmphasis">Proc-1</em> and <em class="cEmphasis">proc-2</em> are procedure names.  </li></div>
<a name="wp1040453"> </a><div class="pSmartList1"><li>You must allow recursive paragraphs in order to specify the EVENT PROCEDURE phrase.  Compiling for recursive paragraphs is allowed by default, but you can turn it off if you use the &quot;-Zr0&quot; option.</li></div>
<a name="wp1040454"> </a><div class="pSmartList1"><li><em class="cEmphasis">Property-name</em> is the name of a property specific to the type of control being referenced.  If the type of control is unknown to the compiler (as in a &quot;DISPLAY OBJECT object-1&quot; statement), then <em class="cEmphasis">property-name</em> may not be used.  You must use the PROPERTY <em class="cEmphasis">property-type</em> option instead.  </li></div>
<a name="wp1040455"> </a><div class="pSmartList1"><li><em class="cEmphasis">Property-type </em>is a numeric literal or data item.  It identifies the property to modify.  The numeric values that identify the various control properties can be found in the COPY library &quot;controls.def&quot;. </li></div>
<a name="wp1162531"> </a><div class="pSmartList1"><li><em class="cEmphasis">Method-name</em> is the name of method specific to the type of ActiveX control or COM object being referenced. If the type of the control or object is unknown to the compiler, then <em class="cEmphasis">method-name</em> cannot be used. You must use the PROPERTY property-type option instead.</li></div>
<a name="wp1040465"> </a><div class="pSmartList1"><li><em class="cEmphasis">Property-value</em> is a literal or data item.  In the Procedure Division, <em class="cEmphasis">property-value</em> may also be a numeric expression (however, only the first <em class="cEmphasis">property-value</em> in a phrase may be an expression, subsequent values must be literals or data items).  Note that the parentheses are required.  </li></div>
<a name="wp1040466"> </a><div class="pSmartList1"><li><em class="cEmphasis">Property-table</em> is a data item that appears in a one-dimensional table.  No index should be specified.  </li></div>
<a name="wp1040467"> </a><div class="pSmartList1"><li><em class="cEmphasis">Result-1</em> is a numeric data item.</li></div>
<a name="wp1164355"> </a><div class="pSmartList1"><li>In <em class="cEmphasis">parameter-expression</em>:</li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1164356"> </a><div class="pSmartList2"><li><em class="cEmphasis">Parameter</em> is a literal, data-item, or numeric expression used when invoking methods or setting properties of an ActiveX control or COM object.</li></div>
<a name="wp1164357"> </a><div class="pSmartList2"><li><em class="cEmphasis">Type-num</em> is a numeric data item or numeric literal.</li></div>
</ol></div>
<a name="wp1164358"> </a><div class="pSmartList1"><li>In<em class="cEmphasis"> object-expression</em>:</li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1164359"> </a><div class="pSmartList2"><li>^ can only be used in conjunction with a Format 5 USE verb for an ActiveX control or COM object.</li></div>
<a name="wp1164360"> </a><div class="pSmartList2"><li><em class="cEmphasis">Property-1</em> is the name of a property of the ActiveX control or COM object. <em class="cEmphasis"> Property-1</em> cannot be a write-only property.</li></div>
<a name="wp1164361"> </a><div class="pSmartList2"><li><em class="cEmphasis">Property-2</em> is the name of a property of the ActiveX control or COM object that is the value of <em class="cEmphasis">property-1</em>.  <em class="cEmphasis">Property-2</em> cannot be a write-only property.</li></div>
</ol></div>
<a name="wp1040468"> </a><div class="pSmartList1"><li><em class="cEmphasis">Statement-1</em> and <em class="cEmphasis">statement-2</em> are imperative statements.</li></div>
<a name="wp1040469"> </a><div class="pSmartList1"><li><em class="cEmphasis">Action</em> is a numeric literal or a data item.</li></div>
</ol></div>
<a name="wp1040471"> </a><h3 class="pHeadingRef">
General Rules
</h3>
<a name="wp1040472"> </a><h3 class="pHeadingRef">
Format 1 (MODIFY CONTROL)
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1040473"> </a><div class="pSmartList1"><li>A Format 1 MODIFY statement updates an existing control or invokes a method on an ActiveX control, COM object, or .NET control (also known as an assembly).  <em class="cEmphasis">Control-item</em> should contain a handle returned by a DISPLAY Control-Type statement, or the name of an elementary Screen Section control item.  If <em class="cEmphasis">control-item</em> does not refer to a valid control, the MODIFY statement has no effect.  Note that controls referenced in the Screen Section are not valid until they have been created via a DISPLAY statement.  If <em class="cEmphasis">control-item</em> refers to a valid control, the effect of the statement is to update the specified properties of the control and to redisplay it.  </li></div>
<a name="wp1040474"> </a><div class="pSmartList1"><li>If <em class="cEmphasis">index-1</em> is specified, then certain properties in the control being modified are changed to match the value of <em class="cEmphasis">index-1</em>.  This occurs before any modification occurs.  The exact set of properties changed by the <em class="cEmphasis">index-1</em> depends on the control's type.  Currently, two controls have properties that are changed in this way:</li></div>
<a name="wp1040475"> </a><p class="pBodyRelative">
   <div>
<table border="1" cellpadding="2" cellspacing="2">
  <caption></caption>
  <tr align="left" valign="top">    <th><a name="wp1057477"> </a>
Control Type

</th>
    <th><a name="wp1057479"> </a>
Properties Affected

</th>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1057481"> </a><p class="pCellBody">
List Box
</p>
</td>
    <td><a name="wp1057483"> </a><p class="pCellBody">
QUERY-INDEX
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1057485"> </a><p class="pCellBody">
Grid
</p>
</td>
    <td><a name="wp1057487"> </a><p class="pCellBody">
Y, X
</p>
</td>
</tr>
</table>
</div>

</p>
<a name="wp1040490"> </a><p class="pIndented1">
Each occurrence of <em class="cEmphasis">index-1</em> changes one property.  The first occurrence changes the first property in the list presented in the preceding table.  The second occurrence changes the second property.  For example, the statement fragment
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
MODIFY grid-1(2, 3), color is red<a name="wp1040491"> </a>
</pre></div>
<a name="wp1040492"> </a><p class="pIndented1">
would have the effect of setting the grid property &quot;Y&quot; to &quot;2&quot; and &quot;X&quot; to &quot;3&quot; before changing the cell color to red.  
</p>
<a name="wp1040493"> </a><p class="pIndented1">
Supplying more index values than the control supports has no additional effect.  You may omit trailing indexes; this leaves the corresponding properties unchanged.  
</p>
<a name="wp1040494"> </a><p class="pIndented1">
This feature can be used to simplify modification of specific elements of controls that hold multiple values.  For example, you can modify the contents of row 2, column 3 in a grid with the statement:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
MODIFY grid-1(2, 3), CELL-DATA = data-1<a name="wp1040495"> </a>
</pre></div>
<a name="wp1040496"> </a><p class="pIndented1">
This is exactly equivalent to the more cumbersome:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
MODIFY grid-1, Y = 2, X = 3<a name="wp1040497"> </a>
MODIFY grid-1, CELL-DATA = data-1<a name="wp1040498"> </a>
</pre></div>
<a name="wp1040499"> </a><div class="pSmartList1"><li>The meaning of each of the phrases is the same as for a Format 14 DISPLAY statement.  Note that you can move a control by changing its row or column property.  </li></div>
<a name="wp1040500"> </a><div class="pSmartList1"><li>MODIFY simply locates the corresponding control and makes the specified modifications.  This process does not examine any phrases specified in the Screen Section.</li></div>
<a name="wp1040501"> </a><p class="pIndented1">
This capability is particularly convenient when you want to make one or two changes to a Screen Section control.  For example, if you want to add an item to a list box, you can simply modify the list box specifying the &quot;item-to-add&quot; property.  For example:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
* Screen Section<a name="wp1040503"> </a>
01  list-box-1, list-box, value list-item, line 5,<a name="wp1040504"> </a>
       column 15, size 20, lines 6.<a name="wp1124667"> </a>
<a name="wp1040505"> </a>
* Procedure Division<a name="wp1040506"> </a>
modify list-box-1, item-to-add = new-list-item.<a name="wp1040507"> </a>
</pre></div>
<a name="wp1040508"> </a><p class="pIndented1">
By using the MODIFY verb, you do not need to specify an &quot;item-to-add&quot; property in the Screen Section, and thus you do not need to closely manage the &quot;item-to-add&quot; variable.  
</p>
<a name="wp1040509"> </a><div class="pSmartList1"><li>If the CONTROL phrase is used, the runtime modifies the control located at the screen position specified by the AT, LINE, and COLUMN phrases in the current window (on non-graphical systems, the CLINE and CCOL phrases also apply).  The runtime maintains a list of controls in each window.  When attempting to modify a control at a specific location, the runtime searches this list, using the first control it finds that exactly matches the location.  The list is maintained in the order in which the controls are created.  If the runtime does not find a control at the specified location, then the statement has no effect.  </li></div>
<a name="wp1040510"> </a><div class="pSmartList1"><li>Note that you cannot move a control with a MODIFY statement if it includes the CONTROL phrase.  This is due to the fact that the AT, LINE, and COLUMN phrases are used to find the control instead of specifying its new position.  To move a control, you must use the <em class="cEmphasis">control-handle </em>phrase instead.  Also note that when you use the CONTROL phrase, the compiler does not know the type of control being modified.  This means that the compiler will not recognize any control-type specific style and property names.  If you need to specify these, you will need to use their numeric equivalents found in the &quot;controls.def&quot; COPY library.  </li></div>
<a name="wp1040511"> </a><p class="pIndented1">
The following example creates an anonymous list box and adds two items to it.  Note the use of the PROPERTY phrase in the MODIFY statement: the compiler does not know that the control is a list box so it does not recognize the list-box specific property names.  As a result, the generic PROPERTY phrase is used in the example, specifying the level 78 data name that corresponds to the ITEM-TO-ADD property (found in &quot;controls.def&quot;).  
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
COPY &quot;controls.def&quot;.<a name="wp1040512"> </a>
<a name="wp1040513"> </a>
DISPLAY LIST-BOX, LINE 5, COL 30, LINES 5.<a name="wp1040514"> </a>
MODIFY CONTROL, LINE 5, COL 30, <a name="wp1040515"> </a>
   PROPERTY LBP-ITEM-TO-ADD = <a name="wp1040516"> </a>
            ( &quot;Item 1&quot;, &quot;Item 2&quot; ).<a name="wp1040517"> </a>
</pre></div>
<a name="wp1040518"> </a><div class="pSmartList1"><li>The <em class="cEmphasis">style-name</em> phrase adds the named style to the control.  If the NOT option is used with the <em class="cEmphasis">style-name</em> phrase, the named style is removed from the control instead.  When a style is added, any conflicting styles are removed first.  For example, if you add the FRAMED style to a button, then the UNFRAMED style is removed first.</li></div>
<a name="wp1040519"> </a><div class="pSmartList1"><li>When the LENGTH option is specified, <em class="cEmphasis">length-1</em> establishes the exact size of the <em class="cEmphasis">value</em> or <em class="cEmphasis">property-value</em>.  The text value presented to the control may have no trailing spaces or may have trailing spaces added.  When you specify the LENGTH option, the control uses exactly <em class="cEmphasis">length-1</em> characters of data with or without trailing spaces.  However, when <em class="cEmphasis">length-1</em> is a value larger than the size of the data item it is modifying, then the size of the data item is used instead.  If <em class="cEmphasis">length-1</em> is negative, it is ignored and the default handling occurs.</li></div>
<a name="wp1040520"> </a><div class="pSmartList1"><li>The POP-UP MENU option changes the pop-up menu for the control.  If <em class="cEmphasis">menu-1</em> is specified, then the corresponding menu becomes the new pop-up menu.  If NULL is specified, any existing pop-up menu is removed (but not destroyed).  </li></div>
<a name="wp1040521"> </a><div class="pSmartList1"><li>The EVENT PROCEDURE phrase adds, changes, or removes a control's event procedure.  Specifying NULL removes any event procedure.  Otherwise, <em class="cEmphasis">proc-1</em> (through <em class="cEmphasis">proc-2</em>, if specified) becomes the control's new event procedure. </li></div>
<a name="wp1040523"> </a><div class="pSmartList1"><li>When properties return specific values, these values are placed in <em class="cEmphasis">result-1</em> of the GIVING phrase.  If the property does not have a pre-defined return value, <em class="cEmphasis">result-1</em> is set to &quot;1&quot; if the property is set successfully, otherwise, <em class="cEmphasis">result-1</em> is set to &quot;0&quot;.  When a property is being given multiple values in a single assignment, as shown here,</li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
DISPLAY COLUMNS = ( 1, 10, 30 )<a name="wp1040524"> </a>
</pre></div>
<a name="wp1040525"> </a><p class="pIndented1">
then <em class="cEmphasis">result-1</em> is set in response to the last value assigned.  In the example above, <em class="cEmphasis">result-1 </em>is set to 30.  Because the meaning of each value depends on the property being set, you should consult the documentation on the specific property for the exact meaning.
</p>
<a name="wp1040526"> </a><div class="pSmartList1"><li>You can also change the properties of most controls described in the Screen Section with a Format 2 DISPLAY statement.  You must use MODIFY to change special properties of an ActiveX or .NET control.</li></div>
<a name="wp1040527"> </a><div class="pSmartList1"><li>To invoke (call) a method, you use the MODIFY verb in much the same way as you set a property or style.  Note that unlike common properties and styles, you cannot use the DISPLAY statement to invoke an ActiveX method specified in the Screen Section.  You must use the MODIFY verb.  ActiveX methods can take any number of parameters or no parameters. They can also take optional parameters (i.e., parameters that can be omitted). You specify the parameters in COBOL by enclosing them in parentheses. The optional parameters are always last.  To invoke a method with no parameters, use empty parentheses ().  </li></div>
<a name="wp1040528"> </a><div class="pSmartList1"><li>Each property or method name can be followed by `::' and then another property or method name to invoke methods in-line. &quot;MethodName1::MethodName2&quot; means invoke the method &quot;MethodName1&quot; of the current object and set the current object to the return value. When a property or method name is followed by a token other than `::', then it means to actually invoke the method on the current object passing the specified arguments or set the property to the specified value and reset the current object to null.  </li></div>
<a name="wp1040529"> </a><div class="pSmartList1"><li>The MODIFY verb takes a control's home position (upper left corner), its handle, the name of an elementary Screen Section item, or `^', as its first parameter. Only the properties of the control that are specified in the MODIFY statement are updated.  </li></div>
<a name="wp1040530"> </a><div class="pSmartList1"><li>The runtime automatically converts parameters to the appropriate types.  </li></div>
<a name="wp1040531"> </a><div class="pSmartList1"><li>If a method has a return value, the runtime converts and moves it to the item specified in the GIVING clause.</li></div>
<a name="wp1040532"> </a><div class="pSmartList1"><li>You cannot use named parameters to avoid entering required parameters.  You can omit optional parameters only.</li></div>
<a name="wp1040533"> </a><div class="pSmartList1"><li>You must specify only unnamed parameters before the BY NAME clause, and only named parameters after the BY NAME clause.</li></div>
<a name="wp1040534"> </a><div class="pSmartList1"><li>You can use one- and two-dimensional COBOL tables as property and method parameters for use in COM SAFEARRAYs.   The runtime automatically converts the table to an COM SAFEARRAY, as long as it contains only one elementary item that is USAGE HANDLE or USAGE HANDLE OF VARIANT.  See section 4.3.1 in <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>.</li></div>
<a name="wp1164620"> </a><div class="pSmartList1"><li>Use the &quot;AS <em class="cEmphasis">type-num&quot;</em> phrase in the parameter expression if you want to force the parameter to be converted to a particular VARIANT type before it is passed to a property or method of an ActiveX control or COM object.  You can tell from the object's documentation and the name of the parameter whether the object expects a particular VARIANT type, such as boolean.  </li></div>
<a name="wp1164621"> </a><p class="pIndented1">
Use the AS phrase if the ActiveX or COM object requires a method or property parameter to be something different from the default VARIANT type chosen by the runtime for the particular COBOL data item or literal. (See section 4.3 in <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em> for the rules that the runtime uses to determine the VARIANT type).  Specify the word &quot;AS&quot; followed by a numeric literal or level 78 numeric constant that indicates the variant type to which you want the parameter converted. The &quot;activex.def&quot; COPY file in the ACUCOBOL-GT sample/def directory contains predefined level 78 constants for each of the VARIANT types. 
</p>
</ol></div>
<a name="wp1040535"> </a><h3 class="pHeadingRef">
Format 2 (MODIFY WINDOW)
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1040536"> </a><div class="pSmartList1"><li>A Format 2 MODIFY statement changes one or more attributes of an existing FLOATING or INITIAL WINDOW (not a subwindow).  Attributes that are not specifically changed remain unchanged, except when a window is made larger, in which case it may also be repositioned in order to keep it on the screen.  <em class="cEmphasis">Window-handle</em> or <em class="cEmphasis">generic-handle</em> identify the window to modify.  If the WINDOW phrase is used and <em class="cEmphasis">generic-handle</em> is omitted, the current window is modified.  </li></div>
<a name="wp1040537"> </a><div class="pSmartList1"><li>The LINE and COLUMN phrases specify the location of the window on the screen.  The coordinates are relative to the interior space of the parent window.  If the window being modified is the initial window, the coordinates are relative to its own interior.  If either phrase is omitted, the corresponding row or column position is unchanged.  </li></div>
<a name="wp1040538"> </a><div class="pSmartList1"><li>The AT phrase specifies both the row and column position.  The first two or three digits of <em class="cEmphasis">screen-loc</em>, depending on the size of <em class="cEmphasis">screen-loc</em>, specify the row position.  The remaining digits specify the column position.  The values are treated in the same manner as in the LINE and COLUMN phrases.  If either half of <em class="cEmphasis">screen-loc</em> is zero, the corresponding coordinate remains unchanged.  </li></div>
<a name="wp1040539"> </a><div class="pSmartList1"><li>The SCREEN LINE and SCREEN COLUMN phrases set the location of the window.  The coordinates indicate the absolute position desired on the screen.  <em class="cEmphasis">Screen-line</em> and <em class="cEmphasis">screen-col</em> are given in the screen's base units.  Base units are machine dependent.  For character systems, the base unit is a character cell.  For graphical systems, the base unit is a pixel.  The upper left corner of the screen is position &quot;1,1&quot;.  The SCREEN LINE and SCREEN COLUMN phrases cannot be used if the LINE, COLUMN, or AT phrases are used.</li></div>
<a name="wp1040540"> </a><div class="pSmartList1"><li>The SIZE and LINES phrases change the size of the window.  The dimensions indicate the interior of the window.  The requested size must fit on the screen.  If it does not, the size is not changed.  After resizing the window, the runtime ensures that the window is fully visible on the screen.  Resizing a window that has the RESIZABLE property will not change the window's physical dimensions if that window is not maximized.  Note that only the window's logical dimensions are changed (thus increasing the scrolling region).  The user will see the new size only if he or she later maximizes the window.  </li></div>
<a name="wp1040541"> </a><div class="pSmartList1"><li>The TITLE phrase specifies a new title for the window.  For this phrase to have an effect, the window must have a title area.  </li></div>
<a name="wp1040542"> </a><div class="pSmartList1"><li><em class="cEmphasis">Statement-1</em> executes if any part of the operation fails.  An exception may be caused by one of the following situations:</li></div>
<div class="pSmartList2"><ul class="pSmartList2">
<a name="wp1210008"> </a><div class="pSmartList2"><li>The specified window size does not fit the screen.  Note that this error occurs only on a non-Windows host.  Because Windows allows you to have a desktop that is larger than the physical screen, you do not get an exception in this instance on Windows.  You should use ACCEPT FROM TERMINAL-INFO to determine the maximum physical window size on a Windows host.  </li></div>
<a name="wp1210280"> </a><div class="pSmartList2"><li>The window cannot be created, either because of an out-of-memory situation or the operating system fails to create it.</li></div>
<a name="wp1210285"> </a><div class="pSmartList2"><li>A window that has no input is activated.</li></div>
<a name="wp1210288"> </a><div class="pSmartList2"><li>An external window error occurs.  For example, the window does not exist or cannot be created for some reason.</li></div>
<a name="wp1210293"> </a><div class="pSmartList2"><li>An illegal instruction is used.  </li></div>
</ul></div>
<a name="wp1040543"> </a><div class="pSmartList1"><li><em class="cEmphasis">Statement-2</em> executes if the MODIFY statement succeeds.  </li></div>
<a name="wp1081776"> </a><div class="pSmartList1"><li>The LAYOUT-MANAGER option attaches <em class="cEmphasis">manager</em> to the window.</li></div>
<a name="wp1040544"> </a><div class="pSmartList1"><li>The VISIBLE option makes a window visible or invisible.  If the TRUE phrase is used, or <em class="cEmphasis">visible-state</em> is non-zero, then the window is made visible.  Otherwise, it is made invisible.  </li></div>
<a name="wp1040545"> </a><div class="pSmartList1"><li>The POP-UP MENU option changes the pop-up menu for the window.  If <em class="cEmphasis">menu-1</em> is specified, then the corresponding menu becomes the new pop-up menu.  If NULL is specified, any existing pop-up menu is removed (but not destroyed).  </li></div>
<a name="wp1156757"> </a><div class="pSmartList1"><li>The Format 2 ENABLED phrase can be used to disable or enable a window. A user cannot interact with a disabled window.  </li></div>
<a name="wp1040546"> </a><div class="pSmartList1"><li>The Format 2 EVENT PROCEDURE phrase changes the window's event procedure to <em class="cEmphasis">proc-1</em> (through <em class="cEmphasis">proc-2</em>, if specified).  If the NULL option is used, then the window's event procedure, if any, is removed from the window. Additional information can be found in the <a  href="gt3692.htm#wp1037330">DISPLAY Statement</a> above and in <a  href="gt3557.htm#wp1037068">section 5.9.6</a>.</li></div>
<a name="wp1040547"> </a><div class="pSmartList1"><li>The ACTION phrase allows you to programmatically maximize, minimize, or restore a window.  To use ACTION, assign it one of the following values (these names are found in acugui.def):</li></div>
<a name="wp1066344"> </a><p class="pBodyRelative">
<div>
<table border="0" cellpadding="6" cellspacing="1">
  <caption></caption>
  <tr align="left" valign="top">    <td><a name="wp1066347"> </a><p class="pCellBody">
ACTION-MAXIMIZE<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
</p>
</td>
    <td><a name="wp1066349"> </a><p class="pCellBody">
maximizes the window.  It has the same effect as if the user clicked the &quot;maximize&quot; button.  Allowed only for windows that have RESIZABLE or AUTO-RESIZE specified or implied for them.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1066351"> </a><p class="pCellBody">
ACTION-MINIMIZE 
</p>
</td>
    <td><a name="wp1066353"> </a><p class="pCellBody">
minimizes the window.  Allowed only with INDEPENDENT windows that have the AUTO-MINIMIZE property set to true.  It is not supported with other types of floating windows; if set, it is ignored by the runtime.
</p>
<a name="wp1200361"> </a><p class="pCellBody">
ACTION-MINIMIZE has the same effect as if the user clicked the &quot;minimize&quot; button. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1066355"> </a><p class="pCellBody">
ACTION-RESTORE
</p>
</td>
    <td><a name="wp1066357"> </a><p class="pCellBody">
 If the window is currently maximized or minimized, restores the window to its previous size and position; otherwise, it has no effect.  Allowed only for windows that can be maximized or minimized.
</p>
</td>
</tr>
</table>
</div>

</p>
<a name="wp1040551"> </a><p class="pIndented1">
If you assign an ACTION value that is not allowed, then there is no effect other than to trigger the ON EXCEPTION phrase of the MODIFY statement (if present).  Note that you can use the ACTION phrase to create a window that is initially maximized or minimized.
</p>
</ol></div>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
