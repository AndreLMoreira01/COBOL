<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.5.1025" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/14/06 08:27:48" />
  <title>4.2.3  Special-Names Paragraph</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       ACUCOBOL-GT Reference Manual <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="gt34.htm"><br />Chapter 4:  Environment Division</a> &gt; <a href="gt343.htm">4.2  Configuration Section</a> &gt; </p>
<a name="wp1034415"> </a><h2 class="pHeading2">
4.2.3  Special-Names Paragraph
</h2>
<a name="wp1034419"> </a><p class="pBody">
The SPECIAL-NAMES paragraph describes several miscellaneous aspects of the operating environment.  The phrases may be listed in any order, with two exceptions.  The switch declarations must come first, and alphabets must be defined before they are referenced in SYMBOLIC CHARACTERS phrases.
</p>
<a name="wp1034420"> </a><h3 class="pHeadingRef">
General Format
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">SPECIAL-NAMES</u>.<a name="wp1034421"> </a>
<a name="wp1034422"> </a>
   [ {switch-name} [ IS mnemonic-name ]<a name="wp1034423"> </a>
     {system-name}<a name="wp1034424"> </a>
<a name="wp1034425"> </a>
      [ {<u class="cUnderline">ON</u> } STATUS IS cond-name ] ... ] ...<a name="wp1034426"> </a>
        {<u class="cUnderline">OFF</u>}<a name="wp1034427"> </a>
<a name="wp1034428"> </a>
   [ {alphabet-entry } ... ] <a name="wp1034429"> </a>
<a name="wp1034430"> </a>
   [ <u class="cUnderline">SYMBOLIC</u> CHARACTERS <a name="wp1034431"> </a>
<a name="wp1034432"> </a>
      { {name} ... {IS } {number} ... } ...<a name="wp1034433"> </a>
                   {ARE}<a name="wp1034434"> </a>
<a name="wp1034435"> </a>
      [ <u class="cUnderline">IN</u> alphabet-name ] ]<a name="wp1034436"> </a>
<a name="wp1034437"> </a>
   [ <u class="cUnderline">CLASS</u> class-name IS<a name="wp1034438"> </a>
<a name="wp1034439"> </a>
      { lit-1 [  {<u class="cUnderline">THROUGH</u>} lit-2 ] } ... ] ...<a name="wp1034440"> </a>
                 {<u class="cUnderline">THRU</u>   }<a name="wp1034441"> </a>
<a name="wp1034442"> </a>
   [ <u class="cUnderline">CURRENCY</u> SIGN IS char ]<a name="wp1034443"> </a>
<a name="wp1034444"> </a>
   [ <u class="cUnderline">DECIMAL-POINT</u> IS <u class="cUnderline">COMMA</u> ] <a name="wp1034445"> </a>
<a name="wp1034446"> </a>
   [ <u class="cUnderline">NUMERIC</u> <u class="cUnderline">SIGN</u> IS <u class="cUnderline">TRAILING</u> <u class="cUnderline">SEPARATE</u> ]<a name="wp1034447"> </a>
<a name="wp1034448"> </a>
   [ <u class="cUnderline">CONSOLE</u> IS <u class="cUnderline">CRT</u> ] <a name="wp1034449"> </a>
<a name="wp1034450"> </a>
   [ <u class="cUnderline">CURSOR</u> IS cursor-name ]<a name="wp1034451"> </a>
<a name="wp1034452"> </a>
   [ <u class="cUnderline">CRT</u> <u class="cUnderline">STATUS</u> IS status-name ]<a name="wp1034453"> </a>
<a name="wp1034454"> </a>
   [ <u class="cUnderline">SCREEN</u> <u class="cUnderline">CONTROL</u> IS control-name ]<a name="wp1034455"> </a>
<a name="wp1034456"> </a>
   [ <u class="cUnderline">EVENT</u> <u class="cUnderline">STATUS</u> IS event-status ].<a name="wp1034457"> </a>
</pre></div>
<a name="wp1034458"> </a><h3 class="pHeadingRef">
Alphabet Entry
</h3>
<a name="wp1035832"> </a><h3 class="pHeadingRef">
Format 1
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
ALPHABET alphabet-name IS (<u class="cUnderline">STANDARD-1</u>}<a name="wp1034460"> </a>
                          {<u class="cUnderline">STANDARD-2</u>}<a name="wp1034462"> </a>
                          {<u class="cUnderline">NATIVE</u>    }<a name="wp1034464"> </a>
                          {<u class="cUnderline">EBCDIC</u>    } <a name="wp1034466"> </a>
</pre></div>
<a name="wp1034467"> </a><h3 class="pHeadingRef">
Format 2
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
ALPHABET alphabet-name IS <a name="wp1034468"> </a>
   {literal-1 [ <u class="cUnderline">THROUGH</u> literal-2    ] } ...<a name="wp1034469"> </a>
              [ <u class="cUnderline">THRU</u> literal-2       ]<a name="wp1034470"> </a>
              [ {<u class="cUnderline">ALSO</u> literal-3}  ...]<a name="wp1034471"> </a>
</pre></div>
<a name="wp1034473"> </a><h3 class="pHeadingRef">
Syntax Rules
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1034474"> </a><div class="pSmartList1"><li><em class="cEmphasis">Switch-name</em> must be one of the system names: SWITCH-1, SWITCH-2, ... SWITCH-26 <em class="cEmphasis">or</em> the word SWITCH followed by a switch number (a numeric literal 1 through 26 or an alphanumeric literal &quot;A&quot; through &quot;Z&quot;).  It represents one of the 26 program switches.  </li></div>
<a name="wp1034475"> </a><div class="pSmartList1"><li><em class="cEmphasis">Mnemonic-name</em> is a user-defined word that may be used in a SET statement to change the state of the associated program switch or to refer to a device in an ACCEPT or DISPLAY statement.</li></div>
<a name="wp1034476"> </a><div class="pSmartList1"><li>Each <em class="cEmphasis">system-name</em> must be associated with a <em class="cEmphasis">mnemonic-name</em>.  Also, no <em class="cEmphasis">system-name</em> may be given an ON or an OFF STATUS.  <em class="cEmphasis">System-name</em> must be one of: CONSOLE, SYSIN, SYSIPT, SYSOUT, SYSLIST, SYSLST, SYSOUT-FLUSH, or SYSERR.</li></div>
<a name="wp1034477"> </a><div class="pSmartList1"><li><em class="cEmphasis">Cond-name</em> is a user-defined word that can be used to test the status of a program switch.</li></div>
<a name="wp1034478"> </a><div class="pSmartList1"><li>For each <em class="cEmphasis">switch-name</em>, at least one <em class="cEmphasis">mnemonic-name</em> or one <em class="cEmphasis">cond-name</em> must be specified.  No more than one ON STATUS and one OFF STATUS phrase may be specified for a particular <em class="cEmphasis">switch-name</em>.  </li></div>
<a name="wp1034479"> </a><div class="pSmartList1"><li><em class="cEmphasis">Name</em> is a user-defined word that names a symbolic character.</li></div>
<a name="wp1034480"> </a><div class="pSmartList1"><li><em class="cEmphasis">Number</em> is an integer literal that must be in the range of ordinal positions in the alphabet being referenced.  </li></div>
<a name="wp1034481"> </a><div class="pSmartList1"><li>There must be a one-to-one correspondence between occurrences of <em class="cEmphasis">name</em> and <em class="cEmphasis">number</em>.  The relationship between each <em class="cEmphasis">name </em>and <em class="cEmphasis">number</em> is by position in the SYMBOLIC CHARACTERS clause.  The first <em class="cEmphasis">name </em>is paired with the first <em class="cEmphasis">number</em>, the second with the second, and so on.  </li></div>
<a name="wp1034483"> </a><div class="pSmartList1"><li><em class="cEmphasis">Class-name</em> is a user-defined word that defines a class name. </li></div>
<a name="wp1034484"> </a><div class="pSmartList1"><li><em class="cEmphasis">Lit-1</em> and <em class="cEmphasis">lit-2</em> are numeric or alphanumeric literals.  </li></div>
<a name="wp1034485"> </a><div class="pSmartList1"><li><em class="cEmphasis">Char</em> is a one-character nonnumeric literal that specifies a currency symbol.</li></div>
<a name="wp1034486"> </a><div class="pSmartList1"><li><em class="cEmphasis">Cursor-name</em> must be the name of a data item appearing in the Data Division that is 4 or 6 characters in length.  <em class="cEmphasis">Cursor-name</em> must describe an elementary unsigned numeric integer or a group item containing two such elementary data items.</li></div>
<a name="wp1034487"> </a><div class="pSmartList1"><li><em class="cEmphasis">Status-name</em> must name a group item in the Data Division that is three characters in length <em class="cEmphasis">or</em> must name an elementary numeric data item.  </li></div>
<a name="wp1034489"> </a><div class="pSmartList1"><li><em class="cEmphasis">Control-name</em> must name a group item with the following structure: </li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
01 SCREEN-CONTROL.<a name="wp1034490"> </a>
   03 ACCEPT-CONTROL   PIC 9.<a name="wp1034491"> </a>
   03 CONTROL-VALUE    PIC 999.<a name="wp1034492"> </a>
   03 CONTROL-HANDLE   USAGE HANDLE.<a name="wp1034493"> </a>
   03 CONTROL-ID       PIC X(2) COMP-X.<a name="wp1034494"> </a>
</pre></div>
<a name="wp1034495"> </a><p class="pIndented1">
You must use the preceding structure, but may use your own names for the variables.  
</p>
<a name="wp1034498"> </a><div class="pSmartList1"><li><em class="cEmphasis">Event-status</em> must refer to a group item with the following structure: </li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
01 EVENT-STATUS.<a name="wp1034499"> </a>
   03 EVENT-TYPE           PIC X(4) COMP-X.<a name="wp1034500"> </a>
   03 EVENT-WINDOW-HANDLE  USAGE HANDLE OF WINDOW.<a name="wp1034501"> </a>
   03 EVENT-CONTROL-HANDLE USAGE HANDLE.<a name="wp1034502"> </a>
   03 EVENT-CONTROL-ID     PIC X(2) COMP-X.<a name="wp1034503"> </a>
   03 EVENT-DATA-1         USAGE SIGNED-SHORT.<a name="wp1034504"> </a>
   03 EVENT-DATA-2         USAGE SIGNED-LONG.<a name="wp1034505"> </a>
   03 EVENT-ACTION         PIC X COMP-X.<a name="wp1034506"> </a>
</pre></div>
<a name="wp1034509"> </a><p class="pIndented1">
You can find a copy of this format in the COPY library &quot;crtvars.def&quot;.  You may name the data items in the EVENT-STATUS declaration arbitrarily, but the data types, storage, and group structure must match the example given.  (For compatibility with older source code, the compiler accepts an EVENT-STATUS item that does not have EVENT-ACTION.  The runtime behaves as if EVENT-ACTION contains the value &quot;0&quot;, indicating normal event handling.)  The SIGNED-LONG data item, EVENT-DATA-2, may be compiled with any &quot;-Dw&quot; setting (&quot;-Dw&quot; limits the word-size of the target machine).  If you use &quot;-Dw16&quot; or &quot;-Dw32&quot;, then you should not run the generated object on a 64-bit machine. 
</p>
<a name="wp1034511"> </a><div class="pSmartList1"><li><em class="cEmphasis">Alphabet-name</em> is a user-defined word that defines an alphabet name. </li></div>
<a name="wp1034512"> </a><div class="pSmartList1"><li>The optional word &quot;ALPHABET&quot; is required in an alphabet declaration if it immediately follows a SYMBOLIC CHARACTERS declaration.</li></div>
<a name="wp1034513"> </a><div class="pSmartList1"><li><em class="cEmphasis">Literal-1,</em> <em class="cEmphasis">literal-2</em>, and <em class="cEmphasis">literal-3 </em>may be any literal, but if they are numeric, they must be in the range of 1 through 256.</li></div>
<a name="wp1034514"> </a><div class="pSmartList1"><li><em class="cEmphasis">Literal-2 </em>and <em class="cEmphasis">literal-3</em> must have a size of one character if they are alphanumeric literals.</li></div>
<a name="wp1034515"> </a><div class="pSmartList1"><li><em class="cEmphasis">Literal-1</em> must also have a size of one character if it is associated with a THROUGH or ALSO phrase.</li></div>
</ol></div>
<a name="wp1034517"> </a><h3 class="pHeadingRef">
General Rules
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1034518"> </a><div class="pSmartList1"><li>The <em class="cEmphasis">switch-name</em> clause associates status names (<em class="cEmphasis">cond-name</em>) and switch names (<em class="cEmphasis">mnemonic-name</em>) with a particular program switch.  These can be used to test the on/off status of a switch or to change the switch's status. </li></div>
<a name="wp1034520"> </a><div class="pSmartList1"><li>The <em class="cEmphasis">system-name</em> clause associates a user-defined <em class="cEmphasis">mnemonic-name</em> with one of the predefined system devices.  These names may be used in the ACCEPT and DISPLAY statement to refer to the following devices:</li></div>
<a name="wp1035463"> </a><p class="pBodyRelative">
<div>
<table border="1" cellpadding="2" cellspacing="2">
  <caption></caption>
  <tr align="left" valign="top">    <th><a name="wp1035378"> </a>
System Name

</th>
    <th><a name="wp1035380"> </a>
ACCEPT

</th>
    <th><a name="wp1035382"> </a>
DISPLAY

</th>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035384"> </a><p class="pCellBody">
CONSOLE
</p>
</td>
    <td><a name="wp1035386"> </a><p class="pCellBody">
system input
</p>
</td>
    <td><a name="wp1035388"> </a><p class="pCellBody">
system output
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035390"> </a><p class="pCellBody">
SYSIN
</p>
</td>
    <td><a name="wp1035392"> </a><p class="pCellBody">
system input
</p>
</td>
    <td><a name="wp1035394"> </a><p class="pCellBody">
(illegal)
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035396"> </a><p class="pCellBody">
SYSIPT
</p>
</td>
    <td><a name="wp1035398"> </a><p class="pCellBody">
system input
</p>
</td>
    <td><a name="wp1035400"> </a><p class="pCellBody">
(illegal)
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035402"> </a><p class="pCellBody">
SYSOUT
</p>
</td>
    <td><a name="wp1035404"> </a><p class="pCellBody">
(illegal)
</p>
</td>
    <td><a name="wp1035406"> </a><p class="pCellBody">
system output
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035408"> </a><p class="pCellBody">
SYSLST
</p>
</td>
    <td><a name="wp1035410"> </a><p class="pCellBody">
(illegal)
</p>
</td>
    <td><a name="wp1035412"> </a><p class="pCellBody">
system output
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035414"> </a><p class="pCellBody">
SYSLIST
</p>
</td>
    <td><a name="wp1035416"> </a><p class="pCellBody">
(illegal)
</p>
</td>
    <td><a name="wp1035418"> </a><p class="pCellBody">
system output
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035420"> </a><p class="pCellBody">
SYSOUT-FLUSH
</p>
</td>
    <td><a name="wp1035422"> </a><p class="pCellBody">
(illegal)
</p>
</td>
    <td><a name="wp1035424"> </a><p class="pCellBody">
system output
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035426"> </a><p class="pCellBody">
SYSERR
</p>
</td>
    <td><a name="wp1035428"> </a><p class="pCellBody">
(illegal)
</p>
</td>
    <td><a name="wp1035430"> </a><p class="pCellBody">
error output
</p>
</td>
</tr>
</table>
</div>

</p>
<a name="wp1034580"> </a><p class="pIndented1">
The &quot;system input&quot; and &quot;system output&quot; devices are normally the console's keyboard and screen, but may be redirected with operating system commands or with the &quot;-i&quot; and &quot;-o&quot; runtime options.  The &quot;error output&quot; device is normally the console screen, but may be redirected with the &quot;-e&quot; runtime option. 
</p>
<a name="wp1034582"> </a><div class="pSmartList1"><li>The SYMBOLIC CHARACTERS clause defines symbolic characters.  A symbolic character is a user-defined figurative constant and can be used anywhere a figurative constant may be.  For each <em class="cEmphasis">name</em>, the character it represents is set to the character whose ordinal position in the native character set is specified by the corresponding <em class="cEmphasis">number</em>.  Note that the ordinal position of a character is one greater than its internal representation.  Thus a carriage-return character in ASCII (internal value of &quot;13&quot;) would be specified as ordinal position &quot;14&quot;. </li></div>
<a name="wp1034583"> </a><div class="pSmartList1"><li>The CLASS clause defines a class name.  A class name is used in a class test to determine whether or not a data item entirely consists of a certain set of characters. </li></div>
<a name="wp1036901"> </a><p class="pIndented1">
The class name must be unique in the source context.  Make sure that there is no name clash between the class name and reserved COBOL words, user defined variables, enumerators, events, or methods.  This is particularly important for COM objects, ActiveX controls, and .NET assemblies, which may have enumerators that use the same identifier as a class name they define.  If there is a name clash, rename the class, or if possible, the other element to make the class name unique. Otherwise compiler errors may result.  We suggest prepending ActiveX and .NET class names with an &quot;@&quot; sign to avoid ambiguities. 
</p>
<a name="wp1034585"> </a><p class="pIndented1">
For each numeric literal specified in the CLASS clause, the value of the literal specifies the ordinal number of the character in the native character set to include in the class.  For example, &quot;33&quot; would refer to the space character (decimal value 32) in the ASCII character set.  
</p>
<a name="wp1034586"> </a><p class="pIndented1">
For each alphanumeric literal, the value of the character or characters in the literal specifies the characters to include in the class.
</p>
<a name="wp1034587"> </a><p class="pIndented1">
If the THROUGH phrase is used, then <em class="cEmphasis">lit-1</em> and <em class="cEmphasis">lit-2</em> must be numeric literals or alphanumeric literals containing only one character.  The set of contiguous characters between <em class="cEmphasis">lit-1</em> and <em class="cEmphasis">lit-2</em> (inclusive) is included in the class.  The two literals may be specified in either ascending or descending order.
</p>
<a name="wp1034590"> </a><div class="pSmartList1"><li>The CURRENCY SIGN clause specifies the PICTURE clause currency symbol.  It can be any character from the computer's character set except: </li></div>
<div class="pSmartList2"><ul class="pSmartList2">
<a name="wp1034591"> </a><div class="pSmartList2"><li>0 through 9</li></div>
<a name="wp1034592"> </a><div class="pSmartList2"><li>A, B, C, D, E, P, R, S, V, X, Z</li></div>
<a name="wp1034593"> </a><div class="pSmartList2"><li>space, asterisk, plus, minus, comma, period, semicolon, quotation mark, equals sign, or slash</li></div>
</ul></div>
<a name="wp1034594"> </a><div class="pSmartList1"><li>If no CURRENCY SIGN clause is present, the dollar sign is used.</li></div>
<a name="wp1034595"> </a><div class="pSmartList1"><li>The DECIMAL-POINT IS COMMA clause exchanges the functions of the comma and the period in PICTURE clauses and numeric literals. </li></div>
<a name="wp1034598"> </a><div class="pSmartList1"><li>The NUMERIC SIGN clause specifies that all USAGE DISPLAY numeric data items in the program that do not have an explicit SIGN clause should be treated as if they had a SIGN TRAILING SEPARATE clause.  A compile-time option exists to do the same thing.  This is usually done to match the behavior of other COBOL systems.  </li></div>
<a name="wp1034601"> </a><div class="pSmartList1"><li>The CONSOLE IS CRT clause causes the compiler to assume that:</li></div>
<div class="pSmartList2"><ul class="pSmartList2">
<a name="wp1034602"> </a><div class="pSmartList2"><li>&quot;UPON CRT&quot; is specified for every DISPLAY statement that does not have an UPON phrase.</li></div>
<a name="wp1034603"> </a><div class="pSmartList2"><li>&quot;FROM CRT&quot; is specified for every ACCEPT statement that does not have a FROM phrase.  </li></div>
</ul></div>
<a name="wp1034604"> </a><p class="pIndented1">
This causes DISPLAY and ACCEPT statements without explicit UPON or FROM phrases to interact with the ACUCOBOL-GT Window Manager instead of with the low-level (ANSI-style) console driver.  Note that CONSOLE IS CRT is automatically implied by the compiler unless the &quot;-Ca&quot; compiler option is used.  If CONSOLE IS CRT is present in a program compiled with &quot;-Ca&quot;, CONSOLE IS CRT takes precedence.
</p>
<a name="wp1034605"> </a><div class="pSmartList1"><li>The CURSOR clause specifies the name of a data item that will be used to control the console's cursor position throughout the program.  If the <em class="cEmphasis">cursor-name</em> data item is four characters long, then the first two characters are the cursor's line number, and the last two characters are the column number.  If <em class="cEmphasis">cursor-name</em> is six characters long, then the row and column numbers are each three characters long. </li></div>
<a name="wp1034608"> </a><p class="pIndented1">
At the beginning of each ACCEPT statement, <em class="cEmphasis">cursor-name</em> should specify a location in one of the fields being entered.  If it does, then the cursor will begin the ACCEPT statement at that location.  If <em class="cEmphasis">cursor-name</em> does not specify a valid position, and more than one field is being entered by the ACCEPT statement, the cursor will start at the beginning of the next valid field (the next field described in the Screen Section definition of the <em class="cEmphasis">screen-name</em> referenced in this ACCEPT).  If the cursor position is past the last field, or before the first field, then the cursor will be placed at the beginning of the first field.
</p>
<a name="wp1034609"> </a><p class="pIndented1">
At the conclusion of the ACCEPT statement, the cursor's final location will be placed in <em class="cEmphasis">cursor-name</em>.  
</p>
<a name="wp1034610"> </a><p class="pNoteList">
<hr />
<b>Note:  </b>The ACUCOBOL-GT runtime system will limit the placement of the cursor in some circumstances.  It will not place a cursor past the end of valid data in a field.  In this case, the cursor will be placed as close to the requested position as possible.  Also note that if you specify a CURSOR clause in SPECIAL-NAMES, then you must initialize the cursor location prior to <em class="cEmphasis">every </em>ACCEPT statement.  
<hr />
</p>
<a name="wp1034611"> </a><p class="pIndented1">
If you specify a CURSOR clause in SPECIAL-NAMES then you may not use the CURSOR phrase of the ACCEPT statement, because this would lead to multiple specification of the initial cursor position.
</p>
<a name="wp1034613"> </a><p class="pIndented1">
If you don't initialize cursor-name with numeric data, you'll receive a &quot;nonnumeric data&quot; warning message on your first ACCEPT statement.
</p>
<a name="wp1034614"> </a><p class="pIndented1">
The cursor may not start over a prompt character (except at the beginning of a field), unless that prompt character is a space.
</p>
<a name="wp1034615"> </a><p class="pIndented1">
The following code demonstrates how a CURSOR clause could be used with a Format 1 ACCEPT statement:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
identification division.<a name="wp1034616"> </a>
program-id. testcurs.<a name="wp1034617"> </a>
***  This program shows how the CURSOR clause <a name="wp1034618"> </a>
***  can be used with a Format 1 ACCEPT statement.<a name="wp1034619"> </a>
environment division.<a name="wp1034620"> </a>
configuration section.<a name="wp1034621"> </a>
special-names.<a name="wp1034622"> </a>
    cursor is cursor-name.<a name="wp1034623"> </a>
data division.<a name="wp1034624"> </a>
working-storage section.<a name="wp1034625"> </a>
<a name="wp1034626"> </a>
01  cursor-name.<a name="wp1034627"> </a>
    05  c-line      pic 9(3).<a name="wp1034628"> </a>
    05  c-col       pic 9(3).<a name="wp1034629"> </a>
<a name="wp1034630"> </a>
01  accept-field    pic x(10) value &quot;abcdefghij&quot;.<a name="wp1034631"> </a>
procedure division.<a name="wp1034632"> </a>
main-logic.<a name="wp1034633"> </a>
<a name="wp1034634"> </a>
display window erase.<a name="wp1034635"> </a>
<a name="wp1034636"> </a>
display accept-field line 6 col 6.<a name="wp1034637"> </a>
<a name="wp1034638"> </a>
***  Position the cursor over the &quot;c&quot; in the value <a name="wp1034639"> </a>
***  of accept-field, which is the eighth column <a name="wp1034640"> </a>
***  on the screen.<a name="wp1034641"> </a>
<a name="wp1034642"> </a>
   move 6 to c-line.<a name="wp1034643"> </a>
   move 8 to c-col.<a name="wp1034644"> </a>
   accept accept-field line 6 col 6 update.<a name="wp1034645"> </a>
   stop run.<a name="wp1034646"> </a>
</pre></div>
<a name="wp1034647"> </a><div class="pSmartList1"><li>The CRT STATUS phrase provides a method for returning the termination status of every ACCEPT statement.  At the end of each ACCEPT statement, <em class="cEmphasis">status-name</em> is filled in with information regarding how the ACCEPT terminated.  Two forms of status values are supported.  One form is a three-character group item where each character is treated as a &quot;key&quot; that contains various information.  The second form is a simple numeric value where each status condition is identified by a unique numeric value.  The next two rules describe these two forms. </li></div>
<a name="wp1034650"> </a><div class="pSmartList1"><li>If <em class="cEmphasis">status-name</em> is a numeric data item, then a unique value will be moved to this item at the end of each ACCEPT statement.  This value is the same as the CONTROL KEY value described in the ACCEPT statement.  For details on which values are returned, see the discussion of the CONTROL KEY phrase in <a  href="gt3678.htm#wp1035736">section 6.6</a> of this manual.  </li></div>
<a name="wp1034653"> </a><div class="pSmartList1"><li>If <em class="cEmphasis">status-name</em> is a group item, then the first two characters are assigned values according to the following table:</li></div>
<a name="wp1035556"> </a><p class="pBodyRelative">
<div>
<table border="1" cellpadding="2" cellspacing="2">
  <caption></caption>
  <tr align="left" valign="top">    <th><a name="wp1035490"> </a>
Key 1

</th>
    <th><a name="wp1035492"> </a>
Key 2

</th>
    <th><a name="wp1035494"> </a>
Meaning

</th>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035496"> </a><p class="pCellBody">
`0'
</p>
</td>
    <td><a name="wp1035498"> </a><p class="pCellBody">
`0'
</p>
</td>
    <td><a name="wp1035500"> </a><p class="pCellBody">
Termination key pressed
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035502"> </a><p class="pCellBody">
`0'
</p>
</td>
    <td><a name="wp1035504"> </a><p class="pCellBody">
`1'
</p>
</td>
    <td><a name="wp1035506"> </a><p class="pCellBody">
Auto-skip out of last field
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035508"> </a><p class="pCellBody">
`1'
</p>
</td>
    <td><a name="wp1035510"> </a><p class="pCellBody">
x'00' - x'FF'
</p>
</td>
    <td><a name="wp1035512"> </a><p class="pCellBody">
Exception key pressed
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035514"> </a><p class="pCellBody">
`2'
</p>
</td>
    <td><a name="wp1035516"> </a><p class="pCellBody">
x'00'
</p>
</td>
    <td><a name="wp1035518"> </a><p class="pCellBody">
End-of-file key pressed
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035520"> </a><p class="pCellBody">
`3'
</p>
</td>
    <td><a name="wp1035522"> </a><p class="pCellBody">
x'00'
</p>
</td>
    <td><a name="wp1035524"> </a><p class="pCellBody">
Statement timed out
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035526"> </a><p class="pCellBody">
`9'
</p>
</td>
    <td><a name="wp1035528"> </a><p class="pCellBody">
x'00'
</p>
</td>
    <td><a name="wp1035530"> </a><p class="pCellBody">
No items fall within screen
</p>
</td>
</tr>
</table>
</div>

</p>
<a name="wp1036058"> </a><p class="pIndented1">
If Key 1 is &quot;1&quot;, then Key 2 contains the exception key value of the key that was pressed.  For a table of key values, see the heading &quot;CONTROL KEY Phrase&quot; under the <a  href="gt3679.htm#wp1035747">ACCEPT Statement</a> in <a  href="gt3678.htm#wp1035736">section 6.6</a>.
</p>
<a name="wp1036062"> </a><p class="pIndented1">
The third character always contains the same value that is returned by the CONTROL KEY phrase of the ACCEPT statement, if this value is in the range of 0 to 255.  This is the same value returned when <em class="cEmphasis">status-name</em> refers to a numeric data item instead of a group item (rule 12 above).  
</p>
<a name="wp1034700"> </a><p class="pIndented1">
When Key 1 is set to &quot;0&quot;, a normal termination has occurred.  Any other value indicates an exception condition.  
</p>
<a name="wp1034701"> </a><p class="pNoteList">
<hr />
<b>Note:  </b>This form of the CRT STATUS phrase is provided for compatibility with the X/Open COBOL specification as well as for compatibility with some other COBOL systems.  This method of determining the status of an ACCEPT statement differs in several details from the other methods of determining the ACCEPT status supported by ACUCOBOL-GT.  In particular, the other methods return a single numeric value to describe the status (same as the value stored in Key 3).  We recommend that only one technique be used to test for the ACCEPT status to avoid confusion.  The following table summarizes the various statements and phrases available to return an ACCEPT statement's status.
<hr />
</p>
<a name="wp1034705"> </a><p class="pBodyRelative">
  <div>
<table border="1" cellpadding="2" cellspacing="2">
  <caption></caption>
  <tr align="left" valign="top">    <th><a name="wp1035592"> </a>
Status Statement

</th>
    <th><a name="wp1035594"> </a>
Status Type

</th>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035596"> </a><p class="pCellBody">
CRT STATUS group-item
</p>
</td>
    <td><a name="wp1035598"> </a><p class="pCellBody">
3-byte key
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035600"> </a><p class="pCellBody">
CRT STATUS numeric-item
</p>
</td>
    <td><a name="wp1035602"> </a><p class="pCellBody">
Numeric value
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035604"> </a><p class="pCellBody">
CONTROL KEY IS item
</p>
</td>
    <td><a name="wp1035606"> </a><p class="pCellBody">
Numeric value
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035608"> </a><p class="pCellBody">
ACCEPT item FROM ESCAPE
</p>
</td>
    <td><a name="wp1035610"> </a><p class="pCellBody">
Numeric value
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1035612"> </a><p class="pCellBody">
ON EXCEPTION item
</p>
</td>
    <td><a name="wp1035614"> </a><p class="pCellBody">
Numeric value
</p>
</td>
</tr>
</table>
</div>

</p>
<a name="wp1034732"> </a><p class="pIndented1">
Also note that the formation of Key 2 is tricky.  In the case of a normal termination, Key 2 will contain a normal COBOL character digit, but in the other cases, it will contain a binary value.  The easiest way to test the status value is to use hexadecimal constants to express the binary value.  Alternately, you can declare Key 2 to be COMP-X and test the exception values against numeric literals.  Note that some other COBOL systems define Key 2 to be &quot;PIC 99 COMP&quot;.  If you convert programs that use this construct, be sure to use the &quot;-D1&quot; or &quot;-Dm&quot; compile-time flags to cause this data item to be stored in one character.  If you do not do this, then Key 2 will occupy two characters and return invalid values.  
</p>
<a name="wp1034734"> </a><div class="pSmartList1"><li>The ALPHABET clause specifies the alphabet to be used for character translations and collating sequences. </li></div>
<a name="wp1034735"> </a><p class="pIndented1">
An alphabet may be used in the following circumstances:
</p>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1034736"> </a><div class="pSmartList2"><li>In the CODE-SET phrase of a sequential file's FD.  The alphabet specifies a character translation map.  A Format 2 alphabet may not be used for this purpose.</li></div>
<a name="wp1034737"> </a><div class="pSmartList2"><li>In the COLLATING SEQUENCE phrase of an indexed file's SELECT.  This specifies an alternate collating sequence for the file's keys.</li></div>
<a name="wp1034738"> </a><div class="pSmartList2"><li>In the COLLATING SEQUENCE phrase of a SORT or MERGE statement.  Here the alphabet specifies the collating sequence to use for key comparisons.</li></div>
<a name="wp1034739"> </a><div class="pSmartList2"><li>In the PROGRAM SEQUENCE phrase of the OBJECT-COMPUTER paragraph.  This specifies the collating sequence for any alphanumeric comparisons done in the program.  It also specifies the default collating sequence for SORT and MERGE verbs.  The character that is first in the program collating sequence is treated as the LOW-VALUES character for the program.  The character that is last in the program collating sequence is treated as the HIGH-VALUES character for the program.  The one exception to this is that in Special-Names, LOW-VALUES and HIGH-VALUES always refer to the first and last characters in the native collating sequence.  </li></div>
<a name="wp1034740"> </a><div class="pSmartList2"><li>In a SYMBOLIC CHARACTERS clause in SPECIAL-NAMES, to indicate the alphabet to which the symbolic character belongs.  </li></div>
</ol></div>
<a name="wp1034741"> </a><p class="pIndented1">
A Format 2 alphabet is used to describe a collating sequence.  Explicitly named characters are listed in the order of their positions in the new collating sequence.  
</p>
<a name="wp1034742"> </a><p class="pIndented1">
Any characters in the native collating sequence that are not explicitly named in the ALPHABET clause assume a position greater than any of the explicitly named characters.  The relative order of these unnamed characters remains the same as in the native collating sequence. 
</p>
<a name="wp1034743"> </a><p class="pIndented1">
If a literal in the ALPHABET clause is numeric, it designates a character by specifying that character's ordinal position in the native character set.  For example, 66 would designate the letter A in the ASCII character set.  
</p>
<a name="wp1034745"> </a><p class="pIndented1">
If the literal is alphanumeric, it is the actual character.  For alphanumeric literals that contain more than one character, the characters are assigned successive ascending positions in the new collating sequence.
</p>
<a name="wp1034747"> </a><p class="pIndented1">
Here's an example :
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
   ALPHABET TINY IS &quot;01&quot;, &quot;Z&quot;, &quot;AB&quot;, SPACE<a name="wp1034748"> </a>
</pre></div>
<a name="wp1034749"> </a><p class="pIndented1">
This alphabet contains 6 characters.  Character 0 is the first character in the sequence, character 1 is the second.  Character &quot;Z&quot; is the third, and characters &quot;A&quot; and &quot;B&quot; are the fourth and fifth.  The space character is the sixth character.  If you were to sort a file using this alphabet, all items that started with &quot;Z&quot; would appear before items that started with &quot;A&quot; or &quot;B&quot;.  Anything that started with a space would be last.  
</p>
<a name="wp1034750"> </a><p class="pIndented1">
Any characters in the native collating sequence that are not explicitly named assume a position in the new collating sequence greater than any of the explicitly named characters.  The relative order of these characters remains unchanged from the native collating sequence.  In the example above, this means that anything that starts with &quot;C&quot; comes after anything that starts with spaces, and anything starting with &quot;D&quot; comes after &quot;C&quot;.
</p>
<a name="wp1034751"> </a><p class="pIndented1">
If the THROUGH phrase is specified, the set of contiguous characters in the native character set beginning with <em class="cEmphasis">literal-1</em> and ending with <em class="cEmphasis">literal-2</em> are assigned successive ascending positions in the new collating sequence.  The THROUGH phrase may specify characters in ascending or descending sequence.  
</p>
<a name="wp1034753"> </a><p class="pIndented1">
For example, the following alphabet will sort the alphabetic characters backwards:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
   ALPHABET REV-ALPHA IS &quot;Z&quot; THROUGH &quot;A&quot;, <a name="wp1034754"> </a>
           &quot;z&quot; THROUGH &quot;a&quot;<a name="wp1034755"> </a>
</pre></div>
<a name="wp1034756"> </a><p class="pIndented1">
If the ALSO phrase is specified, then <em class="cEmphasis">literal-1</em> and <em class="cEmphasis">literal-3</em> are assigned the same position in the collating sequence.  This is one of the most useful capabilities of the Format 2 ALPHABET clause.  For example, the following alphabet will cause the upper case and lower case of each letter to be treated as the same character for sorting: 
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
ALPHABET NO-CASE IS 1 THRU 65,   &#39;A&#39; ALSO &#39;a&#39;, <a name="wp1034758"> </a>
&#39;B&#39; ALSO &#39;b&#39;,   &#39;C&#39; ALSO &#39;c&#39;,   &#39;D&#39; ALSO &#39;d&#39;, <a name="wp1034759"> </a>
&#39;E&#39; ALSO &#39;e&#39;,   &#39;F&#39; ALSO &#39;f&#39;,   &#39;G&#39; ALSO &#39;g&#39;, <a name="wp1034760"> </a>
&#39;H&#39; ALSO &#39;h&#39;,   &#39;I&#39; ALSO &#39;i&#39;,   &#39;J&#39; ALSO &#39;j&#39;, <a name="wp1034761"> </a>
&#39;K&#39; ALSO &#39;k&#39;,   &#39;L&#39; ALSO &#39;l&#39;,   &#39;M&#39; ALSO &#39;m&#39;, <a name="wp1034762"> </a>
&#39;N&#39; ALSO &#39;n&#39;,   &#39;O&#39; ALSO &#39;o&#39;,   &#39;P&#39; ALSO &#39;p&#39;, <a name="wp1034763"> </a>
&#39;Q&#39; ALSO &#39;q&#39;,   &#39;R&#39; ALSO &#39;r&#39;,   &#39;S&#39; ALSO &#39;s&#39;, <a name="wp1034764"> </a>
&#39;T&#39; ALSO &#39;t&#39;,   &#39;U&#39; ALSO &#39;u&#39;,   &#39;V&#39; ALSO &#39;v&#39;, <a name="wp1034765"> </a>
&#39;W&#39; ALSO &#39;w&#39;,   &#39;X&#39; ALSO &#39;x&#39;,   &#39;Y&#39; ALSO &#39;y&#39;, <a name="wp1034766"> </a>
&#39;Z&#39; ALSO &#39;z&#39;<a name="wp1034767"> </a>
</pre></div>
<a name="wp1034768"> </a><p class="pIndented1">
The &quot;1 THRU 65&quot; phrase causes the portion of ASCII that exists in front of &quot;A&quot; to be sorted in its normal sequence (&quot;A&quot; is the 66th character in ASCII).  Then each lower-case character is mapped to its corresponding upper-case character.  The remaining characters then follow implicitly.
</p>
<a name="wp1034771"> </a><div class="pSmartList1"><li>The following IBM DOS/VS COBOL system names are supported by ACUCOBOL-GT in the SPECIAL-NAMES paragraph if the &quot;-Cv&quot; compiler option is used:</li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
   SYSPCH<a name="wp1034772"> </a>
   SYSPUNCH<a name="wp1034773"> </a>
   C01 through C12<a name="wp1034774"> </a>
   CSP<a name="wp1034775"> </a>
   S01 through S05<a name="wp1034776"> </a>
</pre></div>
<a name="wp1034777"> </a><p class="pIndented1">
See Chapter 5, &quot;IBM DOS/VS COBOL Conversions,&quot; in <em class="cEmphasis">Transitioning to ACUCOBOL-GT</em> for more information.
</p>
<a name="wp1034780"> </a><div class="pSmartList1"><li>The following HP COBOL special names are supported by ACUCOBOL-GT in the SPECIAL-NAMES paragraph if the &quot;-Cp&quot; compiler option is used:</li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
   NO SPACE CONTROL<a name="wp1034781"> </a>
   TOP<a name="wp1037221"> </a>
</pre></div>
<a name="wp1037222"> </a><p class="pIndented1">
See Chapter 4, &quot;HP COBOL Conversions,&quot; in <em class="cEmphasis">Transitioning to ACUCOBOL-GT</em> for more information.
</p>
</ol></div>
<a name="wp1037223"> </a><h3 class="pHeadingRef">
General Rules - Screen Control Entry
</h3>
<a name="wp1034786"> </a><p class="pBody">
In the following rules, the four elementary items belonging to the SCREEN CONTROL group item are referenced by the names in this example: 
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
01  SCREEN-CONTROL.<a name="wp1034787"> </a>
    03  ACCEPT-CONTROL     PIC 9.<a name="wp1034788"> </a>
    03  CONTROL-VALUE      PIC 999.<a name="wp1034789"> </a>
    03  CONTROL-HANDLE     USAGE HANDLE.<a name="wp1034790"> </a>
    03  CONTROL-ID         PIC X(2) COMP-X.<a name="wp1034791"> </a>
</pre></div>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1034792"> </a><div class="pSmartList1"><li>The following statement allows an embedded procedure to control its ACCEPT statement:</li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
[ <u class="cUnderline">SCREEN</u> <u class="cUnderline">CONTROL</u> IS control-name ]<a name="wp1034793"> </a>
</pre></div>
<a name="wp1034794"> </a><p class="pIndented1">
For more information, see <a  href="gt3557.htm#wp1037068">Section 5.9.6, &quot;PROCEDURE Clause,&quot;</a> and Book 1, section 6.5.5, &quot;Using Screen Section Embedded Procedures.&quot; 
</p>
<a name="wp1034796"> </a><div class="pSmartList1"><li>Input and update fields in a Screen Section entry are given <em class="cEmphasis">field numbers.*</em>  The compiler computes the field number for any Screen Section entry by examining all of the input and update fields in that entry's level 01 group item.  Each input and update field in a level 01 Screen Section entry is numbered sequentially, starting at one.  For example, consider the following Screen Section entry: </li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
01  SCREEN-1.<a name="wp1034797"> </a>
    03  LITERAL-1 VALUE &quot;Field 1: &quot;.<a name="wp1034798"> </a>
    03  FIELD-1, PIC X(5) TO WS-1.<a name="wp1034799"> </a>
    03  LITERAL-2 VALUE &quot;Some data: &quot;, LINE + 1.<a name="wp1034800"> </a>
    03  DATA-1, PIC X(5) FROM WS-2.<a name="wp1034801"> </a>
    03  LITERAL-3 VALUE &quot;Field 2: &quot;., LINE + 1.<a name="wp1034802"> </a>
    03  FIELD-2, PIC X(5) USING WS-3.<a name="wp1034803"> </a>
</pre></div>
<a name="wp1034804"> </a><p class="pIndented1">
This Screen Section entry has two input or update fields:  FIELD-1 and FIELD-2.  In this case, FIELD-1 is field number 1 and FIELD-2 is field number 2.  Note that LITERAL-1, LITERAL-2, and DATA-1 do not receive field numbers because they do not contain a TO or USING phrase--DATA-1 is a display-only (FROM) field.  The literals prompt the end user for entries.
</p>
<a name="wp1036402"> </a><p class="pIndented1">
*Graphical controls in the Screen Section are also assigned field numbers.  The rules that govern how field numbers are assigned to graphical controls are given in general rule 6 of the Format 2 Screen Description, in section 5.9, &quot;Screen Description Entry.&quot;
</p>
<a name="wp1034805"> </a><div class="pSmartList1"><li>Prior to executing an embedded procedure (see <a  href="gt3557.htm#wp1037068">section 5.9.6</a>), an ACCEPT statement initializes the SCREEN CONTROL variable.  It sets ACCEPT-CONTROL depending on the reason for entry (if it is a <em class="cEmphasis">notify</em> (&quot;NTF-...&quot;) event, ACCEPT-CONTROL is set to &quot;1&quot;; otherwise, the default is &quot;0&quot;), and it sets CONTROL-VALUE to the field number of the Screen Section entry that is executing the embedded procedure.  </li></div>
<a name="wp1034806"> </a><p class="pIndented1">
On entry to an embedded procedure, CONTROL-HANDLE contains the handle of the current control, and the CONTROL-ID field contains its ID.  If the current Screen Section item (the one that names the embedded procedure) is not a graphical control, CONTROL-HANDLE and CONTROL-ID are set to NULL and &quot;0&quot;, respectively.  
</p>
<a name="wp1034808"> </a><p class="pIndented1">
When the ACCEPT statement terminates, it sets ACCEPT-CONTROL to&#160;0 and sets CONTROL-VALUE to the field number of the last field to have the cursor.  This will be zero if the Screen Section entry contains no fields.  CONTROL-HANDLE and CONTROL-ID fields contain the handle and ID of the graphical control that was active when the ACCEPT terminated.  If the ACCEPT terminated while in a textual (i.e., non-graphical) field, they are set to NULL and &quot;0&quot;, respectively.  
</p>
<a name="wp1034809"> </a><div class="pSmartList1"><li>When an after procedure or exception procedure returns control to its ACCEPT statement, the value of SCREEN CONTROL determines what happens next.  By setting this value in your after or exception procedure, you can cause the program to skip fields, continue ACCEPTING data, or terminate the ACCEPT with or without an exception.  ACCEPT-CONTROL serves as a flag that is checked to determine how to proceed; SCREEN-CONTROL provides a needed value, as shown in this list:</li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1034810"> </a><div class="pSmartList2"><li>If ACCEPT-CONTROL is 0, the ACCEPT statement continues normally.  </li></div>
<a name="wp1034811"> </a><div class="pSmartList2"><li>If ACCEPT-CONTROL is 1, the ACCEPT statement moves the cursor to the field identified by the value of CONTROL-VALUE.  The ACCEPT statement then continues from there.  </li></div>
<a name="wp1034812"> </a><div class="pSmartList2"><li>If ACCEPT-CONTROL is 2, the ACCEPT statement terminates normally.  The value of CONTROL-VALUE determines the termination value of the ACCEPT statement.  You can determine its value by examining CRT STATUS or by using the ACCEPT FROM ESCAPE KEY verb.  </li></div>
<a name="wp1034813"> </a><div class="pSmartList2"><li>If ACCEPT-CONTROL is 3, the ACCEPT statement terminates with an exception, assuming that exceptions are allowed.  The value of CONTROL-VALUE sets the exception value of the ACCEPT statement.  You may use CRT STATUS or the ACCEPT FROM ESCAPE KEY verb to determine the statement's exception value.  </li></div>
<a name="wp1034814"> </a><div class="pSmartList2"><li>If ACCEPT-CONTROL is 4, control is transferred to the graphical control whose ID matches CONTROL-ID.  This works identically to setting ACCEPT-CONTROL to &quot;1&quot;, except that the CONTROL-ID field is used and the search is made using the control's ID instead of the field numbers. </li></div>
<a name="wp1034815"> </a><div class="pSmartList2"><li>If none of the preceding applies, the ACCEPT statement continues normally.  </li></div>
</ol></div>
<a name="wp1034816"> </a><div class="pSmartList1"><li>If you set ACCEPT-CONTROL to 1, several special cases exist:</li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1034817"> </a><div class="pSmartList2"><li>If you set CONTROL-VALUE to zero, the ACCEPT statement will remain in the current field.  </li></div>
<a name="wp1034818"> </a><div class="pSmartList2"><li>If you set CONTROL-VALUE to a field number that does not exist, the ACCEPT statement will terminate.  In this case, the CRT STATUS value for the ACCEPT statement will be zero for a numeric CRT STATUS or &quot;0&quot;, &quot;2&quot;, x&quot;00&quot; for a group-item CRT STATUS.</li></div>
<a name="wp1034819"> </a><div class="pSmartList2"><li>If you set CONTROL-VALUE to the field number of a protected field, control will pass to the first unprotected field with a higher field number.  If no such field exists, the ACCEPT statement will terminate as in case (b) above.  </li></div>
</ol></div>
<a name="wp1034820"> </a><div class="pSmartList1"><li>When a Screen Section ACCEPT statement executes, it examines the value of SCREEN CONTROL.  If the ACCEPT-CONTROL field is 1, then the ACCEPT statement starts at the field identified by CONTROL-VALUE.  This overrides any initial field identified by the CURSOR Special-Names entry.  Note that this is usually easier than using the CURSOR clause to identify a starting point in a Screen Section ACCEPT.  If the specified field does not exist (or is protected) the cursor is placed at the numerically closest legal field.  If two fields are equally close, the one with the larger field number is used.  </li></div>
</ol></div>
<a name="wp1034821"> </a><h3 class="pHeadingRef">
General Rules - Event Status Entry
</h3>
<a name="wp1034822"> </a><p class="pBody">
EVENT-STATUS is used to identify which data item is to receive information about screen events. 
</p>
<a name="wp1034823"> </a><p class="pBody">
In the description below, the seven elementary items belonging to the EVENT-STATUS group item are referenced by the names in this example:
</p>
<div class="pPreformatted"><pre class="pPreformatted">
01 EVENT-STATUS.<a name="wp1034824"> </a>
   03  EVENT-TYPE           PIC X(4) COMP-X.<a name="wp1034825"> </a>
   03  EVENT-WINDOW-HANDLE  USAGE HANDLE OF WINDOW.<a name="wp1034826"> </a>
   03  EVENT-CONTROL-HANDLE USAGE HANDLE.<a name="wp1034827"> </a>
   03  EVENT-CONTROL-ID     PIC X(2) COMP-X.<a name="wp1034828"> </a>
   03  EVENT-DATA-1         USAGE SIGNED-SHORT.<a name="wp1034829"> </a>
   03  EVENT-DATA-2         USAGE SIGNED-LONG.<a name="wp1034830"> </a>
   03  EVENT-ACTION         PIC X COMP-X.<a name="wp1034831"> </a>
</pre></div>
<a name="wp1034832"> </a><p class="pBody">
When a system event occurs during an ACCEPT statement, the EVENT-STATUS data item is filled with the following information:
</p>
<a name="wp1035920"> </a><h5 class="pHeading4">
EVENT-TYPE
</h5>
<a name="wp1035921"> </a><p class="pBody">
Holds a value that uniquely identifies the kind of event that occurred.  The valid types are described in Chapter 6 of Book 2, <em class="cEmphasis">User Interface Programming.</em>  
</p>
<a name="wp1034835"> </a><h5 class="pHeading4">
EVENT-WINDOW-HANDLE 
</h5>
<a name="wp1035667"> </a><p class="pBody">
Holds the handle of the floating window in which the event occurred.  If the event occurred in a control, this will be the handle of the floating window that contains the control.  
</p>
<a name="wp1034837"> </a><h5 class="pHeading4">
EVENT-CONTROL-HANDLE
</h5>
<a name="wp1035668"> </a><p class="pBody">
Holds the handle of the control in which the event occurred.  If the event did not occur in a control, this item is set to NULL.
</p>
<a name="wp1034839"> </a><h5 class="pHeading4">
EVENT-CONTROL-ID
</h5>
<a name="wp1035669"> </a><p class="pBody">
Holds the ID of the control in which the event occurred.   IDs are assigned by the application when each control is created.  If the event did not occur in a control, this item will have the value zero.  
</p>
<a name="wp1034841"> </a><h5 class="pHeading4">
EVENT-DATA-1
</h5>
<a name="wp1035670"> </a><p class="pBody">
Holds information about the event that is unique for each EVENT-TYPE.  For many events, this value will always be zero.  
</p>
<a name="wp1034843"> </a><h5 class="pHeading4">
EVENT-DATA-2
</h5>
<a name="wp1035671"> </a><p class="pBody">
Also holds information about the event that is unique for each EVENT-TYPE.  For many events, this value will always be zero.  
</p>
<a name="wp1034845"> </a><h5 class="pHeading4">
EVENT-ACTION
</h5>
<a name="wp1036597"> </a><p class="pBody">
Holds a value that determines the continued handling of an event when an event procedure terminates.  On entry to the procedure, EVENT-ACTION is set to zero.  The following values are meaningful on exit from the procedure (symbolic names in &quot;acugui.def&quot;):
</p>
<a name="wp1036609"> </a><p class="pBodyRelative">
</p><div>
<table border="0" cellpadding="6" cellspacing="1">
  <caption></caption>
  <tr align="left" valign="top">    <td><a name="wp1036615"> </a><p class="pCellBody">
<b class="cBold">EVENT-ACTION-NORMAL</b>
</p>
</td>
    <td><a name="wp1036617"> </a><p class="pCellBody">
(value 0)   The event is processed normally, causing the control to terminate for terminating events.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036619"> </a><p class="pCellBody">
<b class="cBold">EVENT-ACTION-TERMINATE</b>
</p>
</td>
    <td><a name="wp1036621"> </a><p class="pCellBody">
(value 1)   The event is processed normally, and then it terminates the active control.  This action forces termination of events that do not normally terminate.  
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036623"> </a><p class="pCellBody">
<b class="cBold">EVENT-ACTION-CONTINUE</b>
</p>
</td>
    <td><a name="wp1036625"> </a><p class="pCellBody">
(value 2)   The event is processed normally, but it does not terminate the active control, even if it would ordinarily do so.  
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036627"> </a><p class="pCellBody">
<b class="cBold">EVENT-ACTION-IGNORE<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</b>
</p>
</td>
    <td><a name="wp1036629"> </a><p class="pCellBody">
(value 3)   The event is not processed further, but it does not terminate the active control.  We do not recommend this action because it short-circuits the runtime's event handler.  Events receive a certain amount of processing before the event procedure is entered.  Ignoring an event does not prevent this processing from occurring. 
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036631"> </a><p class="pCellBody">
<b class="cBold">EVENT-ACTION-FAIL</b>
</p>
</td>
    <td><a name="wp1036633"> </a><p class="pCellBody">
(value 4)   This setting is used in response to certain events to indicate that a specific action should be taken, usually to prevent the event from taking its normal action.  Events that use this setting state that they do so in the event description, along with a description of the effects of setting it.  
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1036635"> </a><p class="pCellBody">
<b class="cBold">EVENT-ACTION-FAIL<br />&#160;&#160;&#160;&#160;&#160;-TERMINATE</b>
</p>
</td>
    <td><a name="wp1036637"> </a><p class="pCellBody">
(value 7)  The effect of this setting is exactly the same as that of EVENT-ACTION-FAIL with the additional effect of EVENT-ACTION-TERMINATE: after performing the &quot;fail&quot; operation, the control terminates with an exception status of W-EVENT.
</p>
</td>
</tr>
</table>
</div>
<p class="pBodyRelative">
</p>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
