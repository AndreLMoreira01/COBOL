<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.5.1025" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/14/06 08:28:08" />
  <title>CREATE Statement</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       ACUCOBOL-GT Reference Manual <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="gt36.htm"><br />Chapter 6:  Procedure Division</a> &gt; <a href="gt3678.htm">6.6  Procedure Division Statements </a> &gt; </p>
<a name="wp1037201"> </a><h2 class="pHeading2">
CREATE Statement
</h2>
<a name="wp1190362"> </a><p class="pBody">
The CREATE statement creates a new instance of a non-graphical object such as a COM object or .NET assembly.  Use it specifically for objects or assemblies that are not visual in nature.  Use the Screen Section or DISPLAY statement to create an instance of a graphical .NET assembly or an ActiveX control.
</p>
<a name="wp1111262"> </a><p class="pNote">
<hr />
<b>Note:  </b>CREATE can be used with thin client applications to create instances of an object on the client or on remote Windows servers. CREATE cannot be used to create an object on a non-Windows server such as UNIX or VMS; however, non-Windows servers running AcuConnect can provide connectivity to Windows servers in a multitiered configuration. 
<hr />
</p>
<a name="wp1171878"> </a><p class="pBody">
The formats of the CREATE statement include:
</p>
<div class="pSmartList1"><ul class="pSmartList1">
<a name="wp1171879"> </a><div class="pSmartList1"><li>Format 1:  CREATE object-name</li></div>
<a name="wp1171880"> </a><div class="pSmartList1"><li>Format 2:  CREATE assembly-name</li></div>
</ul></div>
<a name="wp1165942"> </a><h3 class="pHeadingRef">
General Format
</h3>
<a name="wp1172449"> </a><h3 class="pHeadingRef">
Format 1
</h3>
<a name="wp1172450"> </a><p class="pBody">
<span class="cBoldItalic">CREATE object-name</span> creates a COM object.
</p>
<div class="pPreformatted"><pre class="pPreformatted">
<a name="wp1172451"> </a>
<u class="cUnderline">CREATE</u> object-name<a name="wp1172461"> </a>
 <a name="wp1199836"> </a>
<u class="cUnderline">HANDLE</u> { IN } object-handle<a name="wp1199828"> </a>
       { IS }<a name="wp1199829"> </a>
</pre></div>
<a name="wp1037207"> </a><p class="pBody">
Remaining phrases are optional.
</p>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">SERVER-NAME</u> { IS } server-name<a name="wp1037208"> </a>
            { =  }<a name="wp1037209"> </a>
<u class="cUnderline">LICENSE-KEY</u> { IS } license-key<a name="wp1037210"> </a>
            { =  }<a name="wp1037211"> </a>
<span style="font-family: Arial, Verdana, Helvetica, sans-serif; text-decoration: underline">EVENT</span> PROCEDURE IS { proc-1 [ {THROUGH} proc-2 ] }<a name="wp1191959"> </a>
                              {THRU } <a name="wp1191960"> </a>
                   { NULL } <a name="wp1191961"> </a>
</pre></div>
<a name="wp1165947"> </a><h3 class="pHeadingRef">
Format 2
</h3>
<a name="wp1172463"> </a><p class="pBody">
<span class="cBoldItalic">CREATE assembly-name</span> creates a non-graphical .NET object.
</p>
<div class="pPreformatted"><pre class="pPreformatted">
<a name="wp1172464"> </a>
<u class="cUnderline">CREATE</u> &quot;assembly-name&quot; <a name="wp1165948"> </a>
<a name="wp1199936"> </a>
<u class="cUnderline">NAMESPACE</u> { IS } &quot;namespace&quot;<a name="wp1165325"> </a>
<a name="wp1165326"> </a>
<u class="cUnderline">CLASS-NAME</u> { IS } &quot;class-name&quot;<a name="wp1165327"> </a>
 <a name="wp1200044"> </a>
<u class="cUnderline">HANDLE</u> { IN } object-handle<a name="wp1200045"> </a>
       { IS }<a name="wp1200046"> </a>
</pre></div>
<a name="wp1165329"> </a><p class="pBody">
Remaining phrases are optional.
</p>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">VERSION</u> { IS } &quot;version&quot;<a name="wp1165331"> </a>
<a name="wp1165332"> </a>
<u class="cUnderline">CULTURE</u> { IS } &quot;culture&quot;<a name="wp1165333"> </a>
<a name="wp1165334"> </a>
<u class="cUnderline">STRONG-NAME</u> { IS } &quot;strong-name&quot;<a name="wp1165335"> </a>
<a name="wp1165336"> </a>
<u class="cUnderline">CONSTRUCTOR</u> { IS } CONSTRUCTOR[n] <em class="cEmphasis">parameters</em>...<a name="wp1165337"> </a>
<a name="wp1165338"> </a>
<u class="cUnderline">MODULE</u> { IS } &quot;module&quot;<a name="wp1165339"> </a>
<a name="wp1165340"> </a>
<u class="cUnderline">FILE-PATH</u> { IS } &quot;file-path&quot;<a name="wp1165341"> </a>
</pre></div>
<a name="wp1037214"> </a><h3 class="pHeadingRef">
Syntax Rules
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1172479"> </a><div class="pSmartList1"><li><em class="cEmphasis">Object-name</em> is an optionally qualified name of a COM object defined in the special-names paragraph.</li></div>
<a name="wp1172480"> </a><div class="pSmartList1"><li><em class="cEmphasis">Server-name</em> is an alphanumeric literal or data item.</li></div>
<a name="wp1172481"> </a><div class="pSmartList1"><li><em class="cEmphasis">License-key</em> is an alphanumeric literal or data item.</li></div>
<a name="wp1177691"> </a><div class="pSmartList1"><li><em class="cEmphasis">Object-handle</em> is a USAGE HANDLE data item.</li></div>
<a name="wp1191973"> </a><div class="pSmartList1"><li><span style="font-family: Arial, Verdana, Helvetica, sans-serif; font-style: italic">Proc-1</span> and <span style="font-family: Arial, Verdana, Helvetica, sans-serif; font-style: italic">proc-2</span> are procedure names relating to COM events.  (For more information on COM events and event procedures, see section 4.4 in <em class="cEmphasis">A Guide to Interoperating with ACUCOBOL-GT</em>.)</li></div>
<a name="wp1177692"> </a><div class="pSmartList1"><li>Any value surrounded by quotation marks is an alphanumeric literal and is case-sensitive.</li></div>
</ol></div>
<a name="wp1037219"> </a><h3 class="pHeadingRef">
General Rules
</h3>
<a name="wp1166031"> </a><h3 class="pHeadingRef">
Format 1 (CREATE object-name)
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1037220"> </a><div class="pSmartList1"><li><em class="cEmphasis">Server-name</em> identifies a remote machine on which to create and execute the COM object.  It can be specified as a UNC, DNS name, or IP address.  Server-name must be the name of a Windows machine.  CREATE cannot create objects on UNIX or VMS servers.</li></div>
<a name="wp1037221"> </a><div class="pSmartList1"><li>Some COM objects are licensed for run time using a license key that is provided to you by the object vendor. This license key is a text string usually located in a &quot;.lic&quot; file. By setting the value of the LICENSE-KEY property to this license key, you embed this license key in your COBOL program. Then when you run your COBOL program, the license key is passed to the COM object for verification. You do not send the &quot;.lic&quot; file or license key to the end-user.   Set LICENSE-KEY when you create the object (i.e., in the CREATE statement).  The default value is &quot;  &quot;.  When LICENSE-KEY is &quot;  &quot; (i.e., the default) and the COM object supports the licensing mechanism, the control performs its own license verification. Some objects require a &quot;.lic&quot; file to do this.  Others may check the system registry or hard disk for other properly installed and licensed software. </li></div>
</ol></div>
<a name="wp1166044"> </a><h3 class="pHeadingRef">
Format 2 (CREATE assembly-name)
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1172508"> </a><div class="pSmartList1"><li>Literal values for assembly parameters are located in the COPY file generated by the NETDEFGEN utility.  The same COPY file must be included in the SPECIAL-NAMES paragraph of your program.</li></div>
<a name="wp1166052"> </a><div class="pSmartList1"><li><em class="cEmphasis">Assembly-name</em> is the name of a .NET assembly defined in the NETDEFGEN COPY file. This must be the DLL name of a non-graphical control, not an executable file.  Non-graphical controls are generated by Visual Studio when a developer selects a &quot;Class Library&quot; project type.</li></div>
<a name="wp1166053"> </a><div class="pSmartList1"><li><em class="cEmphasis">Namespace</em> is a NameSpace in the assembly.</li></div>
<a name="wp1166054"> </a><div class="pSmartList1"><li><em class="cEmphasis">Class-name</em> is a class in the NameSpace.</li></div>
<a name="wp1166055"> </a><div class="pSmartList1"><li>Version<span style="font-family: Arial, Verdana, Helvetica, sans-serif; font-style: normal"> is the version number of the assembly.</span></li></div>
<a name="wp1166056"> </a><div class="pSmartList1"><li><span style="font-family: Arial, Verdana, Helvetica, sans-serif; font-style: italic">Culture</span> is cultural information related to the assembly.</li></div>
<a name="wp1166057"> </a><div class="pSmartList1"><li><span style="font-family: Arial, Verdana, Helvetica, sans-serif; font-style: italic">Strong-name</span> is the cryptographic key required to access the assembly, if any.  If the assembly requires such a key, as all assemblies in the Global Assembly Cache (GAC) do, it is shown in the COPY file under the keyword STRONG.</li></div>
<a name="wp1166058"> </a><div class="pSmartList1"><li>All classes that result in an object have a CONSTRUCTOR, which is a sort of method.  If you see a CONSTRUCTOR identifier in the COPY file without a parameter list, the field may be omitted from your COBOL program.  If all listed CONSTRUCTORs have parameters, then you must choose which CONSTRUCTOR and parameters to use.  <em class="cEmphasis">Constructor</em>(n) is the constructor that you want to use followed by its parameter data.  </li></div>
<a name="wp1166059"> </a><div class="pSmartList1"><li><em class="cEmphasis">Module</em> identifies a file where a combination of NameSpaces and Classes  resides.  It is used when the assembly is constructed of other assemblies.</li></div>
<a name="wp1166060"> </a><div class="pSmartList1"><li><em class="cEmphasis">File-path</em> is the path of an XML file, and that XML file contains the path where the .NET assembly is located.  Use FILE-PATH when the assembly that you want to access does not reside in the GAC or in the same directory as &quot;wrun32.exe&quot;. Assemblies that reside in the GAC will have the STRONG keyword in the NETDEFGEN COPY file.</li></div>
</ol></div>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
