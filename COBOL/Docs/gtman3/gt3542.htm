<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.5.1025" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/14/06 08:27:52" />
  <title>5.7.1.8  USAGE clause</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       ACUCOBOL-GT Reference Manual <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="gt35.htm"><br />Chapter 5:  Data Division</a> &gt; <a href="gt3533.htm">5.7  Record Description Entry</a> &gt; <a href="gt3534.htm">5.7.1  Data Description Entry</a> &gt; </p>
<a name="wp1035521"> </a><h2 class="pHeading3">
5.7.1.8  USAGE clause
</h2>
<a name="wp1035524"> </a><p class="pBody">
The USAGE clause specifies the format of a data item in computer memory or in a file record.
</p>
<a name="wp1035525"> </a><p class="pBody">
In some circumstances, a data item's file-record format may differ from its computer-memory format as specified by the USAGE clause.  This can occur when non-COBOL file systems with different data storage formats are being accessed through an interface.  For example, Acu4GL uses SQL to access non-COBOL file systems, and in the process a translation occurs on the data.
</p>
<a name="wp1035526"> </a><h3 class="pHeadingRef">
General Format
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
[ <u class="cUnderline">USAGE</u> IS ] {<u class="cUnderline">COMPUTATIONAL</u>                                 }<a name="wp1035527"> </a>
             {<u class="cUnderline">COMP</u>                                          }<a name="wp1035528"> </a>
             {<u class="cUnderline">COMPUTATIONAL-1</u>                               }<a name="wp1035529"> </a>
             {<u class="cUnderline">COMP-1</u>                                        }<a name="wp1035530"> </a>
             {<u class="cUnderline">COMPUTATIONAL-2</u>                               }<a name="wp1035531"> </a>
             {<u class="cUnderline">COMP-2</u>                                        }<a name="wp1035532"> </a>
             {<u class="cUnderline">COMPUTATIONAL-3</u>                               }<a name="wp1035533"> </a>
             {<u class="cUnderline">COMP-3</u>                                        }<a name="wp1035534"> </a>
             {<u class="cUnderline">COMPUTATIONAL-4</u>                               }<a name="wp1035535"> </a>
             {<u class="cUnderline">COMP</u>-4                                        }<a name="wp1035536"> </a>
             {<u class="cUnderline">COMPUTATIONAL-5</u>                               }<a name="wp1035537"> </a>
             {<u class="cUnderline">COMP-5</u>                                        }<a name="wp1035538"> </a>
             {<u class="cUnderline">COMPUTATIONAL-6</u>                               }<a name="wp1035539"> </a>
             {<u class="cUnderline">COMP-6</u>                                        }<a name="wp1035540"> </a>
             {<u class="cUnderline">COMPUTATIONAL-X</u>                               }<a name="wp1035541"> </a>
             {<u class="cUnderline">COMP-X</u>                                        }<a name="wp1035542"> </a>
             {<u class="cUnderline">COMPUTATIONAL-N</u>                               }<a name="wp1035543"> </a>
             {<u class="cUnderline">COMP-N</u>                                        }<a name="wp1035544"> </a>
             {<u class="cUnderline">BINARY</u>                                        }<a name="wp1035545"> </a>
             {<u class="cUnderline">PACKED-DECIMAL</u>                                }<a name="wp1035546"> </a>
             {<u class="cUnderline">DISPLAY</u>                                       }<a name="wp1035547"> </a>
             {<u class="cUnderline">INDEX</u>                                         }<a name="wp1035548"> </a>
             {<u class="cUnderline">POINTER</u>                                       }<a name="wp1035549"> </a>
             {<u class="cUnderline">FLOAT</u>                                         }<a name="wp1035550"> </a>
             {<u class="cUnderline">DOUBLE</u>                                        }<a name="wp1035551"> </a>
             {<u class="cUnderline">SIGNED-SHORT</u>                                  }<a name="wp1035552"> </a>
             {<u class="cUnderline">UNSIGNED-SHORT</u>                                }<a name="wp1035553"> </a>
             {<u class="cUnderline">SIGNED-INT</u>                                    }<a name="wp1035554"> </a>
             {<u class="cUnderline">UNSIGNED-INT</u>                                  }<a name="wp1035555"> </a>
             {<u class="cUnderline">SIGNED-LONG</u>                                   }<a name="wp1035556"> </a>
             {<u class="cUnderline">UNSIGNED-LONG</u>                                 }<a name="wp1035557"> </a>
             {<u class="cUnderline">HANDLE</u> [ OF {<u class="cUnderline">WINDOW</u>                       } ] }<a name="wp1035558"> </a>
                          {<u class="cUnderline">SUBWINDOW</u>                    }<a name="wp1035559"> </a>
                          {<u class="cUnderline">FONT</u> [font-name]             }<a name="wp1035560"> </a>
                          {control-type                 }<a name="wp1035561"> </a>
                          {<u class="cUnderline">THREAD</u>                       }<a name="wp1035562"> </a>
                          {<u class="cUnderline">MENU</u>                         }<a name="wp1035563"> </a>
                          {<u class="cUnderline">VARIANT</u>                      }<a name="wp1035564"> </a>
                          {<u class="cUnderline">LAYOUT-MANAGER</u> [layout-name] }<a name="wp1058360"> </a>
</pre></div>
<a name="wp1035566"> </a><h3 class="pHeadingRef">
Syntax Rules
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1035568"> </a><div class="pSmartList1"><li>The column on the left shows the accepted abbreviations for the terms on the right: </li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
COMP      COMPUTATIONAL <a name="wp1035570"> </a>
COMP-1    COMPUTATIONAL-1<a name="wp1035572"> </a>
COMP-2    COMPUTATIONAL-2<a name="wp1035574"> </a>
COMP-3    COMPUTATIONAL-3<a name="wp1035576"> </a>
COMP-4    COMPUTATIONAL-4<a name="wp1035578"> </a>
COMP-5    COMPUTATIONAL-5<a name="wp1035580"> </a>
COMP-6    COMPUTATIONAL-6<a name="wp1035582"> </a>
COMP-X    COMPUTATIONAL-X<a name="wp1035584"> </a>
COMP-N    COMPUTATIONAL-N<a name="wp1035586"> </a>
</pre></div>
<a name="wp1035587"> </a><div class="pSmartList1"><li>A USAGE clause may be used in any data description entry except those with level-numbers 66, 78, and 88.</li></div>
<a name="wp1035588"> </a><div class="pSmartList1"><li>A USAGE clause may not be used with an external floating-point data item.</li></div>
<a name="wp1035589"> </a><div class="pSmartList1"><li>If a USAGE clause is in the data description entry for a group item, then any USAGE clauses that appear for subordinate entries must be of the same type.</li></div>
<a name="wp1035590"> </a><div class="pSmartList1"><li>The PICTURE string of a COMP, COMP-1, COMP-2, COMP-3, COMP-4, COMP-5, COMP-6, BINARY, or PACKED-DECIMAL item can contain only the symbols &quot;9&quot;, &quot;S&quot;, &quot;V&quot;, and &quot;P&quot;.  COMP-6 items may not use the &quot;S&quot; symbol.  </li></div>
<a name="wp1097549"> </a><div class="pSmartList1"><li>The PICTURE string of a COMP-X or COMP-N item may contain only all &quot;9&quot; symbols or all &quot;X&quot; symbols.  </li></div>
<a name="wp1097550"> </a><div class="pSmartList1"><li>The data description entry for a USAGE IS INDEX data item cannot contain any of the following clauses: BLANK WHEN ZERO, JUSTIFIED, PICTURE, and VALUE IS. </li></div>
<a name="wp1035594"> </a><div class="pSmartList1"><li>Level 88 items may not be specified for a USAGE IS INDEX data item.</li></div>
<a name="wp1035595"> </a><div class="pSmartList1"><li>The data description entry for a USAGE IS POINTER data item cannot contain any of the following clauses: BLANK WHEN ZERO, JUSTIFIED, or PICTURE.  A POINTER data item may have a value clause specified for it, but the value must be the word NULL.</li></div>
<a name="wp1035597"> </a><div class="pSmartList1"><li>The data description entry for a USAGE IS FLOAT or a USAGE IS DOUBLE data item cannot contain any of the following clauses:  BLANK WHEN ZERO, JUSTIFIED, or PICTURE.  FLOAT or DOUBLE data items may have a value clause. The value may be a floating point literal, a numeric literal, or the word ZERO.  Here is an example of a Working-Storage Section data item: </li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
01  F-DATA-1  USAGE IS FLOAT <a name="wp1035600"> </a>
              VALUE IS 3.97E+24.<a name="wp1035601"> </a>
</pre></div>
<a name="wp1035602"> </a><div class="pSmartList1"><li>The following are collectively called the &quot;C-style&quot; data types: SIGNED-INT, UNSIGNED-INT, SIGNED-SHORT, UNSIGNED-SHORT, SIGNED-LONG, UNSIGNED-LONG.  These data types are similar to the data types found in the C programming language.</li></div>
<a name="wp1035605"> </a><p class="pIndented1">
The data description entry for a C-style data type cannot contain any of the following clauses: BLANK WHEN ZERO, JUSTIFIED, or PICTURE.
</p>
<a name="wp1035606"> </a><div class="pSmartList1"><li><em class="cEmphasis">Control-type</em> is one of the graphical control type names known to the compiler, such as LABEL or ENTRY-FIELD, or the name of an ActiveX, COM, or .NET control.</li></div>
<a name="wp1035607"> </a><div class="pSmartList1"><li>The data description entry for USAGE HANDLE data items may not contain any of the following clauses: BLANK WHEN ZERO, JUSTIFIED, or PICTURE.  If it contains a VALUE clause, the value specified must be the word NULL.</li></div>
<a name="wp1035608"> </a><div class="pSmartList1"><li><em class="cEmphasis">Font-name</em> is one of the following identifiers: DEFAULT-FONT, FIXED-FONT, TRADITIONAL-FONT, SMALL-FONT, MEDIUM-FONT, LARGE-FONT.</li></div>
<a name="wp1092885"> </a><div class="pSmartList1"><li>It should be noted that either the &quot;-Df&quot; option or the &quot;-Cv&quot; option will cause the compiler to treat COMP-1 and COMP-2 as FLOAT and DOUBLE, respectively.  For more information, see section 5.4 in <em class="cEmphasis">Transitioning to ACUCOBOL-GT</em>.</li></div>
<a name="wp1092886"> </a><div class="pSmartList1"><li><em class="cEmphasis">Layout-name</em> is the name of one of the system's standard layout managers.  Currently, this can only be LM-RESIZE.</li></div>
</ol></div>
<a name="wp1035611"> </a><h3 class="pHeadingRef">
General Rules
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1035612"> </a><div class="pSmartList1"><li>A USAGE clause written at a group level applies to every elementary item subordinate to that group item.  </li></div>
<a name="wp1035613"> </a><div class="pSmartList1"><li>If no USAGE clause is specified, then USAGE IS DISPLAY is implied.  </li></div>
<a name="wp1035614"> </a><div class="pSmartList1"><li>The internal format of a USAGE IS DISPLAY item is ASCII. </li></div>
<a name="wp1035615"> </a><div class="pSmartList1"><li>The format of an index item is 32-bit unsigned binary.  Its size is always four, and it holds a range of values from 0 to 2147483647.</li></div>
<a name="wp1035617"> </a><div class="pSmartList1"><li>The format of a COMP-1 data item is 16-bit signed binary.  The legal values range from -32767 to 32767.  The size of the data item is always two bytes, and the high-order half of the data is stored in the leftmost byte. The PICTURE string that describes the item is irrelevant.  Unlike other numeric data types, a size error will occur on a COMP-1, COMP-X, or COMP-N data item only when the value exceeds the physical storage of the item (in other words, the number of &quot;9&quot;s in the item's PICTURE is ignored when size error is determined). </li></div>
<a name="wp1035619"> </a><div class="pSmartList1"><li>For COMP-2 (decimal storage), each digit is stored in one byte in decimal format.  If the value is signed, then an additional trailing byte is allocated for the sign.  The storage of COMP-2 is identical with USAGE DISPLAY with the high-order four bits stripped from each byte.  </li></div>
<a name="wp1035621"> </a><div class="pSmartList1"><li>For COMP-3 (packed-decimal storage), two digits are stored in each byte. An additional half byte is allocated for the sign, even if the value is unsigned.  The sign is placed in the rightmost position, and its value is 0x0D for negative; all other values are treated as positive (but see rule 18 below).  The size of an item (including one for the implied sign) is divided by two to arrive at its actual size (rounding fractions up).  </li></div>
<a name="wp1035623"> </a><div class="pSmartList1"><li>The format of a COMP-4 item is two's-complement binary (the value without its decimal point).  COMP-4 values are stored in a machine-independent format. This format places the highest-order part of the value in the leftmost position and follows down to the low-order part in the rightmost position.  The number of bytes a data item occupies depends on the number of &quot;9&quot;s in its PICTURE and on the presence of various compile-time options. For example, you may include more than eighteen &quot;9&quot;s only if your program has been compiled for 31-digit support. This is summarized in the following table:</li></div>
<a name="wp1038554"> </a><p class="pBodyRelative">
<div>
<table border="1" cellpadding="2" cellspacing="2">
  <caption></caption>
  <tr align="left" valign="top">    <th><a name="wp1070062"> </a>
# of &quot;9&quot;s

</th>
    <th><a name="wp1070064"> </a>
Default

</th>
    <th><a name="wp1070066"> </a>
-D1

</th>
    <th><a name="wp1070068"> </a>
-Dm

</th>
    <th><a name="wp1070070"> </a>
-D7

</th>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070072"> </a><p class="pCellBody">
1-2
</p>
</td>
    <td><a name="wp1070074"> </a><p class="pCellBody">
2
</p>
</td>
    <td><a name="wp1070076"> </a><p class="pCellBody">
1
</p>
</td>
    <td><a name="wp1070078"> </a><p class="pCellBody">
1
</p>
</td>
    <td><a name="wp1070080"> </a><p class="pCellBody">
1
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070082"> </a><p class="pCellBody">
3-4
</p>
</td>
    <td><a name="wp1070084"> </a><p class="pCellBody">
2
</p>
</td>
    <td><a name="wp1070086"> </a><p class="pCellBody">
2
</p>
</td>
    <td><a name="wp1070088"> </a><p class="pCellBody">
2
</p>
</td>
    <td><a name="wp1070090"> </a><p class="pCellBody">
2
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070092"> </a><p class="pCellBody">
5-6
</p>
</td>
    <td><a name="wp1070094"> </a><p class="pCellBody">
4
</p>
</td>
    <td><a name="wp1070096"> </a><p class="pCellBody">
4
</p>
</td>
    <td><a name="wp1070098"> </a><p class="pCellBody">
3
</p>
</td>
    <td><a name="wp1070100"> </a><p class="pCellBody">
3
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070102"> </a><p class="pCellBody">
7
</p>
</td>
    <td><a name="wp1070104"> </a><p class="pCellBody">
4
</p>
</td>
    <td><a name="wp1070106"> </a><p class="pCellBody">
4
</p>
</td>
    <td><a name="wp1070108"> </a><p class="pCellBody">
4
</p>
</td>
    <td><a name="wp1070110"> </a><p class="pCellBody">
3
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070112"> </a><p class="pCellBody">
8-9
</p>
</td>
    <td><a name="wp1070114"> </a><p class="pCellBody">
4
</p>
</td>
    <td><a name="wp1070116"> </a><p class="pCellBody">
4
</p>
</td>
    <td><a name="wp1070118"> </a><p class="pCellBody">
4
</p>
</td>
    <td><a name="wp1070120"> </a><p class="pCellBody">
4
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070122"> </a><p class="pCellBody">
10-11
</p>
</td>
    <td><a name="wp1070124"> </a><p class="pCellBody">
8
</p>
</td>
    <td><a name="wp1070126"> </a><p class="pCellBody">
8
</p>
</td>
    <td><a name="wp1070128"> </a><p class="pCellBody">
5
</p>
</td>
    <td><a name="wp1070130"> </a><p class="pCellBody">
5
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070132"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070134"> </a><p class="pCellBody">
8
</p>
</td>
    <td><a name="wp1070136"> </a><p class="pCellBody">
8
</p>
</td>
    <td><a name="wp1070138"> </a><p class="pCellBody">
6
</p>
</td>
    <td><a name="wp1070140"> </a><p class="pCellBody">
5
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070142"> </a><p class="pCellBody">
13-14
</p>
</td>
    <td><a name="wp1070144"> </a><p class="pCellBody">
8
</p>
</td>
    <td><a name="wp1070146"> </a><p class="pCellBody">
8
</p>
</td>
    <td><a name="wp1070148"> </a><p class="pCellBody">
6
</p>
</td>
    <td><a name="wp1070150"> </a><p class="pCellBody">
6
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070152"> </a><p class="pCellBody">
15-16
</p>
</td>
    <td><a name="wp1070154"> </a><p class="pCellBody">
8
</p>
</td>
    <td><a name="wp1070156"> </a><p class="pCellBody">
8
</p>
</td>
    <td><a name="wp1070158"> </a><p class="pCellBody">
7
</p>
</td>
    <td><a name="wp1070160"> </a><p class="pCellBody">
7
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070162"> </a><p class="pCellBody">
17-18
</p>
</td>
    <td><a name="wp1070164"> </a><p class="pCellBody">
8
</p>
</td>
    <td><a name="wp1070166"> </a><p class="pCellBody">
8
</p>
</td>
    <td><a name="wp1070168"> </a><p class="pCellBody">
8
</p>
</td>
    <td><a name="wp1070170"> </a><p class="pCellBody">
8
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070172"> </a><p class="pCellBody">
19
</p>
</td>
    <td><a name="wp1070174"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070176"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070178"> </a><p class="pCellBody">
9
</p>
</td>
    <td><a name="wp1070180"> </a><p class="pCellBody">
8,9
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070182"> </a><p class="pCellBody">
20
</p>
</td>
    <td><a name="wp1070184"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070186"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070188"> </a><p class="pCellBody">
9
</p>
</td>
    <td><a name="wp1070190"> </a><p class="pCellBody">
9
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070192"> </a><p class="pCellBody">
21
</p>
</td>
    <td><a name="wp1070194"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070196"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070198"> </a><p class="pCellBody">
9
</p>
</td>
    <td><a name="wp1070200"> </a><p class="pCellBody">
9
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070202"> </a><p class="pCellBody">
22
</p>
</td>
    <td><a name="wp1070204"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070206"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070208"> </a><p class="pCellBody">
10
</p>
</td>
    <td><a name="wp1070210"> </a><p class="pCellBody">
10
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070212"> </a><p class="pCellBody">
23
</p>
</td>
    <td><a name="wp1070214"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070216"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070218"> </a><p class="pCellBody">
10
</p>
</td>
    <td><a name="wp1070220"> </a><p class="pCellBody">
10
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070222"> </a><p class="pCellBody">
24
</p>
</td>
    <td><a name="wp1070224"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070226"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070228"> </a><p class="pCellBody">
11
</p>
</td>
    <td><a name="wp1070230"> </a><p class="pCellBody">
10,11
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070232"> </a><p class="pCellBody">
25
</p>
</td>
    <td><a name="wp1070234"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070236"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070238"> </a><p class="pCellBody">
11
</p>
</td>
    <td><a name="wp1070240"> </a><p class="pCellBody">
11
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070242"> </a><p class="pCellBody">
26
</p>
</td>
    <td><a name="wp1070244"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070246"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070248"> </a><p class="pCellBody">
11
</p>
</td>
    <td><a name="wp1070250"> </a><p class="pCellBody">
11
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070252"> </a><p class="pCellBody">
27
</p>
</td>
    <td><a name="wp1070254"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070256"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070258"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070260"> </a><p class="pCellBody">
12
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070262"> </a><p class="pCellBody">
28
</p>
</td>
    <td><a name="wp1070264"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070266"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070268"> </a><p class="pCellBody">
12
</p>
</td>
    <td><a name="wp1070270"> </a><p class="pCellBody">
12
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070272"> </a><p class="pCellBody">
29
</p>
</td>
    <td><a name="wp1070274"> </a><p class="pCellBody">
16
</p>
</td>
    <td><a name="wp1070276"> </a><p class="pCellBody">
16
</p>
</td>
    <td><a name="wp1070278"> </a><p class="pCellBody">
13
</p>
</td>
    <td><a name="wp1070280"> </a><p class="pCellBody">
13
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070282"> </a><p class="pCellBody">
30
</p>
</td>
    <td><a name="wp1070284"> </a><p class="pCellBody">
16
</p>
</td>
    <td><a name="wp1070286"> </a><p class="pCellBody">
16
</p>
</td>
    <td><a name="wp1070288"> </a><p class="pCellBody">
13
</p>
</td>
    <td><a name="wp1070290"> </a><p class="pCellBody">
13
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1070292"> </a><p class="pCellBody">
31
</p>
</td>
    <td><a name="wp1070294"> </a><p class="pCellBody">
16
</p>
</td>
    <td><a name="wp1070296"> </a><p class="pCellBody">
16
</p>
</td>
    <td><a name="wp1070298"> </a><p class="pCellBody">
13
</p>
</td>
    <td><a name="wp1070300"> </a><p class="pCellBody">
13
</p>
</td>
</tr>
</table>
</div>

</p>
<a name="wp1069923"> </a><p class="pNoteList">
<hr />
<b>Note:  </b>Where two values are given, the smaller value applies to unsigned data items, and the larger value applies to signed data items.  
<hr />
</p>
<a name="wp1035737"> </a><div class="pSmartList1"><li>COMP-5 is primarily used to communicate with external programs that expect native data storage.  </li></div>
<a name="wp1035738"> </a><p class="pIndented1">
The format of a COMP-5 data item is identical to a COMP-4 data item, except that the data is stored in a machine-dependent format. It is stored in an order that is natural to the host machine.  For example, a PIC S9(9) COMP-5 data item is equivalent to a 32-bit binary word on the host machine, and a PIC S9(20) COMP-5 item is equivalent to a 64-bit word.  
</p>
<a name="wp1035739"> </a><p class="pNoteList">
<hr />
<b>Note:  </b>Data stored in a COMP-5 field may not be transportable to other machines because different machines have different natural byte-orderings. On many machines (68000, most RISC), COMP-5 is identical to COMP-4.  On others (80x86, VAX), it is the same with the bytes in the reverse order.  
<hr />
</p>
<a name="wp1035740"> </a><p class="pIndented1">
A VALUE clause for a COMP-5 data item is stored in a machine-independent format and is adjusted when it is loaded into the data item. This ensures that the value is the same from machine to machine.
</p>
<a name="wp1093258"> </a><p class="pIndented1">
On arithmetic and non-arithmetic stores into COMP-5 items, if truncation is required, by default ACUCOBOL-GT truncates in decimal to the number of digits given in the PICTURE clause.  You can use the &quot;--TruncANSI&quot; compiler option to force truncation in binary to the capacity of the allocated storage of COMP-5 items.  The &quot;-Dz&quot; option also effects truncation.  See Book 1, section 2.1.9, &quot;Data Storage Options,&quot; for more information.
</p>
<a name="wp1035741"> </a><p class="pIndented1">
Level 01 and level 77 data items that are COMP-5 are automatically synchronized to an appropriate machine boundary, regardless of any compile-time settings.  This allows you to pass these items safely to C subroutines without having to concern yourself with alignment. 
</p>
<a name="wp1097554"> </a><p class="pIndented1">
If COMP-5 is used with a PIC X(n) data item and assigned an alphanumeric value, the results are undefined.  For example, the following code fragment causes NUM to have an undefined number and the resulting value for the last line will be &quot;100&quot;:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
NUM PIC X(5) COMP-5.<a name="wp1097694"> </a>
ALPHANUM PIC X(9).<a name="wp1097704"> </a>
MOVE &quot;ABC&quot; TO NUM.<a name="wp1097713"> </a>
MOVE &quot;1,000&quot; TO NUM.<a name="wp1097714"> </a>
MOVE ALPHANUM TO NUM.<a name="wp1097715"> </a>
MOVE &quot;100&quot; TO NUM.<a name="wp1097716"> </a>
</pre></div>
<a name="wp1097724"> </a><p class="pIndented1">
A PIC X(n) data item used with COMP-5 cannot be signed.
</p>
<a name="wp1035743"> </a><div class="pSmartList1"><li>The format of a COMP-6 item is identical to a COMP-3 item except that it is unsigned and no space is allocated for the sign.  If the number of digits is odd, a zero is added to the left end of the number before it is packed. Thus there are two decimal digits per byte, and the actual size of the item is determined by dividing its PICTURE size by two and rounding up.  </li></div>
<a name="wp1035745"> </a><div class="pSmartList1"><li>A COMP-X data item must be described with a picture string consisting of only &quot;9&quot; or only &quot;X&quot; symbols.  In either case, the data item is treated as an unsigned binary integer, with internal storage similar to that of a COMP-4 data item.  If &quot;X&quot; symbols are used to describe the item, then the number of bytes allocated to the item is the same as the number of &quot;X&quot; symbols in the picture string.  If &quot;9&quot; symbols are used instead, then the number of bytes allocated is the least number of bytes required to hold a number of that size.  For example, a &quot;PIC 99&quot; data item will be allocated 1 byte; a &quot;PIC 9(9)&quot; data item will be allocated 4 bytes.  </li></div>
<a name="wp1035747"> </a><p class="pIndented1">
Regardless of the number of &quot;9&quot; symbols in the item's picture string, the maximum value that can be stored in a COMP-X item is determined by the number of bytes allocated to it (to a maximum of 18 digits, or a maximum of 31 digits if 31-digit support is in effect).  For example, a COMP-X item consisting of 1 byte can hold a range of numbers from 0 to 255.  A 2-byte COMP-X number can hold from 0 to 65535.  A size error occurs on a COMP-X item only when the value is larger than the data item can physically hold.  When COMP-X is used with a PIC(X) data item, the maximum is PIC X(8). (This maximum is increased to PIC X(16) when 31-digit support is in effect.)
</p>
<a name="wp1035749"> </a><div class="pSmartList1"><li>A COMP-N data item is identical to a COMP-X data item, except that the data is stored in the host machine's native format, instead of machine-independent format.</li></div>
<a name="wp1035751"> </a><div class="pSmartList1"><li>Data items described as PACKED-DECIMAL are identical to COMP-3.  You can cause unsigned PACKED-DECIMAL to be treated as COMP-6 by using a compile-time option.  </li></div>
<a name="wp1035753"> </a><div class="pSmartList1"><li>By default, a BINARY data item is identical to a COMP-4 data item.  The compile-time option &quot;-D5&quot; treats BINARY data items as COMP-5 items instead.</li></div>
<a name="wp1035754"> </a><div class="pSmartList1"><li>In VAX/COBOL compatibility mode, a COMP data item is the same as COMP-4 and is treated as binary data.  In RM/COBOL compatibility mode, COMP is the same as COMP-2. You can use compile-time options to change the default behavior.</li></div>
<a name="wp1035758"> </a><div class="pSmartList1"><li>A pointer data item is treated as an unsigned numeric data item.  The internal format differs for each machine. Pointer data items are intended to hold addresses of other data items (see the <a  href="gt36137.htm#wp1041588">SET Statement</a>.)  A pointer data item may have a VALUE clause specified for it, but the specified value must be the word NULL.  This indicates that the pointer does not currently point to any item.  If a pointer is not explicitly given an initial value, then its initial value is arbitrary.  </li></div>
<a name="wp1035760"> </a><p class="pIndented1">
Pointer data items occupy 8 bytes.  This provides enough space to hold an address on a 64-bit machine.  If you are on a smaller machine, the runtime uses only the first 4 bytes of pointer data items (the trailing 4 bytes remain in memory, they are just left unused).  You can use the &quot;-Dw&quot; compile-time option to adjust the space allocated to pointer data items.  You can do this to conserve storage if you know you will not be running on a 64-bit machine.
</p>
<a name="wp1035762"> </a><p class="pIndented1">
Pointers may be used in conditional expressions, where they can be compared to each other or to the value NULL.  A comparison involving a pointer must be either &quot;equals&quot; or &quot;not equals&quot; (&quot;greater&quot; and &quot;less than&quot; comparisons are not allowed).
</p>
<a name="wp1035763"> </a><p class="pIndented1">
Level 01 and level 77 data items that are POINTER items are automatically synchronized to an appropriate machine boundary, regardless of any compile-time settings.  This allows you to pass these items safely to C subroutines without having to concern yourself with alignment. 
</p>
<a name="wp1035764"> </a><p class="pIndented1">
Except for the automatic synchronization, USAGE POINTER data items are treated in all respects like USAGE UNSIGNED-LONG data items.  This handles all current machines correctly.  This behavior may change to meet the requirements of some future machine.
</p>
<a name="wp1035765"> </a><div class="pSmartList1"><li>Floating-point data items are stored in a machine-dependent format.  USAGE FLOAT items have 4 bytes allocated to them.  USAGE DOUBLE items occupy 8 bytes. </li></div>
<a name="wp1035766"> </a><p class="pIndented1">
Level 01 and level 77 data items that are USAGE FLOAT or DOUBLE are automatically synchronized to appropriate machine boundaries, regardless of any compile-time settings.  This allows you to pass these items safely to C subroutines without having to concern yourself with alignment. 
</p>
<a name="wp1035768"> </a><div class="pSmartList1"><li>The ANSI definition of COBOL does not state how signs should be stored in numeric fields (except for the case of SIGN IS SEPARATE).  ACUCOBOL-GT lets you select alternate sign-storage conventions by using the compile-time options &quot;-Dca&quot;, `-Dcb&quot;, &quot;-Dci&quot;, &quot;-Dcm&quot;, &quot;-Dcn&quot;, &quot;-Dcr&quot;, and &quot;-Dcv&quot;.  Specifying a sign-storage convention is sometimes useful when you are exporting and importing data.  For additional information, see the <em class="cEmphasis">User's Guide</em>, section 2.1.9, &quot;Data Storage Options.&quot;</li></div>
<a name="wp1049918"> </a><p class="pIndented1">
The storage convention affects how data appears in USAGE DISPLAY, COMP-2, and COMP-3 data types. In USAGE DISPLAY, standard ASCII storage, if the sign is incorporated into a digit position, the digit is encoded according to the following table:
</p>
<a name="wp1050083"> </a><p class="pIndented1">
USAGE DISPLAY
</p>
<a name="wp1050076"> </a><p class="pBodyRelative">
<div>
<table border="1" cellpadding="2" cellspacing="2">
  <caption></caption>
  <tr align="left" valign="top">    <th><a name="wp1085161"> </a>
DIGIT<br />VALUE

</th>
    <th><a name="wp1085163"> </a>
-Dca,<br />-Dcb,<br />-Dcm,<br />-Dcr<br />Positive

</th>
    <th><a name="wp1085165"> </a>
-Dci,<br />-Dcn<br /><br /><br />Positive

</th>
    <th><a name="wp1085167"> </a>
-Dca,<br />-Dci,<br />-Dcn<br /><br />Negative

</th>
    <th><a name="wp1085169"> </a>
-Dcb<br /><br /><br /><br />Negative

</th>
    <th><a name="wp1085171"> </a>
-Dcm<br /><br /><br /><br />Negative

</th>
    <th><a name="wp1094491"> </a>
-Dcr<br /><br /><br /><br />Negative

</th>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1085173"> </a><p class="pCellBody">
0
</p>
</td>
    <td><a name="wp1085175"> </a><p class="pCellBody">
`0'
</p>
</td>
    <td><a name="wp1085177"> </a><p class="pCellBody">
`{`
</p>
</td>
    <td><a name="wp1085179"> </a><p class="pCellBody">
`}'
</p>
</td>
    <td><a name="wp1085181"> </a><p class="pCellBody">
`@'
</p>
</td>
    <td><a name="wp1085183"> </a><p class="pCellBody">
`p'
</p>
</td>
    <td><a name="wp1094463"> </a><p class="pCellBody">
` ' (space)
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1085185"> </a><p class="pCellBody">
1
</p>
</td>
    <td><a name="wp1085187"> </a><p class="pCellBody">
`1'
</p>
</td>
    <td><a name="wp1085189"> </a><p class="pCellBody">
`A'
</p>
</td>
    <td><a name="wp1085191"> </a><p class="pCellBody">
`J'
</p>
</td>
    <td><a name="wp1085193"> </a><p class="pCellBody">
`A'
</p>
</td>
    <td><a name="wp1085195"> </a><p class="pCellBody">
`q'
</p>
</td>
    <td><a name="wp1094465"> </a><p class="pCellBody">
`!'
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1085197"> </a><p class="pCellBody">
2
</p>
</td>
    <td><a name="wp1085199"> </a><p class="pCellBody">
`2'
</p>
</td>
    <td><a name="wp1085201"> </a><p class="pCellBody">
`B'
</p>
</td>
    <td><a name="wp1085203"> </a><p class="pCellBody">
`K'
</p>
</td>
    <td><a name="wp1085205"> </a><p class="pCellBody">
`B'
</p>
</td>
    <td><a name="wp1085207"> </a><p class="pCellBody">
`r'
</p>
</td>
    <td><a name="wp1094467"> </a><p class="pCellBody">
`&quot;' (double-quote)
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1085209"> </a><p class="pCellBody">
3
</p>
</td>
    <td><a name="wp1085211"> </a><p class="pCellBody">
`3'
</p>
</td>
    <td><a name="wp1085213"> </a><p class="pCellBody">
`C'
</p>
</td>
    <td><a name="wp1085215"> </a><p class="pCellBody">
`L'
</p>
</td>
    <td><a name="wp1085217"> </a><p class="pCellBody">
`C'
</p>
</td>
    <td><a name="wp1085219"> </a><p class="pCellBody">
`s'
</p>
</td>
    <td><a name="wp1094469"> </a><p class="pCellBody">
`#'
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1085221"> </a><p class="pCellBody">
4
</p>
</td>
    <td><a name="wp1085223"> </a><p class="pCellBody">
`4'
</p>
</td>
    <td><a name="wp1085225"> </a><p class="pCellBody">
`D'
</p>
</td>
    <td><a name="wp1085227"> </a><p class="pCellBody">
`M'
</p>
</td>
    <td><a name="wp1085229"> </a><p class="pCellBody">
`D'
</p>
</td>
    <td><a name="wp1085231"> </a><p class="pCellBody">
`t'
</p>
</td>
    <td><a name="wp1094471"> </a><p class="pCellBody">
`$'
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1085233"> </a><p class="pCellBody">
5
</p>
</td>
    <td><a name="wp1085235"> </a><p class="pCellBody">
`5'
</p>
</td>
    <td><a name="wp1085237"> </a><p class="pCellBody">
`E'
</p>
</td>
    <td><a name="wp1085239"> </a><p class="pCellBody">
`N'
</p>
</td>
    <td><a name="wp1085241"> </a><p class="pCellBody">
`E'
</p>
</td>
    <td><a name="wp1085243"> </a><p class="pCellBody">
`u'
</p>
</td>
    <td><a name="wp1094473"> </a><p class="pCellBody">
`%'
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1085245"> </a><p class="pCellBody">
6
</p>
</td>
    <td><a name="wp1085247"> </a><p class="pCellBody">
`6'
</p>
</td>
    <td><a name="wp1085249"> </a><p class="pCellBody">
`F'
</p>
</td>
    <td><a name="wp1085251"> </a><p class="pCellBody">
`O'
</p>
</td>
    <td><a name="wp1085253"> </a><p class="pCellBody">
`F'
</p>
</td>
    <td><a name="wp1085255"> </a><p class="pCellBody">
`v'
</p>
</td>
    <td><a name="wp1094475"> </a><p class="pCellBody">
`&amp;'
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1085257"> </a><p class="pCellBody">
7
</p>
</td>
    <td><a name="wp1085259"> </a><p class="pCellBody">
`7'
</p>
</td>
    <td><a name="wp1085261"> </a><p class="pCellBody">
`G'
</p>
</td>
    <td><a name="wp1085263"> </a><p class="pCellBody">
`P'
</p>
</td>
    <td><a name="wp1085265"> </a><p class="pCellBody">
`G'
</p>
</td>
    <td><a name="wp1085267"> </a><p class="pCellBody">
`w'
</p>
</td>
    <td><a name="wp1094477"> </a><p class="pCellBody">
`'' (single-<br />quote)
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1085269"> </a><p class="pCellBody">
8
</p>
</td>
    <td><a name="wp1085271"> </a><p class="pCellBody">
`8'
</p>
</td>
    <td><a name="wp1085273"> </a><p class="pCellBody">
`H'
</p>
</td>
    <td><a name="wp1085275"> </a><p class="pCellBody">
`Q'
</p>
</td>
    <td><a name="wp1085277"> </a><p class="pCellBody">
`H'
</p>
</td>
    <td><a name="wp1085279"> </a><p class="pCellBody">
`x'
</p>
</td>
    <td><a name="wp1094479"> </a><p class="pCellBody">
`(`
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1085281"> </a><p class="pCellBody">
9
</p>
</td>
    <td><a name="wp1085283"> </a><p class="pCellBody">
`9'
</p>
</td>
    <td><a name="wp1085285"> </a><p class="pCellBody">
`I'
</p>
</td>
    <td><a name="wp1085287"> </a><p class="pCellBody">
`R'
</p>
</td>
    <td><a name="wp1085289"> </a><p class="pCellBody">
`I'
</p>
</td>
    <td><a name="wp1085291"> </a><p class="pCellBody">
`y'
</p>
</td>
    <td><a name="wp1094481"> </a><p class="pCellBody">
`)'
</p>
</td>
</tr>
</table>
</div>

</p>
<a name="wp1047023"> </a><p class="pNoteList">
<hr />
<b>Note:  </b>For import compatibility with some systems that do not have the symbols &quot;{&quot; and &quot;}&quot;, the symbols &quot;[&quot; and &quot;?&quot; are considered equivalent to &quot;{&quot;, and the symbols &quot;]&quot;, &quot;:&quot;, and &quot;!&quot; are considered equivalent to &quot;}&quot;, when an item with USAGE DISPLAY is read.
<hr />
</p>
<a name="wp1035957"> </a><p class="pIndented1">
The next two tables show sign representation for COMP-2 and COMP-3 items, when you are using the &quot;-Dca&quot;, &quot;-Dcb&quot;, &quot;-Dci&quot;, &quot;-Dcm&quot;, &quot;-Dcn&quot;, &quot;-Dcr&quot;, and &quot;-Dcv&quot; storage conventions.  For COMP-2, the trailing byte is reserved for the sign.  For COMP-3, the trailing half-byte is reserved for the sign.
</p>
<a name="wp1047875"> </a><p class="pIndented1">
<b class="cBold">USAGE COMP-2</b>
</p>
<a name="wp1049366"> </a><p class="pBodyRelative">
<div>
<table border="1" cellpadding="2" cellspacing="2">
  <caption></caption>
  <tr align="left" valign="top">    <th><a name="wp1049351"> </a><p class="pCellBody">
-Dca Positive
</p>
</th>
    <th><a name="wp1049353"> </a><p class="pCellBody">
x'0B'
</p>
</th>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1049359"> </a><p class="pCellBody">
-Dcb/-Dci/-Dcm/-Dcn/-Dcr Positive
</p>
</td>
    <td><a name="wp1049361"> </a><p class="pCellBody">
x'0C'
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1049363"> </a><p class="pCellBody">
-Dca/-Dcb/-Dci/-Dcm/-Dcn/-Dcr Negative
</p>
</td>
    <td><a name="wp1049365"> </a><p class="pCellBody">
x'0D'
</p>
</td>
</tr>
</table>
</div>

</p>
<a name="wp1048716"> </a><p class="pIndented1">
<b class="cBold">USAGE COMP-3</b>
</p>
<a name="wp1049437"> </a><p class="pBodyRelative">
<div>
<table border="1" cellpadding="2" cellspacing="2">
  <caption></caption>
  <tr align="left" valign="top">    <th><a name="wp1050516"> </a><p class="pCellBody">
-Dca Positive
</p>
</th>
    <th><a name="wp1050518"> </a><p class="pCellBody">
x'0F'
</p>
</th>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1050528"> </a><p class="pCellBody">
-Dcb/-Dci/-Dcm/-Dcr Positive
</p>
</td>
    <td><a name="wp1050530"> </a><p class="pCellBody">
x'0C'
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1050532"> </a><p class="pCellBody">
-Dca/-Dcb/-Dci/-Dcm/-Dcr Negative
</p>
</td>
    <td><a name="wp1050534"> </a><p class="pCellBody">
x'0D
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1050536"> </a><p class="pCellBody">
-Dca/-Dcb/-Dci/-Dcm/-Dcr Unsigned
</p>
</td>
    <td><a name="wp1050538"> </a><p class="pCellBody">
x'0F'
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1094451"> </a><p class="pCellBody">
-Dcv Unsigned
</p>
</td>
    <td><a name="wp1094453"> </a><p class="pCellBody">
x'0C'
</p>
</td>
</tr>
</table>
</div>

</p>
<a name="wp1071080"> </a><div class="pSmartList1"><li>There are six USAGE types for integer data that simplify communications with other programming languages such as C.  These types are designed to provide a portable method for handling machine-dependent data.  The six USAGE types handle three classes of machine data:  &quot;short words,&quot; &quot;words,&quot; and &quot;long words.&quot;  These three correspond to the C data types: &quot;short&quot;, &quot;int&quot;, and &quot;long&quot;.  There are signed and unsigned versions of each of these data types.    </li></div>
<a name="wp1071084"> </a><p class="pIndented1">
These USAGE types are specified without a PICTURE clause (like USAGE INDEX and POINTER).  
</p>
<a name="wp1098578"> </a><p class="pIndented1">
The names of the types are:
</p>
<a name="wp1098598"> </a><p class="pBodyRelative">
<div>
<table border="0" cellpadding="6" cellspacing="1">
  <caption></caption>
  <tr align="left" valign="top">    <td><a name="wp1098582"> </a><p class="pCellBody">
SIGNED-SHORT &#160;&#160;&#160;&#160;&#160;
</p>
</td>
    <td><a name="wp1098585"> </a><p class="pCellBody">
UNSIGNED-SHORT
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1098588"> </a><p class="pCellBody">
SIGNED-INT 
</p>
</td>
    <td><a name="wp1098591"> </a><p class="pCellBody">
UNSIGNED-INT
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1098594"> </a><p class="pCellBody">
SIGNED-LONG 
</p>
</td>
    <td><a name="wp1098597"> </a><p class="pCellBody">
UNSIGNED-LONG
</p>
</td>
</tr>
</table>
</div>

</p>
<a name="wp1098599"> </a><p class="pIndented1">
Each of these represents a binary value that is stored using the machine's native byte ordering.  Since there is no PICTURE phrase, size checking for these items is performed only on byte boundaries.  These data types are automatically SYNCHRONIZED. 
</p>
<a name="wp1036063"> </a><p class="pIndented1">
The unusual characteristic of these data types is that their size is not necessarily set at compile time.  Instead, the size of these items is determined at execution time.  This allows them to match the working characteristics of the host machine.  For example, a SIGNED-LONG data item will contain 64 bits when run on a DEC Alpha machine, but it will have 32 bits when run on an Intel 80486-based machine.  This lets you write one program that can communicate effectively with an external routine written in another language (such as C), regardless of the target environment.  
</p>
<a name="wp1036064"> </a><p class="pIndented1">
In order to lay out memory, the compiler assigns a maximum size to each of these data types.  This is the number of bytes that the item will occupy.  At run time, these items may be reduced in size to match the host machine's characteristics.  Any remaining bytes are then treated as FILLER.  The &quot;-Dw&quot; compile option (see the <em class="cEmphasis">User's Guide</em> section 2.1.9, &quot;Data Storage Options.&quot;) determines the maximum size of these types:
</p>
<a name="wp1042174"> </a><p class="pBodyRelative">
<div>
<table border="1" cellpadding="2" cellspacing="2">
  <caption></caption>
  <tr align="left" valign="top">    <th><a name="wp1042177"> </a>
USAGE

</th>
    <th><a name="wp1042179"> </a>
-Dw32

</th>
    <th><a name="wp1042181"> </a>
-Dw64

</th>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1042183"> </a><p class="pCellBody">
SIGNED-SHORT
</p>
<a name="wp1042219"> </a><p class="pCellBody">
UNSIGNED-SHORT
</p>
</td>
    <td><a name="wp1042185"> </a><p class="pCellBody">
2*
</p>
</td>
    <td><a name="wp1042187"> </a><p class="pCellBody">
2*
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1042221"> </a><p class="pCellBody">
SIGNED-INT
</p>
<a name="wp1042222"> </a><p class="pCellBody">
UNSIGNED-INT
</p>
</td>
    <td><a name="wp1042191"> </a><p class="pCellBody">
4
</p>
</td>
    <td><a name="wp1042193"> </a><p class="pCellBody">
4
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1042226"> </a><p class="pCellBody">
SIGNED-LONG
</p>
<a name="wp1042227"> </a><p class="pCellBody">
UNSIGNED-LONG
</p>
</td>
    <td><a name="wp1042197"> </a><p class="pCellBody">
4*
</p>
</td>
    <td><a name="wp1042199"> </a><p class="pCellBody">
8
</p>
</td>
</tr>
</table>
</div>

</p>
<a name="wp1036094"> </a><p class="pIndented1">
Table entries marked with an asterisk indicate fixed-size items.  A fixed-size item is the same size regardless of the target machine.  Entries without an asterisk are variable in size.  These items will occupy space up to the number of bytes listed in the table.  
</p>
<a name="wp1036095"> </a><p class="pNoteList">
<hr />
<b>Note:  </b>The sizes listed in the table above cover all current and anticipated machines that run ACUCOBOL-GT.  Future architectures may require changes to the maximum size assigned to these items.
<hr />
</p>
<a name="wp1036096"> </a><p class="pIndented1">
In the execution environment, these items act in all ways as if they were fixed-size data items of the appropriate size.  
</p>
<a name="wp1036097"> </a><p class="pIndented1">
For example, the following code fragment:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
   77  LONG-1         SIGNED-LONG.<a name="wp1036098"> </a>
   77  SIZE-1         PIC 9.<a name="wp1036099"> </a>
<a name="wp1036100"> </a>
   SET SIZE-1 TO SIZE OF LONG-1.<a name="wp1036101"> </a>
   DISPLAY SIZE-1.<a name="wp1036102"> </a>
</pre></div>
<a name="wp1036103"> </a><p class="pIndented1">
will print &quot;4&quot; when run on a 32-bit machine, but it will print &quot;8&quot; when run on a 64-bit machine.
</p>
<a name="wp1072166"> </a><p class="pIndented1">
<b class="cBold">Examples</b>
</p>
<a name="wp1075568"> </a><p class="pIndented1">
In the following examples, each byte is represented by two hexadecimal digits or by a single quoted character.  Each value is shown in the various formats.  Also shown is USAGE DISPLAY using the various SIGN options. The following examples use the default ACUCOBOL-GT sign-storage conventions. 
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
<b class="cBold">PIC 9(3) VALUE 123.</b><a name="wp1075571"> </a>
<a name="wp1076350"> </a>
TRAILING            &#39;1&#39;   &#39;2&#39;   &#39;3&#39;<a name="wp1075579"> </a>
TRAILING SEPARATE   &#39;1&#39;   &#39;2&#39;   &#39;3&#39;<a name="wp1075587"> </a>
LEADING             &#39;1&#39;   &#39;2&#39;   &#39;3&#39;<a name="wp1075595"> </a>
LEADING SEPARATE    &#39;1&#39;   &#39;2&#39;   &#39;3&#39;<a name="wp1075603"> </a>
COMP-1                    00    7B<a name="wp1075611"> </a>
COMP-2              01    02    03<a name="wp1075619"> </a>
COMP-3                    12    3F<a name="wp1075627"> </a>
COMP-4                    00    7B<a name="wp1075635"> </a>
COMP-5(68000)             00    7B<a name="wp1075643"> </a>
COMP-5(8086)              7B    00<a name="wp1075651"> </a>
COMP-6                    01    23<a name="wp1075659"> </a>
<a name="wp1078722"> </a>
<a name="wp1078723"> </a>
<b class="cBold">PIC S9(3) VALUE -123.</b><a name="wp1073254"> </a>
<a name="wp1077383"> </a>
TRAILING                 &#39;1&#39;   &#39;2&#39;   &#39;L&#39;<a name="wp1073264"> </a>
TRAILING SEPARATE  &#39;1&#39;   &#39;2&#39;   &#39;3&#39;   &#39;-&#39;<a name="wp1073274"> </a>
LEADING                  &#39;J&#39;   &#39;2&#39;   &#39;3&#39;<a name="wp1073284"> </a>
LEADING SEPARATE   &#39;-&#39;   &#39;1&#39;   &#39;2&#39;   &#39;3&#39;<a name="wp1073294"> </a>
COMP-1                         FF    85<a name="wp1073304"> </a>
COMP-2             01    02    03    0D<a name="wp1073314"> </a>
COMP-3                         12    3D<a name="wp1073324"> </a>
COMP-4                         FF    85<a name="wp1073334"> </a>
COMP-5(68000)                  FF    85<a name="wp1073344"> </a>
COMP-5(8086)                   85    FF<a name="wp1078709"> </a>
COMP-6             illegal<a name="wp1078710"> </a>
<a name="wp1078714"> </a>
<a name="wp1078724"> </a>
<b class="cBold">PIC 9(5)V9 VALUE 12345.6.</b><a name="wp1053550"> </a>
<a name="wp1078708"> </a>
TRAILING             &#39;1&#39;   &#39;2&#39;   &#39;3&#39;   &#39;4&#39;   &#39;5&#39;   &#39;6&#39;<a name="wp1053564"> </a>
TRAILING SEPARATE    &#39;1&#39;   &#39;2&#39;   &#39;3&#39;   &#39;4&#39;   &#39;5&#39;   &#39;6&#39;<a name="wp1053578"> </a>
LEADING              &#39;1&#39;   &#39;2&#39;   &#39;3&#39;   &#39;4&#39;   &#39;5&#39;   &#39;6&#39;<a name="wp1053592"> </a>
LEADING SEPARATE     &#39;1&#39;   &#39;2&#39;   &#39;3&#39;   &#39;4&#39;   &#39;5&#39;   &#39;6&#39;<a name="wp1053606"> </a>
COMP-1               illegal<a name="wp1053620"> </a>
COMP-2               01    02    03    04    05    06<a name="wp1053634"> </a>
COMP-3                           01    23    45    6F<a name="wp1053648"> </a>
COMP-4                           00    01    E2    40<a name="wp1053662"> </a>
COMP-5(68000)                    00    01    E2    40<a name="wp1053676"> </a>
COMP-5(8086)                     40    E2    01    00<a name="wp1053690"> </a>
COMP-6                                 12    34    56<a name="wp1053704"> </a>
<a name="wp1080621"> </a>
<a name="wp1080622"> </a>
<b class="cBold">PIC S9(5)V9 VALUE -12345.6.</b><a name="wp1080623"> </a>
<a name="wp1080624"> </a>
TRAILING                &#39;1&#39;  &#39;2&#39;  &#39;3&#39;  &#39;4&#39;  &#39;5&#39;  &#39;0&#39;<a name="wp1098358"> </a>
TRAILING SEPARATE  &#39;1&#39;  &#39;2&#39;  &#39;3&#39;  &#39;4&#39;  &#39;5&#39;  &#39;6&#39;  &#39;-&#39;<a name="wp1098359"> </a>
LEADING                 &#39;J&#39;  &#39;2&#39;  &#39;3&#39;  &#39;4&#39;  &#39;5&#39;  &#39;6&#39;<a name="wp1098363"> </a>
LEADING SEPARATE   &#39;-&#39;  &#39;1&#39;  &#39;2&#39;  &#39;3&#39;  &#39;4&#39;  &#39;5&#39;  &#39;6&#39;<a name="wp1098364"> </a>
COMP-1             illegal<a name="wp1098365"> </a>
COMP-2             01   02   03   04   05   06   0D<a name="wp1074274"> </a>
COMP-3                            01   23   45   6D<a name="wp1074290"> </a>
COMP-4                            FF   FE   1D   C0<a name="wp1074306"> </a>
COMP-5(68000)                     FF   FE   1D   C0<a name="wp1074322"> </a>
COMP-5(8086)                      C0   1D   FE   FF<a name="wp1082038"> </a>
COMP-6             illegal<a name="wp1074354"> </a>
</pre></div>
<a name="wp1057017"> </a><div class="pSmartList1"><li>HANDLE data items make up their own data class and category in COBOL.  Internally they are stored as integer values, and behave like numbers when used.  A HANDLE data item is normally used to store the handle of a dynamically created object such as a floating window or a graphical control.  </li></div>
<a name="wp1036202"> </a><p class="pIndented1">
HANDLE data items come in two forms: <em class="cEmphasis">typed</em> and <em class="cEmphasis">generic</em>.  You create a generic handle when you omit the OF phrase.  You create a typed handle when you include the OF phrase.  
</p>
<a name="wp1036203"> </a><div class="pSmartList1"><li>You may use HANDLE data items only when explicitly allowed, or as part of a MOVE statement, a CALL statement (as a parameter), or in a Boolean expression.  </li></div>
<a name="wp1036204"> </a><div class="pSmartList1"><li>Generic handles may be used in any situation where handles are allowed.  When you use a generic handle as the source of a MODIFY statement, you will not be able to use any control-specific property or style names in that statement.  This is because the generic handle could be associated with any type of control.  In this case, the compiler cannot determine which set of style and property names is valid.</li></div>
<a name="wp1036205"> </a><div class="pSmartList1"><li>Typed handles may be used in statements where any handle is allowed, or when you are referring to an object of a matching type.  For example, a HANDLE OF WINDOW cannot be used as the handle in a DISPLAY LABEL statement.  Instead, you must use either a generic handle or a HANDLE OF LABEL.  Typed handles allow the compiler to recognize associated style and property names when appropriate.  Typed handles also improve the readability of your program by providing additional information about the intended use of the handle, in addition to providing compile-time checking to ensure that you are using the handles in appropriate situations.  </li></div>
<a name="wp1036206"> </a><div class="pSmartList1"><li>Handles may be used in comparisons.  There are only two meaningful comparisons: checking for equality or inequality to NULL, and comparison to another handle data item.  A handle value of NULL always indicates an invalid handle.  </li></div>
<a name="wp1036207"> </a><div class="pSmartList1"><li>Handles are stored internally as 4-byte binary integers.  This information can be useful when you are debugging a program (you can examine the values of handles in the debugger).  You should not rely on this definition in your program, however, because it is subject to change in the future.  </li></div>
<a name="wp1036209"> </a><div class="pSmartList1"><li>Handle data items are automatically SYNCHRONIZED on a 4-byte boundary.  Note that this occurs regardless of the setting of the &quot;-Dl&quot; compile-time option (which limits the amount of synchronization).  The runtime system requires this level of alignment to avoid generating bus errors on some machines.</li></div>
<a name="wp1036217"> </a><div class="pSmartList1"><li>If <em class="cEmphasis">font-name</em> is specified, then the data item described by the USAGE clause is initialized at program startup with the corresponding font handle.  This acts identically to placing the statement:</li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
ACCEPT data-item FROM STANDARD OBJECT &quot;font-name&quot;<a name="wp1036218"> </a>
</pre></div>
<a name="wp1036219"> </a><p class="pIndented1">
at the beginning of your program, where <em class="cEmphasis">data-item</em> is the data item described by the USAGE clause and <em class="cEmphasis">font-name</em> is the same as <em class="cEmphasis">font-name</em> in the USAGE clause.  
</p>
</ol></div>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
