<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.5.1025" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/14/06 08:28:08" />
  <title>SET Statement</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       ACUCOBOL-GT Reference Manual <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="gt36.htm"><br />Chapter 6:  Procedure Division</a> &gt; <a href="gt3678.htm">6.6  Procedure Division Statements </a> &gt; </p>
<a name="wp1041588"> </a><h2 class="pHeading2">
SET Statement
</h2>
<a name="wp1041591"> </a><p class="pBody">
The SET statement sets the values of various types of data items, allows you to control the <em class="cEmphasis">current</em> and <em class="cEmphasis">active</em> windows, and allows you to set the priority of a thread.
</p>
<a name="wp1041593"> </a><h3 class="pHeadingRef">
General Format
</h3>
<a name="wp1041594"> </a><h3 class="pHeadingRef">
Format 1
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">SET</u> {result} ... <u class="cUnderline">TO</u> value<a name="wp1041595"> </a>
</pre></div>
<a name="wp1041596"> </a><h3 class="pHeadingRef">
Format 2
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">SET</u> {result} ... {<u class="cUnderline">UP</u>  } <u class="cUnderline">BY</u> value<a name="wp1041597"> </a>
                 {<u class="cUnderline">DOWN</u>}<a name="wp1041598"> </a>
</pre></div>
<a name="wp1041599"> </a><h3 class="pHeadingRef">
Format 3
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">SET</u> { {cond-name} ... <u class="cUnderline">TO</u> {<u class="cUnderline">TRUE</u> } } ...<a name="wp1041600"> </a>
                         {FALSE}<a name="wp1041601"> </a>
</pre></div>
<a name="wp1041602"> </a><h3 class="pHeadingRef">
Format 4
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">SET</u> { {switch-name} ... <u class="cUnderline">TO</u> {<u class="cUnderline">ON</u> } } ...<a name="wp1041603"> </a>
                           {<u class="cUnderline">OFF</u>}<a name="wp1041604"> </a>
</pre></div>
<a name="wp1041605"> </a><h3 class="pHeadingRef">
Format 5
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">SET</u> <u class="cUnderline">FILE-PREFIX</u> TO file-prefix<a name="wp1041606"> </a>
</pre></div>
<a name="wp1041607"> </a><h3 class="pHeadingRef">
Format 6
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">SET</u> {<u class="cUnderline">CONFIGURATION</u>} { env-name TO env-value } ...<a name="wp1041608"> </a>
    {<u class="cUnderline">ENVIRONMENT</u>  }<a name="wp1041609"> </a>
</pre></div>
<a name="wp1041610"> </a><h3 class="pHeadingRef">
Format 7
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">SET</u> pointer <u class="cUnderline">TO</u> { <u class="cUnderline">ADDRESS</u> <u class="cUnderline">OF</u> data-item }<a name="wp1041611"> </a>
               { <u class="cUnderline">NULL</u>                 } <a name="wp1041612"> </a>
</pre></div>
<a name="wp1041613"> </a><h3 class="pHeadingRef">
Format 8
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">SET</u> result-item <u class="cUnderline">TO</u> <u class="cUnderline">SIZE</u> <u class="cUnderline">OF</u> data-item <a name="wp1041614"> </a>
</pre></div>
<a name="wp1041615"> </a><h3 class="pHeadingRef">
Format 9
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">SET</u> <u class="cUnderline">ADDRESS</u> <u class="cUnderline">OF</u> linkage-item <u class="cUnderline">TO</u> { pointer             }<a name="wp1041616"> </a>
                               { <u class="cUnderline">ADDRESS</u> <u class="cUnderline">OF</u> data-item}<a name="wp1041617"> </a>
                               { <u class="cUnderline">NULL</u>                }<a name="wp1041618"> </a>
</pre></div>
<a name="wp1041619"> </a><h3 class="pHeadingRef">
Format 10
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">SET</u> {<u class="cUnderline">INPUT</u>       } <u class="cUnderline">WINDOW</u> TO window-1<a name="wp1041620"> </a>
    {<u class="cUnderline">INPUT-OUTPUT</u>}<a name="wp1041621"> </a>
    {<u class="cUnderline">I-O</u>         }<a name="wp1041622"> </a>
    {<u class="cUnderline">OUTPUT</u>      }<a name="wp1041623"> </a>
</pre></div>
<a name="wp1155014"> </a><h3 class="pHeadingRef">
Format 11
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">SET</u> {handle-1} ... <u class="cUnderline">TO</u> <u class="cUnderline">HANDLE</u> OF {screen-1       }<a name="wp1155015"> </a>
                                {CONTROL <u class="cUnderline">ID</u> id-1}<a name="wp1155016"> </a>
</pre></div>
<a name="wp1041626"> </a><h3 class="pHeadingRef">
Format 12
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">SET</u> <u class="cUnderline">THREAD</u> {thread-id} <u class="cUnderline">PRIORITY</u> <u class="cUnderline">TO</u> priority<a name="wp1041627"> </a>
</pre></div>
<a name="wp1041628"> </a><h3 class="pHeadingRef">
Format 13
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">SET</u> <u class="cUnderline">EXCEPTION</u> {VALUE } { exc-value <u class="cUnderline">TO</u> {<u class="cUnderline">ITEM-HELP</u>           } } ...<a name="wp1041629"> </a>
              {VALUES}                {<u class="cUnderline">HELP-CURSOR</u>         }<a name="wp1041630"> </a>
                                      {<u class="cUnderline">CUT-SELECTION</u>       }<a name="wp1041631"> </a>
                                      {<u class="cUnderline">COPY-SELECTION</u>      }<a name="wp1041632"> </a>
                                      {<u class="cUnderline">PASTE-SELECTION</u>     }<a name="wp1041633"> </a>
                                      {<u class="cUnderline">DELETE-SELECTION</u>    }<a name="wp1041634"> </a>
                                      {<u class="cUnderline">UNDO</u>                }<a name="wp1041635"> </a>
                                      {<u class="cUnderline">SELECT-ALL-SELECTION</u>}<a name="wp1041636"> </a>
</pre></div>
<a name="wp1041638"> </a><h3 class="pHeadingRef">
Syntax Rules
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1041639"> </a><div class="pSmartList1"><li><em class="cEmphasis">Result</em> is a numeric data item or index name.</li></div>
<a name="wp1041640"> </a><div class="pSmartList1"><li><em class="cEmphasis">Value</em> is a numeric literal, a numeric data item, or an index name.</li></div>
<a name="wp1041641"> </a><div class="pSmartList1"><li><em class="cEmphasis">File-prefix</em> is a nonnumeric literal or alphanumeric data item.  </li></div>
<a name="wp1041642"> </a><div class="pSmartList1"><li><em class="cEmphasis">Cond-name</em> is any condition-name (level 88 item).  If the FALSE option is used, then <em class="cEmphasis">cond-name</em> must have a WHEN SET TO FALSE phrase in its definition.  </li></div>
<a name="wp1041643"> </a><div class="pSmartList1"><li><em class="cEmphasis">Switch-name</em> must be a mnemonic name associated with an external switch in the SPECIAL-NAMES section of the Environment Division.  </li></div>
<a name="wp1041644"> </a><div class="pSmartList1"><li><em class="cEmphasis">Env-name</em> is a nonnumeric literal or data item.  </li></div>
<a name="wp1041645"> </a><div class="pSmartList1"><li><em class="cEmphasis">Env-value</em> is a USAGE DISPLAY numeric or nonnumeric literal or data item.  If numeric, it must be an integer.  </li></div>
<a name="wp1041646"> </a><div class="pSmartList1"><li>CONFIGURATION and ENVIRONMENT are equivalent.  </li></div>
<a name="wp1041647"> </a><div class="pSmartList1"><li><em class="cEmphasis">Pointer</em> must be a data item with USAGE POINTER.  </li></div>
<a name="wp1041648"> </a><div class="pSmartList1"><li><em class="cEmphasis">Result-item</em> must be a numeric data item. </li></div>
<a name="wp1041649"> </a><div class="pSmartList1"><li><em class="cEmphasis">Linkage-item</em> must be declared in the Linkage section.</li></div>
<a name="wp1041650"> </a><div class="pSmartList1"><li><em class="cEmphasis">Window-1</em> is a USAGE HANDLE or PIC X(10) data item that refers to a floating window or the main application window.</li></div>
<a name="wp1041651"> </a><div class="pSmartList1"><li><em class="cEmphasis">Handle-1</em> is a USAGE HANDLE data item.  When the control is an ActiveX, COM, or .NET control, <em class="cEmphasis">handle-1</em> must be a <em class="cEmphasis">typed</em> handle that matches the control; i.e., <em class="cEmphasis">handle-1</em> must be declared with the &quot;USAGE HANDLE OF <em class="cEmphasis">control-type</em>&quot; syntax.  See <a  href="gt3542.htm#wp1035521">section 5.7.1.8, &quot;USAGE clause.&quot;</a></li></div>
<a name="wp1041652"> </a><div class="pSmartList1"><li><em class="cEmphasis">Screen-1</em> must refer to an elementary Screen Section item that describes a graphical control.</li></div>
<a name="wp1155118"> </a><div class="pSmartList1"><li><em class="cEmphasis">Id-1 </em>and<em class="cEmphasis"> Priority</em> are numeric literals or data items.</li></div>
<a name="wp1041653"> </a><div class="pSmartList1"><li><em class="cEmphasis">Thread-id</em> is a USAGE HANDLE or HANDLE OF THREAD data item.</li></div>
<a name="wp1041655"> </a><div class="pSmartList1"><li><em class="cEmphasis">Exc-value</em> is an integer literal or data item.</li></div>
</ol></div>
<a name="wp1041657"> </a><h3 class="pHeadingRef">
General Rules
</h3>
<a name="wp1041658"> </a><h3 class="pHeadingRef">
Format 1
</h3>
<a name="wp1041659"> </a><p class="pBody">
Each <em class="cEmphasis">result</em> is set to <em class="cEmphasis">value</em>.  This assignment is done such that the numeric values of <em class="cEmphasis">result</em> and <em class="cEmphasis">value</em> will be the same.
</p>
<a name="wp1041660"> </a><h3 class="pHeadingRef">
Format 2
</h3>
<a name="wp1041661"> </a><p class="pBody">
<em class="cEmphasis">Value</em> is either added to (UP BY) or subtracted from (DOWN BY) each <em class="cEmphasis">result</em> item.  No size error checking is done.
</p>
<a name="wp1041662"> </a><h3 class="pHeadingRef">
Format 3
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1041663"> </a><div class="pSmartList1"><li>When the TRUE phrase is used, the literal in the VALUE clause for <em class="cEmphasis">cond-name</em> is moved to its associated condition-variable.  If the VALUE clause contains more than one literal, the first one is used.</li></div>
<a name="wp1041664"> </a><div class="pSmartList1"><li>When the FALSE phrase is used, the literal defined in the WHEN SET TO FALSE phrase of <em class="cEmphasis">cond-name</em> is moved to its associated condition-variable.  </li></div>
</ol></div>
<a name="wp1041665"> </a><h3 class="pHeadingRef">
Format 4
</h3>
<a name="wp1041666"> </a><p class="pBody">
Format 4 of the SET statement alters the on/off status of external switches.  These switches are initially &quot;off&quot; unless otherwise specified when the program is run. 
</p>
<a name="wp1041668"> </a><h3 class="pHeadingRef">
Format 5
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1041669"> </a><div class="pSmartList1"><li>The FILE-PREFIX is a special register maintained by ACUCOBOL-GT to aid in translating COBOL ASSIGN names to actual file names on the host computer.  A complete description of its function is located in section 2.8, &quot;File Name Interpretation,&quot; of the <em class="cEmphasis">ACUCOBOL-GT User's Guide</em>.  </li></div>
<a name="wp1041670"> </a><div class="pSmartList1"><li>A Format 5 SET statement is equivalent to this Format 6 SET statement:</li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
SET ENVIRONMENT &quot;FILE-PREFIX&quot; TO <em class="cEmphasis">file-prefix</em><a name="wp1041671"> </a>
</pre></div>
</ol></div>
<a name="wp1041672"> </a><h3 class="pHeadingRef">
Format 6 
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1041673"> </a><div class="pSmartList1"><li>ACUCOBOL-GT maintains a set of <em class="cEmphasis">configuration variables</em> that can affect various aspects of the runtime system.  These variables can be initially set in the ACUCOBOL-GT runtime configuration file described in Chapter 2 of the <em class="cEmphasis">User's Guide</em>.  The Format 6 SET statement can be used to modify these values at runtime. </li></div>
<a name="wp1041677"> </a><div class="pSmartList1"><li><em class="cEmphasis">Env-name</em> is the name of the configuration variable to set.  In it, lower-case characters are treated as upper case, and underscores are treated as hyphens.  The first space character delimits the name.  <em class="cEmphasis">Env-name</em> may specify either the literal name of the variable or a data-item whose value is the name of the variable.  If you specify the actual name of the variable, such as COMPRESS-FILES, then you must enclose the name in quotes.  <em class="cEmphasis">Env-value</em> is the value to set the variable to.  If it is a numeric data item, then it is treated as if it were redefined as an alphanumeric data item.  </li></div>
<a name="wp1041678"> </a><div class="pSmartList1"><li>If <em class="cEmphasis">env-name</em> does not match the name of one of the runtime system's configuration variables, then <em class="cEmphasis">env-name</em> and <em class="cEmphasis">env-value</em> are placed in the runtime system's local environment.  These entries are used to do file name translations-see the <em class="cEmphasis">ACUCOBOL-GT User's Guide, </em>section 2.8, &quot;File Name Interpretation.&quot;</li></div>
<a name="wp1041679"> </a><div class="pSmartList1"><li>The complete list of environment variables used by ACUCOBOL-GT can be found in Appendix H, Book 4, <em class="cEmphasis">Appendices.</em> </li></div>
</ol></div>
<a name="wp1041680"> </a><h3 class="pHeadingRef">
Format 7
</h3>
<a name="wp1041681"> </a><p class="pBody">
If the ADDRESS OF option is used, then the address of <em class="cEmphasis">data-item</em> is stored in <em class="cEmphasis">pointer</em>.  If the NULL option is used, then <em class="cEmphasis">pointer</em> is set to point to no data item.
</p>
<a name="wp1041682"> </a><h3 class="pHeadingRef">
Format 8
</h3>
<a name="wp1041683"> </a><p class="pBody">
The number of standard character positions occupied by <em class="cEmphasis">data-item</em> is stored in <em class="cEmphasis">result-item.</em> 
</p>
<a name="wp1041684"> </a><h3 class="pHeadingRef">
Format 9
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1041685"> </a><div class="pSmartList1"><li>If <em class="cEmphasis">pointer</em> is specified, then the address of the <em class="cEmphasis">linkage-item</em> is set to <em class="cEmphasis">pointer</em>.  If the ADDRESS OF option is used, then the address of the <em class="cEmphasis">linkage-item</em> is set to the address of <em class="cEmphasis">data-item</em>.  If the NULL option is used, then the address of the <em class="cEmphasis">linkage-item</em> is set to point to no data item. </li></div>
<a name="wp1041687"> </a><div class="pSmartList1"><li>The level of <em class="cEmphasis">linkage-item</em> must be either 01 or 77.</li></div>
<a name="wp1041688"> </a><div class="pSmartList1"><li>If the <em class="cEmphasis">linkage-item</em> is not listed in the PROCEDURE DIVISION USING phrase and is referenced before the SET ADDRESS OF statement, then the runtime will abort with the message, &quot;Use of a LINKAGE data item not passed by the caller&quot;.</li></div>
</ol></div>
<a name="wp1041690"> </a><p class="pBody">
Format 9 is helpful if you want to allocate a sizable piece of memory for temporary use, access this memory via a COBOL table, and then free the memory.  For example:
</p>
<div class="pSmartList1"><ul class="pSmartList1">
<a name="wp1041696"> </a><div class="pSmartList1"><li>Use the library routine M$ALLOC to allocate the memory.</li></div>
<a name="wp1041697"> </a><div class="pSmartList1"><li>SET the address of a Linkage section table to the pointer returned from M$ALLOC.</li></div>
<a name="wp1041698"> </a><div class="pSmartList1"><li>Complete the desired procedures.</li></div>
<a name="wp1041699"> </a><div class="pSmartList1"><li>Free the memory with M$FREE.</li></div>
</ul></div>
<a name="wp1041700"> </a><p class="pBody">
The code sample that follows shows how Format 9 works.
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
identification division.<a name="wp1041701"> </a>
<a name="wp1041702"> </a>
program-id.     sample-program.<a name="wp1041704"> </a>
<a name="wp1041705"> </a>
data division.<a name="wp1041706"> </a>
<a name="wp1041707"> </a>
working-storage section.<a name="wp1041708"> </a>
<a name="wp1041709"> </a>
linkage section.<a name="wp1041710"> </a>
<a name="wp1041711"> </a>
* item-a and ptr-a are passed in by the calling <a name="wp1041712"> </a>
* program<a name="wp1041713"> </a>
<a name="wp1041714"> </a>
    01 item-a    pic x(10).<a name="wp1041715"> </a>
<a name="wp1041716"> </a>
* ptr-a is set to the address of item-a <a name="wp1041717"> </a>
* in the calling program<a name="wp1041718"> </a>
<a name="wp1041719"> </a>
    01 ptr-a   usage pointer.<a name="wp1041720"> </a>
<a name="wp1041721"> </a>
* item-b is used in the SET Statement. <a name="wp1041722"> </a>
* It is not passed in by the calling program. <a name="wp1041723"> </a>
<a name="wp1041724"> </a>
    01 item-b   pic x(10).<a name="wp1041725"> </a>
<a name="wp1041726"> </a>
procedure division using item-a, ptr-a.<a name="wp1041727"> </a>
main-logic.<a name="wp1041728"> </a>
<a name="wp1041729"> </a>
* Assuming item-a has a value of &quot;ABCDEFGHIJ&quot;, <a name="wp1041730"> </a>
* and ptr-a points to item-a,<a name="wp1041731"> </a>
* the following will display &quot;ABCDEFGHIJ&quot; three <a name="wp1041732"> </a>
* times<a name="wp1041733"> </a>
<a name="wp1041734"> </a>
    display item-a.<a name="wp1041735"> </a>
<a name="wp1041736"> </a>
* &quot;ABCDEFGHIJ&quot; is displayed<a name="wp1041737"> </a>
<a name="wp1041738"> </a>
    set address of item-b to ptr-a.<a name="wp1041739"> </a>
    display item-b.<a name="wp1041740"> </a>
<a name="wp1041741"> </a>
* &quot;ABCDEFGHIJ&quot; is displayed<a name="wp1041742"> </a>
<a name="wp1041743"> </a>
    set address of item-b to address of item-a.<a name="wp1041744"> </a>
    display item-b.<a name="wp1041745"> </a>
<a name="wp1041746"> </a>
* &quot;ABCDEFGHIJ&quot; is displayed<a name="wp1041747"> </a>
<a name="wp1041748"> </a>
    stop run.<a name="wp1041749"> </a>
</pre></div>
<a name="wp1041750"> </a><h3 class="pHeadingRef">
Format 10
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1041755"> </a><div class="pSmartList1"><li>Format 10 of the SET verb makes <em class="cEmphasis">window-1</em> the current, or current and active window.  The <em class="cEmphasis">current</em> window is the window to which DISPLAY statements refer.  The <em class="cEmphasis">active</em> window is the window that is highlighted and the one to which user input is directed.  <em class="cEmphasis">Window-1</em> must be a handle to a valid floating window.  If <em class="cEmphasis">window-1</em> does not refer to a valid floating window, the SET statement has no effect.</li></div>
<a name="wp1041756"> </a><div class="pSmartList1"><li>INPUT, INPUT-OUTPUT, and I-O are synonymous.  They cause <em class="cEmphasis">window-1</em> to become both the current and active window.  </li></div>
<a name="wp1041757"> </a><div class="pSmartList1"><li>OUTPUT causes <em class="cEmphasis">window-1</em> to become the current window.  </li></div>
</ol></div>
<a name="wp1041758"> </a><h3 class="pHeadingRef">
Format 11
</h3>
<a name="wp1155158"> </a><p class="pBody">
A Format 11 SET statement retrieves the handle to the control described by <em class="cEmphasis">screen-1</em> or <em class="cEmphasis">id-1</em> and stores it in <em class="cEmphasis">handle-1</em>.  <em class="cEmphasis">Id-1</em> must specify a value greater than zero.  If a matching control is found, <em class="cEmphasis">handle-1</em> is set to the handle of that control.  If no matching control is found, <em class="cEmphasis">handle-1</em> is set to NULL.  If more than one control has a matching ID, then <em class="cEmphasis">handle-1</em> is arbitrarily set to one of those controls. Note that the handle can be used in any statement that can use control handles.  One reason you might want this handle is if you need to pass a control to a subprogram.  You cannot pass Screen Section names to subprograms, but you can pass the handle instead.  
</p>
<a name="wp1041764"> </a><h3 class="pHeadingRef">
Format 12
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1041765"> </a><div class="pSmartList1"><li>A Format 12 SET statement sets the execution priority of a thread.  Execution switches between threads at various points in the program.  Each opportunity to change the active thread is called a <em class="cEmphasis">switch point</em>.  The execution priority determines which thread gets control at each switch point. </li></div>
<a name="wp1041768"> </a><div class="pSmartList1"><li>The execution priority is an integer.  The higher the priority, the more often that thread gets control at a switch point.  By default, threads start with a priority value of 100.  Threads receive control in proportion to their priority.  Thus, a thread with a priority of 50 gains control half as often as a thread with a priority of 100.  Of course, if a thread is paused for any reason (waiting for input, for example), then it does not gain control.</li></div>
<a name="wp1041769"> </a><div class="pSmartList1"><li>If <em class="cEmphasis">thread-id</em> is specified, then the priority for the thread identified by <em class="cEmphasis">thread-id</em> is set to <em class="cEmphasis">priority</em>.  Otherwise, the current thread's priority is set to <em class="cEmphasis">priority</em>.  If <em class="cEmphasis">thread-id</em> does not correspond to an existing thread, then the SET statement has no effect.  </li></div>
<a name="wp1041770"> </a><div class="pSmartList1"><li>The minimum priority for a thread is &quot;1&quot;.  The maximum is 32767.  </li></div>
</ol></div>
<a name="wp1041771"> </a><h3 class="pHeadingRef">
Format 13
</h3>
<a name="wp1041773"> </a><p class="pBody">
A Format 13 SET statement associates the exception value specified in <em class="cEmphasis">exc-value</em> with an automated action that the runtime can perform.  Any keystroke, menu item, or control that produces the <em class="cEmphasis">exc-value</em> exception value will automatically cause the associated action to be performed (you do not have to code the action; it happens automatically).  If the runtime handles the exception in this way, then the exception is not passed on to the COBOL program.  
</p>
<a name="wp1041774"> </a><p class="pBody">
The ITEM-HELP action produces context-sensitive help for the control with the current input focus.  The HELP-CURSOR action places the mouse into help mode.  For a description of the ITEM-HELP and HELP-CURSOR actions, see section 10.4, Book 2, <em class="cEmphasis">ACUCOBOL-GT User Interface Programming.</em> 
</p>
<a name="wp1041777"> </a><p class="pBody">
The remaining actions take effect if the current control is an entry field (otherwise, they have no effect).  These actions cause the entry field to do the following:
</p>
<a name="wp1041803"> </a><p class="pBodyRelative">
</p><div>
<table border="0" cellpadding="6" cellspacing="1">
  <caption></caption>
  <tr align="left" valign="top">    <td><a name="wp1041780"> </a><p class="pCellBody">
CUT-SELECTION
</p>
</td>
    <td><a name="wp1041782"> </a><p class="pCellBody">
Cuts the current selection to the clipboard
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1041784"> </a><p class="pCellBody">
COPY-SELECTION
</p>
</td>
    <td><a name="wp1041786"> </a><p class="pCellBody">
Copies the current selection to the clipboard
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1041788"> </a><p class="pCellBody">
PASTE-SELECTION
</p>
</td>
    <td><a name="wp1041790"> </a><p class="pCellBody">
Pastes the clipboard into the entry field at the current location  (replaces any existing selection)
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1041792"> </a><p class="pCellBody">
DELETE-SELECTION
</p>
</td>
    <td><a name="wp1041794"> </a><p class="pCellBody">
Deletes the current selection
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1041796"> </a><p class="pCellBody">
UNDO
</p>
</td>
    <td><a name="wp1041798"> </a><p class="pCellBody">
Undoes the last change
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1041800"> </a><p class="pCellBody">
SELECT-ALL-SELECTION<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
</p>
</td>
    <td><a name="wp1041802"> </a><p class="pCellBody">
Selects all the text in the entry field.  In a multi-line entry field, this includes the text in all lines.
</p>
</td>
</tr>
</table>
</div>
<p class="pBodyRelative">
</p>
<a name="wp1041804"> </a><p class="pBody">
The cut, copy, paste, delete, and undo effects are accomplished automatically via the ACTION property of entry fields.  Usually, you will want to assign these exception values to various menu items and toolbar push buttons.  When you are setting up a push button to correspond to one of these actions, you should ensure that you make the push button a SELF-ACT button (otherwise the act of pushing the button makes the button the current control, not the entry field).
</p>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
