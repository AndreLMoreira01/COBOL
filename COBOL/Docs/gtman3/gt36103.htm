<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.5.1025" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/14/06 08:28:08" />
  <title>DISPLAY FLOATING WINDOW</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       ACUCOBOL-GT Reference Manual <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="gt36.htm"><br />Chapter 6:  Procedure Division</a> &gt; <a href="gt3678.htm">6.6  Procedure Division Statements </a> &gt; </p>
<a name="wp1038022"> </a><h2 class="pHeading2">
DISPLAY FLOATING WINDOW
</h2>
<a name="wp1038025"> </a><h3 class="pHeadingRef">
Format 11
</h3>
<a name="wp1038028"> </a><p class="pBody">
<span style="font-weight: bold" class="cBoldItalic">DISPLAY FLOATING WINDOW</span><em style="font-weight: normal" class="cEmphasis"> </em>creates and displays a floating window.
</p>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">DISPLAY</u> <u class="cUnderline">FLOATING</u> [<u class="cUnderline">GRAPHICAL</u>] <u class="cUnderline">WINDOW</u><a name="wp1038029"> </a>
<a name="wp1038030"> </a>
 [ <u class="cUnderline">UPON</u> parent-window ]<a name="wp1038031"> </a>
</pre></div>
<a name="wp1038032"> </a><p class="pBody">
Remaining phrases are optional, can appear in any order.
</p>
<div class="pPreformatted"><pre class="pPreformatted">
{<u class="cUnderline">MODELESS</u>}<a name="wp1038033"> </a>
{<u class="cUnderline">MODAL</u>   }<a name="wp1038034"> </a>
<a name="wp1038035"> </a>
{<u class="cUnderline">LINK</u>} TO <u class="cUnderline">THREAD</u><a name="wp1038036"> </a>
{<u class="cUnderline">BIND</u>}<a name="wp1038037"> </a>
<a name="wp1038038"> </a>
<u class="cUnderline">SCREEN</u> <u class="cUnderline">LINE</u> NUMBER screen-line<a name="wp1038039"> </a>
<a name="wp1038040"> </a>
<u class="cUnderline">SCREEN</u> {<u class="cUnderline">COLUMN</u>  } NUMBER screen-col<a name="wp1038041"> </a>
       {<u class="cUnderline">COL</u>     }<a name="wp1038042"> </a>
       {<u class="cUnderline">POSITION</u>}<a name="wp1038043"> </a>
       {<u class="cUnderline">POS</u>     }<a name="wp1038044"> </a>
<a name="wp1038045"> </a>
<u class="cUnderline">AT</u> screen-loc<a name="wp1038046"> </a>
<a name="wp1038047"> </a>
AT <u class="cUnderline">LINE</u> NUMBER line-num<a name="wp1038048"> </a>
<a name="wp1038049"> </a>
AT {<u class="cUnderline">COLUMN</u>  } NUMBER col-num<a name="wp1038050"> </a>
   {<u class="cUnderline">COL</u>     }<a name="wp1038051"> </a>
   {<u class="cUnderline">POSITION</u>}<a name="wp1038052"> </a>
   {<u class="cUnderline">POS</u>     }<a name="wp1038053"> </a>
<a name="wp1038054"> </a>
<u class="cUnderline">SIZE</u>  length<a name="wp1038055"> </a>
<a name="wp1038056"> </a>
<u class="cUnderline">LINES</u> height<a name="wp1038057"> </a>
<a name="wp1038058"> </a>
<u class="cUnderline">FONT</u> {IS} font-1<a name="wp1038059"> </a>
     {= }<a name="wp1038060"> </a>
<a name="wp1038061"> </a>
<u class="cUnderline">CONTROL</u> <u class="cUnderline">FONT</u> {IS} font-3<a name="wp1038062"> </a>
             {= }<a name="wp1038063"> </a>
<a name="wp1038064"> </a>
<u class="cUnderline">CELL</u> <a name="wp1038065"> </a>
 {<u class="cUnderline">SIZE</u>  }  [IS] {cell-units                                 }<a name="wp1038066"> </a>
 {<u class="cUnderline">HEIGHT</u>}  [= ] {control-type-name  FONT font-2 [<u class="cUnderline">SEPARATE</u>  ]}<a name="wp1038067"> </a>
 {<u class="cUnderline">WIDTH</u> }       {control-type-name  FONT        [<u class="cUnderline">OVERLAPPED</u>]}<a name="wp1038068"> </a>
<a name="wp1038069"> </a>
{<u class="cUnderline">ERASE</u>} SCREEN<a name="wp1038070"> </a>
{<u class="cUnderline">BLANK</u>}<a name="wp1038071"> </a>
<a name="wp1038072"> </a>
{<u class="cUnderline">REVERSE-VIDEO</u>}<a name="wp1038073"> </a>
{<u class="cUnderline">REVERSE</u>      }<a name="wp1038074"> </a>
{<u class="cUnderline">REVERSED</u>     }<a name="wp1038075"> </a>
<a name="wp1038076"> </a>
WITH {<u class="cUnderline">COLOR</u> } color-val<a name="wp1038077"> </a>
     {<u class="cUnderline">COLOUR</u>}<a name="wp1038078"> </a>
<a name="wp1038079"> </a>
{<u class="cUnderline">FOREGROUND-COLOR</u> } IS fg-color<a name="wp1038080"> </a>
{<u class="cUnderline">FOREGROUND-COLOUR</u>}<a name="wp1038081"> </a>
<a name="wp1038082"> </a>
{<u class="cUnderline">BACKGROUND-COLOR</u> } IS bg-color<a name="wp1038083"> </a>
{<u class="cUnderline">BACKGROUND-COLOUR</u>}<a name="wp1038084"> </a>
<a name="wp1038085"> </a>
{<u class="cUnderline">HIGHLIGHT</u>}<a name="wp1038086"> </a>
{<u class="cUnderline">HIGH</u>     }<a name="wp1038087"> </a>
{<u class="cUnderline">BOLD</u>     }<a name="wp1038088"> </a>
{<u class="cUnderline">LOWLIGHT</u> }<a name="wp1038089"> </a>
{<u class="cUnderline">LOW</u>      }<a name="wp1038090"> </a>
{<u class="cUnderline">STANDARD</u> }<a name="wp1038091"> </a>
<a name="wp1038092"> </a>
{<u class="cUnderline">BACKGROUND-HIGH</u>    }<a name="wp1038093"> </a>
{<u class="cUnderline">BACKGROUND-LOW</u>     }<a name="wp1038094"> </a>
{<u class="cUnderline">BACKGROUND-STANDARD</u>}<a name="wp1038095"> </a>
<a name="wp1038096"> </a>
{ [<u class="cUnderline">USER-GRAY</u>] [<u class="cUnderline">USER-WHITE</u>] }<a name="wp1038097"> </a>
{        <u class="cUnderline">USER-COLORS</u>       }<a name="wp1038098"> </a>
<a name="wp1038099"> </a>
<u class="cUnderline">BOXED</u><a name="wp1038100"> </a>
<a name="wp1038101"> </a>
<u class="cUnderline">SHADOW</u><a name="wp1038102"> </a>
<a name="wp1038103"> </a>
<u class="cUnderline">TITLE-BAR</u><a name="wp1038104"> </a>
<a name="wp1038105"> </a>
[<u class="cUnderline">TOP</u>   ] [<u class="cUnderline">CENTERED</u>] <u class="cUnderline">TITLE</u> IS title<a name="wp1038106"> </a>
[<u class="cUnderline">BOTTOM</u>] [<u class="cUnderline">LEFT</u>    ]<a name="wp1038107"> </a>
         [<u class="cUnderline">RIGHT</u>   ]<a name="wp1038108"> </a>
<a name="wp1038109"> </a>
WITH <u class="cUnderline">SYSTEM</u> <u class="cUnderline">MENU</u><a name="wp1038110"> </a>
<a name="wp1038111"> </a>
WITH <u class="cUnderline">NO</u> <u class="cUnderline">SCROLL</u><a name="wp1038112"> </a>
<a name="wp1038113"> </a>
WITH <u class="cUnderline">NO</u> <u class="cUnderline">WRAP</u><a name="wp1038114"> </a>
<a name="wp1038115"> </a>
{<u class="cUnderline">NO-CLOSE</u>}<a name="wp1107231"> </a>
<a name="wp1107232"> </a>
{<u class="cUnderline">AUTO-RESIZE</u>}<a name="wp1038116"> </a>
<a name="wp1038117"> </a>
{<u class="cUnderline">RESIZABLE</u>  }<a name="wp1038118"> </a>
<a name="wp1038119"> </a>
<u class="cUnderline">MIN-SIZE</u>  {= } min-size<a name="wp1038120"> </a>
          {IS}<a name="wp1038121"> </a>
<u class="cUnderline">MAX-SIZE</u>  {= } max-size<a name="wp1038122"> </a>
          {IS}<a name="wp1038123"> </a>
<u class="cUnderline">MIN-LINES</u> {= } min-lines<a name="wp1038124"> </a>
          {IS}<a name="wp1038125"> </a>
<u class="cUnderline">MAX-LINES</u> {= } max-lines<a name="wp1038126"> </a>
          {IS}<a name="wp1038127"> </a>
<a name="wp1038128"> </a>
<u class="cUnderline">CONTROL</u> <u class="cUnderline">VALUE</u> {IS} control-val<a name="wp1038129"> </a>
              {= }<a name="wp1038130"> </a>
<a name="wp1038131"> </a>
<u class="cUnderline">LAYOUT-MANAGER</u> {IS} manager<a name="wp1080361"> </a>
               {= }<a name="wp1080362"> </a>
<a name="wp1080363"> </a>
<u class="cUnderline">VISIBLE</u> {IS} {<u class="cUnderline">TRUE</u>         }<a name="wp1038132"> </a>
        {= } {<u class="cUnderline">FALSE</u>        }<a name="wp1038133"> </a>
             {visible-state}<a name="wp1038134"> </a>
<a name="wp1038135"> </a>
<u class="cUnderline">POP-UP</u> <u class="cUnderline">MENU</u> {IS}  {menu-1}<a name="wp1038136"> </a>
            {= }  {<u class="cUnderline">NULL</u>}<a name="wp1038137"> </a>
<a name="wp1038138"> </a>
{<u class="cUnderline">POP-UP</u> AREA IS } handle-name<a name="wp1038139"> </a>
{<u class="cUnderline">HANDLE</u> {IS}    }<a name="wp1038140"> </a>
        {IN}<a name="wp1038141"> </a>
<a name="wp1038142"> </a>
<u class="cUnderline">CONTROLS-UNCROPPED</u><a name="wp1038143"> </a>
<a name="wp1038144"> </a>
<u class="cUnderline">EVENT</u> PROCEDURE IS { proc-1 [ {<u class="cUnderline">THROUGH</u>} proc-2 ] }<a name="wp1038145"> </a>
                              {<u class="cUnderline">THRU</u>   }<a name="wp1038146"> </a>
                   { <u class="cUnderline">NULL</u>                        }<a name="wp1038147"> </a>
<a name="wp1038148"> </a>
<u class="cUnderline">ACTION</u> {IS} action<a name="wp1038149"> </a>
       {= }<a name="wp1038150"> </a>
</pre></div>
<a name="wp1038152"> </a><h3 class="pHeadingRef">
Syntax Rules
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1038153"> </a><div class="pSmartList1"><li>Different formats of the DISPLAY statement may be mixed together in one DISPLAY statement, as long as no ambiguity results.  The effect is the same as specifying each DISPLAY statement separately.</li></div>
<a name="wp1038154"> </a><div class="pSmartList1"><li><em class="cEmphasis">Parent-window</em> is a USAGE HANDLE or PIC X(10) data item.  If used, the UPON phrase must be the first optional phrase specified.  </li></div>
<a name="wp1038155"> </a><div class="pSmartList1"><li><em class="cEmphasis">Screen-line</em> and <em class="cEmphasis">screen-col</em> are numeric expressions.</li></div>
<a name="wp1038156"> </a><div class="pSmartList1"><li><em class="cEmphasis">Screen-loc</em> is an integer data item or literal containing exactly 4 or 6 digits.  It may also be a group item of 4 or 6 characters.  If a numeric item is used, it must be a non-negative integer.</li></div>
<a name="wp1038157"> </a><div class="pSmartList1"><li><em class="cEmphasis">Line-num</em>, <em class="cEmphasis">col-num, length, </em>and<em class="cEmphasis"> height </em>are numeric data items or literals.  They may be non-integer values.  You can also specify the value of any of these items with an arithmetic expression.  </li></div>
<a name="wp1038158"> </a><div class="pSmartList1"><li><em class="cEmphasis">Font-1, font-2</em> and <em class="cEmphasis">font-3</em> are data items described as USAGE HANDLE or HANDLE OF FONT.  They should contain valid handles to screen fonts.  </li></div>
<a name="wp1038159"> </a><div class="pSmartList1"><li><em class="cEmphasis">Cell-units</em> is a positive integer data item or literal.  </li></div>
<a name="wp1038160"> </a><div class="pSmartList1"><li><em class="cEmphasis">Control-type-name</em> is one of the control type reserved words known by the compiler.  </li></div>
<a name="wp1038161"> </a><div class="pSmartList1"><li><em class="cEmphasis">Color-val</em> is a numeric data item or literal.  <em class="cEmphasis">Color-val </em>can also be an arithmetic expression, except when used in the Screen Section. </li></div>
<a name="wp1038162"> </a><div class="pSmartList1"><li><em class="cEmphasis">Fg-color</em> and <em class="cEmphasis">bg-color</em> are integer literals or numeric data items. They may be arithmetic expressions.  See <a  href="gt3630.htm#wp1034866">section 6.4.9</a>, &quot;FOREGROUND-COLOR and BACKGROUND-COLOR Phrases&quot;, for a more detailed discussion of color settings and values. </li></div>
<a name="wp1038163"> </a><div class="pSmartList1"><li><em class="cEmphasis">Min-size, max-size, min-lines</em> and <em class="cEmphasis">max-lines</em> are integer literals or data items.  </li></div>
<a name="wp1038164"> </a><div class="pSmartList1"><li><em class="cEmphasis">Title</em> is an alphanumeric literal or data item.</li></div>
<a name="wp1038165"> </a><div class="pSmartList1"><li><em class="cEmphasis">Control-value</em> is a numeric expression.</li></div>
<a name="wp1127142"> </a><div class="pSmartList1"><li>The word &quot;NO-CLOSE&quot; is reserved by the compiler only when it appears in a Format 11 or 12 DISPLAY statement.</li></div>
<a name="wp1080378"> </a><div class="pSmartList1"><li><em class="cEmphasis">Manager</em> is a USAGE HANDLE or HANDLE OF LAYOUT-MANAGER that contains a valid reference to a layout manager.</li></div>
<a name="wp1038166"> </a><div class="pSmartList1"><li><em class="cEmphasis">Visible-state</em> is a numeric literal or data item.</li></div>
<a name="wp1038167"> </a><div class="pSmartList1"><li><em class="cEmphasis">Menu-1</em> is a USAGE HANDLE or HANDLE OF MENU data item.</li></div>
<a name="wp1038168"> </a><div class="pSmartList1"><li><em class="cEmphasis">Handle-name</em> is a USAGE HANDLE, HANDLE OF WINDOW, or PIC X(10) data item.</li></div>
<a name="wp1038169"> </a><div class="pSmartList1"><li><em class="cEmphasis">Proc-1</em> and <em class="cEmphasis">proc-2</em> are procedure names.</li></div>
<a name="wp1038170"> </a><div class="pSmartList1"><li><em class="cEmphasis">Action</em> is a numeric literal or data item.</li></div>
<a name="wp1038171"> </a><div class="pSmartList1"><li>You must compile allowing for recursive paragraphs in order to specify the EVENT PROCEDURE phrase.  Compiling for recursive paragraphs is allowed by default, but can be turned off with the &quot;-Zr0&quot; compiler option.</li></div>
<a name="wp1038172"> </a><div class="pSmartList1"><li>If the UPON phrase is specified, it must be the first optional phrase.</li></div>
<a name="wp1038173"> </a><div class="pSmartList1"><li>The SCREEN LINE phrase and the SCREEN COLUMN phrase must be used together.  If they are used, you cannot use the AT, LINE, or COLUMN phrases.  </li></div>
<a name="wp1038174"> </a><div class="pSmartList1"><li>If the AT phrase is specified, neither the LINE nor the COLUMN phrase may be specified.</li></div>
<a name="wp1038175"> </a><div class="pSmartList1"><li>If the COLOR phrase is specified, neither the FOREGROUND-COLOR nor the BACKGROUND-COLOR phrase may be specified. </li></div>
<a name="wp1038176"> </a><div class="pSmartList1"><li>The POP-UP/HANDLE phrase may be specified anywhere in the statement after the required initial elements.  </li></div>
<a name="wp1038177"> </a><div class="pSmartList1"><li>IS and &quot;=&quot; are synonymous.  </li></div>
<a name="wp1038178"> </a><div class="pSmartList1"><li>COLUMN, COL, POSITION, and POS are equivalent.</li></div>
<a name="wp1038179"> </a><div class="pSmartList1"><li>BLANK and ERASE are equivalent.</li></div>
<a name="wp1038180"> </a><div class="pSmartList1"><li>HIGHLIGHT, HIGH, and BOLD are synonymous.</li></div>
<a name="wp1038181"> </a><div class="pSmartList1"><li>LOWLIGHT and LOW are equivalent.  </li></div>
<a name="wp1038182"> </a><div class="pSmartList1"><li>REVERSE-VIDEO, REVERSE, and REVERSED are equivalent.</li></div>
<a name="wp1038183"> </a><div class="pSmartList1"><li>COLOR and COLOUR are synonymous.  </li></div>
<a name="wp1038184"> </a><div class="pSmartList1"><li>FOREGROUND-COLOR and FOREGROUND-COLOUR are synonymous.  </li></div>
<a name="wp1038185"> </a><div class="pSmartList1"><li>BACKGROUND-COLOR and BACKGROUND-COLOUR are synonymous.  </li></div>
</ol></div>
<a name="wp1038187"> </a><h3 class="pHeadingRef">
General Rules
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1038189"> </a><div class="pSmartList1"><li>The syntax for DISPLAY FLOATING WINDOW is a superset of the DISPLAY WINDOW verb.  This simplifies conversion of DISPLAY WINDOW statements to DISPLAY FLOATING WINDOW statements.  </li></div>
<a name="wp1038190"> </a><div class="pSmartList1"><li>The DISPLAY FLOATING WINDOW verb creates a new floating window and stores a handle to the window in <em class="cEmphasis">handle-name</em>.  Use the value of <em class="cEmphasis">handle-name</em> with other verbs (such as DESTROY) when you need to refer to the window.  </li></div>
<a name="wp1038191"> </a><div class="pSmartList1"><li>After the new window is created, it becomes both the current and active window.</li></div>
<a name="wp1038192"> </a><div class="pSmartList1"><li>The window created may be either <em class="cEmphasis">modal</em> or <em class="cEmphasis">modeless</em>.  A modal window is a window that the user cannot leave until it is closed.  A modeless window is a window that the user can leave (switch to another window) while it is still open.  These names are derived from the idea that a modal window enters a new <em class="cEmphasis">mode</em> in the program (for example, selecting a file to open) while a modeless window does not (since the user can continue working on tasks in other windows). </li></div>
<a name="wp1038195"> </a><div class="pSmartList1"><li>The DISPLAY FLOATING WINDOW verb also creates a new subwindow that exactly covers the interior of the floating window.  This is identical to an implied DISPLAY SUBWINDOW statement (with no options).  Any HIGH, LOW, STANDARD, BACKGROUND-HIGH, BACKGROUND-LOW, BACKGROUND-STANDARD, REVERSE, COLOR, NO SCROLL, or NO WRAP phrases specified in the DISPLAY FLOATING WINDOW verb are inherited by the implied subwindow. </li></div>
<a name="wp1038197"> </a><div class="pSmartList1"><li>Each window has a <em class="cEmphasis">controlling</em> thread.  A window's controlling thread is the most recent thread to have created that window or done an ACCEPT from that window.  When a thread performs an ACCEPT from a window, and that thread is not the controlling thread of the active window, the thread suspends.  The thread remains suspended until the window it is accessing becomes active (either because the user activates it or the program does).  </li></div>
<a name="wp1038198"> </a><div class="pSmartList1"><li>Most of the optional phrases have the same meaning as they do for DISPLAY SUBWINDOW.  However, note the following exceptions:</li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1038199"> </a><div class="pSmartList2"><li>The ERASE SCREEN phrase is always implied by DISPLAY FLOATING WINDOW, so specifying this phrase has no additional effect.</li></div>
<a name="wp1038201"> </a><div class="pSmartList2"><li>Most GUIs (including Windows) cannot display shadowed pop-up windows.  On these systems, the SHADOW phrase has no effect.  On character-based systems, the SHADOW phrase has its normal effect. </li></div>
<a name="wp1038203"> </a><div class="pSmartList2"><li>All GUIs create borders around their windows.  If there is a choice of border thickness, specifying BOXED will select a thicker border than omitting BOXED.  Under character-based systems, the BOXED phrase determines whether or not there will be a border. </li></div>
<a name="wp1038205"> </a><div class="pSmartList2"><li>The HIGH, LOW, STANDARD, BACKGROUND-HIGH, BACKGROUND-LOW, BACKGROUND-STANDARD, REVERSE, COLOR, NO WRAP, and NO SCROLL phrases do not directly affect the created window.  Instead, they are passed on to the initial subwindow as described in Rule 5, above.  </li></div>
<a name="wp1038207"> </a><div class="pSmartList2"><li>Most GUIs (including Windows) cannot display more than one window title and do not give you a choice of title position.  On these systems, the specified TITLE appears in the location determined by the GUI (usually top center, or top left).  If you specify more than one title, the TOP title is the one used.  If you specify only one title (either TOP or BOTTOM), it is used regardless of the title location. </li></div>
</ol></div>
</ol></div>
<a name="wp1038209"> </a><p class="pBody">
<b class="cBold">GRAPHICAL Phrase</b>
</p>
<a name="wp1038211"> </a><p class="pBody">
The optional GRAPHICAL phrase directs the compiler to use a default CELL phrase equivalent to:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
CELL SIZE = LABEL FONT<a name="wp1038212"> </a>
</pre></div>
<a name="wp1038213"> </a><p class="pBody">
This phrase establishes the window's coordinate space based on the font used by controls that occupy the window.  The CELL phrase can still be used and any values set in that phrase take precedence over the default value established with GRAPHICAL option.  In other words, if you specify only a CELL HEIGHT or CELL WIDTH, then the other dimension receives the default assignment.
</p>
<a name="wp1038214"> </a><p class="pBody">
The intent of the GRAPHICAL option is to make it easier to consistently establish an appropriate coordinate space for windows that contain only controls (see the discussion of cell sizing and coordinate space that is included with the CELL phrase rules, below). 
</p>
<a name="wp1038216"> </a><p class="pBody">
For example, the window that is specified with:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
DISPLAY FLOATING WINDOW,<a name="wp1038217"> </a>
    CELL SIZE = LABEL FONT<a name="wp1038218"> </a>
</pre></div>
<a name="wp1038219"> </a><p class="pBody">
can be more simply specified with:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
DISPLAY FLOATING GRAPHICAL WINDOW<a name="wp1038220"> </a>
</pre></div>
<a name="wp1038221"> </a><p class="pBody">
<b class="cBold">UPON Phrase</b>
</p>
<a name="wp1038223"> </a><p class="pBody">
The UPON phrase specifies the parent of the new floating window.  <em class="cEmphasis">Parent-window</em> must be a valid floating window handle.  If the UPON phrase is omitted, the current window is used as the parent.  If you create a new floating window in the scope of an UPON phrase, the new window becomes the current window when the DISPLAY statement terminates.  
</p>
<a name="wp1038227"> </a><p class="pBody">
<b class="cBold">MODAL and MODELESS Phrases  </b>
</p>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1038228"> </a><div class="pSmartList1"><li>The word MODAL makes a floating window modal.  Floating windows are modal by default, so this word is just commentary.  When a modal window is active, all other windows are disabled.  The user cannot activate another window, including any of its components (such as its menu or close button).  Note, however, that while a user cannot activate another window, the program can (see Format 10 of the SET statement).  </li></div>
<a name="wp1038229"> </a><div class="pSmartList1"><li>The word MODELESS makes a window modeless.  When a modeless window is active, the user can activate another window by using the host system's techniques for doing so (for example, by clicking on another window with the mouse).  When this happens, any ACCEPT that is active is terminated by a CMD-ACTIVATE event.  Your program should respond by performing an ACCEPT in the window requested by the user.  Alternatively, you can link your modeless window to a thread, see rule 1 under LINK TO THREAD and BIND TO THREAD Phrases (below).</li></div>
</ol></div>
<a name="wp1038234"> </a><p class="pBody">
<b class="cBold">LINK TO THREAD and BIND TO THREAD Phrases </b>
</p>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1038236"> </a><div class="pSmartList1"><li>The LINK TO THREAD phrase allows the runtime to automate the handling of the CMD-ACTIVATE event.  If the user activates a window created with the LINK TO THREAD phrase, the runtime will examine that window to see if it has a controlling thread different from the current thread.  If it does, then the current thread suspends and the thread controlling the newly active window is allowed to run.  The runtime handles all aspects of the window activation.  The CMD-ACTIVATE event is not returned to the program in this case.  If the controlling thread of the new window is the same as the current thread, then the runtime does not perform any special handling and the CMD-ACTIVATE event is passed on to your program.  In order to get the best benefit from the LINK TO THREAD phrase, you should arrange to have a separate thread control each modeless window in your program.  </li></div>
<a name="wp1038237"> </a><div class="pSmartList1"><li>The BIND TO THREAD phrase has the same effect as the LINK TO THREAD phrase.  In addition, the window is automatically destroyed when its controlling thread terminates.  </li></div>
</ol></div>
<a name="wp1038238"> </a><p class="pBody">
<b class="cBold">SCREEN LINE and SCREEN COLUMN Phrases</b>
</p>
<a name="wp1038240"> </a><p class="pBody">
The SCREEN LINE and SCREEN COLUMN phrases determine the initial location of the window on the screen.  <em class="cEmphasis">Screen-line</em> and <em class="cEmphasis">screen-col</em> give the coordinates of the upper left corner of the window in screen base units.  Screen base units are machine dependent.  On character systems, they are character cells.  On graphical systems, they are pixels.  The upper left corner of the screen is location &quot;1,1&quot;.  Under Windows, the runtime ensures that the initial window is fully visible, so the specified location may not be used if that would place a portion of the window off the screen (the closest allowed location is used).  Windows other than the initial window may be placed arbitrarily.  On graphical systems, the location of a floating window is interpreted to mean the location of its exterior.  On character systems, the location is the same as it is for subwindows: the location of the window's interior.
</p>
<a name="wp1038241"> </a><p class="pBody">
<b class="cBold">LINE, COLUMN, and AT Phrases</b>
</p>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1038242"> </a><div class="pSmartList1"><li>The LINE phrase indicates the starting row of the new window.  This is always relative to the first line of the parent window.  Non-integer values are allowed.  If the LINE phrase is omitted, then the new window is first centered vertically over the parent window and then adjusted to be fully on the screen.  </li></div>
<a name="wp1038243"> </a><p class="pNoteList">
<hr />
<b>Note:  </b>This rule differs from the handling of DISPLAY SUBWINDOW.  With DISPLAY SUBWINDOW, omitting the LINE phrase is the same as specifying &quot;LINE 1&quot;.
<hr />
</p>
<a name="wp1038245"> </a><p class="pIndented1">
In all cases, the positioning is relative to the parent window as physically displayed on the screen, ignoring any aspect of the window not currently displayed.  Thus, if the current window is the main application window, and that window has been scrolled by the user, line &quot;1&quot; refers to the first line of the physical window--not the (undisplayed) first line of the main application window.  
</p>
<a name="wp1038246"> </a><div class="pSmartList1"><li>The COLUMN phrase works analogously to the LINE phrase, except that it controls the horizontal positioning.  </li></div>
<a name="wp1038247"> </a><div class="pSmartList1"><li>The AT phrase <em class="cEmphasis">screen-loc</em> item must be either a 4-digit or 6-digit number.  The first half of this number is the starting row, the second half the starting column.  These values are interpreted in the same manner as they are for the LINE and COLUMN phrases.  A value of zero is treated as zero (i.e.<em class="cEmphasis">, </em><span style="font-family: Arial, Verdana, Helvetica, sans-serif">AT 0000</span> is equivalent to <span style="font-family: Arial, Verdana, Helvetica, sans-serif">ROW 0, COL 0</span>).</li></div>
</ol></div>
<a name="wp1038248"> </a><p class="pBody">
<b class="cBold">SIZE and LINES Phrases</b>
</p>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1038249"> </a><div class="pSmartList1"><li>The SIZE phrase indicates the width of the interior of the new window.  If it is omitted, then the width is the same as the main application window.  If there is no main application window available, the default size of the floating window is the same as the current window. </li></div>
<a name="wp1038250"> </a><p class="pNoteList">
<hr />
<b>Note:  </b>A non-integer SIZE is allowed.  If the SIZE is not an integer, then the partial column created cannot be used to display textual characters; however, graphical controls can be located there.  The partial column is always shown as spaces with the floating window's background color.  The minimum SIZE value allowed is &quot;1&quot;.  The runtime currently limits the maximum size to 132 columns.
<hr />
</p>
<a name="wp1038252"> </a><div class="pSmartList1"><li>The LINES phrase indicates the height of the new window's interior.  If it is omitted, then the height is the same as the main application window.  As with the SIZE phrase, a non-integer number of lines may be specified.  Any partial lines created are always displayed as spaces with the background color.  The minimum value for LINES is &quot;1&quot; (one).  The runtime currently limits the maximum size to 50 lines.</li></div>
</ol></div>
<a name="wp1038253"> </a><p class="pBody">
<b class="cBold">FONT Phrase</b>
</p>
<a name="wp1038254"> </a><p class="pBody">
The FONT phrase assigns the font that will be used for all textual ACCEPT and DISPLAY statements used in the window.  This also sets the default <em class="cEmphasis">cell size</em> to the size of the &quot;0&quot; (zero) character described by <em class="cEmphasis">font-1</em>.  The cell size determines the height of one row and the width of one column.  The font described by <em class="cEmphasis">font-1</em> must be a fixed-width font.  If it is not, or if the FONT phrase is not specified, then the font used is the same as the one used by the parent window.  
</p>
<a name="wp1038255"> </a><p class="pBody">
<b class="cBold">CONTROL FONT Phrase</b>
</p>
<a name="wp1038256"> </a><p class="pBody">
The CONTROL FONT phrase specifies the default font to use for any graphical controls displayed in this window.  If you omit the CONTROL FONT phrase, a system default is used (the font &quot;DEFAULT-FONT&quot;).
</p>
<a name="wp1038257"> </a><p class="pBody">
<b class="cBold">CELL Phrase</b>
</p>
<a name="wp1038260"> </a><p class="pBody">
The CELL phrase defines the height, or width, or height and width of one cell in the window.  A cell defines the height of one row and the width of one column.  The default cell size is set by the size of the font used in the window.  
</p>
<a name="wp1038261"> </a><p class="pBody">
The cell size is described in terms of cell units.  The exact meaning of a cell unit is machine-dependent.  Typically, for character-based systems, one cell unit is equal to the height or width (as appropriate) of one screen character.  On graphical systems, a cell unit is typically one pixel in size.  When developing programs, you should avoid writing code that depends on fixed (hard-coded) values for cell units.   
</p>
<a name="wp1038262"> </a><p class="pBody">
The HEIGHT option of the CELL phrase defines the cell height for the new window.  The WIDTH option defines the width.  The SIZE phrase defines both the height and width together.  
</p>
<a name="wp1038263"> </a><p class="pBody">
The cell-units option sets the cell's height, or width, or both, to the value of cell-units.  
</p>
<a name="wp1038264"> </a><p class="pBody">
The control-type-name phrase causes the cell height, or width, or both, to be based on a particular font and control type.  The system measures the size of <em class="cEmphasis">font-2</em> when it is used in a control described by control-type-name, and sets the cell size accordingly.  This option is typically used to set the coordinate space of the window to one that is convenient for aligning several controls of a particular type and font.  Note that the font handle (<em class="cEmphasis">font-2</em>) is not required.  When it is omitted, the window's CONTROL FONT is used.  Also note that if the font handle is omitted, the optional word FONT is required (in order to avoid ambiguity with the FONT phrase).
</p>
<a name="wp1038265"> </a><p class="pBody">
If the SEPARATE option is specified, then a system-dependent amount is added to the measured font height to provide for some vertical separation between controls.  This is typically used to provide some space between boxed entry-fields on adjacent rows.  On the other hand, if OVERLAPPED is specified, the height is reduced by the size of the top border of a boxed entry field.  This causes boxed fields on adjacent rows to share a common border.  
</p>
<a name="wp1038266"> </a><p class="pBody">
The runtime currently limits control-type-name to be either a &quot;LABEL&quot; or &quot;ENTRY-FIELD&quot;.  If another control type name is used, the runtime treats it as if it were type &quot;LABEL&quot;.
</p>
<a name="wp1038267"> </a><p class="pBody">
If a window's cell width does not match the width of its font, or if its cell height is less than the height of its font, then the effects of a textual ACCEPT or DISPLAY statement in that window are undefined.  If its cell height is larger than its font's height, then the characters are positioned at the top of each cell, and the lower portion of the cell is filled with the text's background color.  
</p>
<a name="wp1038268"> </a><p class="pNote">
<hr />
<b>Note:  </b>The purpose of the CELL phrase is to simplify the construction of windows that contain only controls.  We strongly recommend that you use it (or the GRAPHICAL phrase described above) whenever you create a window that will only contain controls.  If you do not, your screens will be less portable.  
<hr />
</p>
<a name="wp1038269"> </a><p class="pBody">
In particular, if the relative size of the font you use in your controls changes in relation to the system's fixed font, then you will experience problems, including overlapping controls.  This is because the default cell size that defines the coordinate space is based on a fixed-size font in order to maintain compatibility with character-based applications.  The size relationship between the variable-pitch font used in controls and the default fixed-font that defines the coordinate space determines the appearance of the screen.  If the relationship changes, the appearance of the screen changes.  One way that this can happen is if the end user's machine is missing one of the fonts.  In this case, Windows will substitute a different font, which may be a different size.  To avoid these problems, define your coordinate space based on the same font that your controls use (with the CELL phrase).  Then if the font changes the entire screen is rescaled uniformly.
</p>
<a name="wp1038270"> </a><p class="pBody">
For example, the following statement defines the coordinate space based on the font used with entry fields.  This definition allows you to easily position entry fields vertically with &quot;LINE 1&quot;, &quot;LINE 2&quot;, etc., and have it look right.
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
	CELL SIZE IS ENTRY-FIELD FONT SEPARATE<a name="wp1038271"> </a>
</pre></div>
<a name="wp1038272"> </a><p class="pBody">
<b class="cBold">USER-GRAY, USER-WHITE, and USER-COLORS Phrases</b>
</p>
<a name="wp1038276"> </a><p class="pBody">
The USER-GRAY, USER-WHITE, and USER-COLORS phrases provide a convenient way of matching your application's normal colors to those chosen by the user.  The USER-GRAY option causes the palette manager to map color number &quot;8&quot; (low-intensity white) to the color that the user has chosen to use with 3-D objects on the host system.  Similarly, USER-WHITE maps color number &quot;16&quot; (high-intensity white) to the color the user has chosen to be the normal background color for application windows.  If you arrange your application so that it uses color number &quot;8&quot; as the background for regions populated with graphical controls, and color number &quot;16&quot; for plain text regions, your application will look much like other applications on the system.  
</p>
<a name="wp1038278"> </a><p class="pBody">
The USER-COLORS phrase indicates that you want to apply both the USER-GRAY and USER-WHITE options.  These phrases are effective only on host graphical systems that have a palette manager.  On other systems, these phrases have no effect.  Also, note that the palette applies to the entire application.  Because of this, you usually specify these options only on the first window you create.  
</p>
<a name="wp1038280"> </a><p class="pNote">
<hr />
<b>Note:  </b>Because Windows make abundant use of 3-D effects in displaying controls, we strongly suggest that you use the USER-GRAY or USER-COLORS options for programs with graphical controls that run under Windows.  Graphical controls look best when placed on a &quot;gray&quot; background (color number &quot;8&quot;).   Other color choices may make 3-D controls look odd.  
<hr />
</p>
<a name="wp1038281"> </a><p class="pBody">
<b class="cBold">TITLE-BAR Phrase</b>
</p>
<a name="wp1038283"> </a><p class="pBody">
The TITLE-BAR phrase indicates that you want to have a title bar placed along the top edge of the new window.  This phrase is automatically implied by the TITLE phrase (exception: this is not true if you also use the CONTROL VALUE phrase).  Under some GUIs (including Windows), you must place a title bar in order to move the floating window with the mouse.  Without a title bar, the user's ability to move the window depends on the host GUI.  Note that you can have a title bar without specifying a title.  
</p>
<a name="wp1038284"> </a><p class="pBody">
<b class="cBold">SYSTEM MENU Phrase</b>
</p>
<a name="wp1190002"> </a><p class="pBody">
The SYSTEM MENU phrase causes a system menu (also known as a close box) to appear on the created window.  This menu allows the user to close the floating window.  It may also have additional properties depending on the host system.  Under Windows, this menu contains the Move and Close operations.  If you include a system menu, your program must be ready to act on a close window event (cmd_close) at any time.  See <a  href="gt343.htm#wp1034368">section 4.2</a>, and Chapter 6, Book 2, <em class="cEmphasis">User Interface Programming,</em> for additional information.  See also the QUIT_MODE configuration variable in Appendix H, Book 4, for shutdown handling options.  Note that the SYSTEM MENU phrase also implies the TITLE-BAR phrase.  
</p>
<a name="wp1107739"> </a><p class="pBody">
<b class="cBold">NO-CLOSE Phrase</b>
</p>
<a name="wp1107740"> </a><p class="pBody">
The NO-CLOSE phrase causes the window's &quot;Close&quot; menu option to be disabled.  This option can be applied only when the window is created and its effects cannot be reversed (the associated window's &quot;Close&quot; option is permanently disabled).  The NO-CLOSE option takes precedence over other settings, including the setting of the QUIT_MODE configuration variable.
</p>
<a name="wp1038287"> </a><p class="pBody">
<b class="cBold">AUTO-RESIZE and RESIZABLE Phrases</b>
</p>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1038290"> </a><div class="pSmartList1"><li>The AUTO-RESIZE phrase specifies that the window be displayed with <em class="cEmphasis">resizable</em> borders.  When the window is created, it is displayed full size as defined by the SIZE and LINES phrases.  By dragging the resizable borders the user can reduce or increase the size of the window.  The runtime automatically adds scroll bars as needed and manages any required scrolling.  The window also has a maximize button that allows the user to immediately resize the window to its full size.  The exact representation and functioning of the resizable borders and the maximize button is host system dependent.  Although the user can change the physical size of the window, the logical size does not change.  Neither do controls in the window change size or position.  If AUTO-RESIZE is omitted, the window is a fixed size. </li></div>
<a name="wp1038292"> </a><div class="pSmartList1"><li>The RESIZABLE phrase creates a window that the user can resize but omits the automatic handling provided by the AUTO-RESIZE phrase.  When the user resizes the window, the size of the logical window is changed to match the new physical window.  Any area that is new is displayed with spaces in the window's background color.  Any area that has been removed is lost (although any permanent controls in that area will still exist).  The window's subwindow is resized to fill the interior of the resized window.  The subwindow's background color is changed to match the window's background color.  Other traits of the subwindow remain unchanged.  The program receives a NTF-RESIZED event to inform it of the new size.  See the section on events for details.  Windows that have the RESIZABLE attribute can use a resize layout manager to help handle the resizing and positioning of controls in the window.  See section 4.8.4, &quot;The Resize Layout Manager,&quot; in Book 2 for details.</li></div>
<a name="wp1038293"> </a><div class="pSmartList1"><li>For windows with the RESIZABLE phrase, <em class="cEmphasis">min-size </em>and <em class="cEmphasis">min-lines</em> set the windows' smallest width and height respectively.  This value is expressed in character cells (fractional cells are ignored).  If omitted, or set to zero, the smallest window size is determined by the host system.  Similarly, the <em class="cEmphasis">max-size</em> and <em class="cEmphasis">max-lines</em> values set the window's largest width and height.  If omitted, or set to zero, the host system determines the largest size (usually the entire screen).  For windows without the RESIZABLE phrase, these values are ignored.  </li></div>
<a name="wp1038294"> </a><p class="pNoteList">
<hr />
<b>Note:  </b>Adding or removing a menu or toolbar from a window normally causes the window to be resized to maintain its interior dimensions.  For windows with the RESIZABLE phrase, the window is not resized.  Instead, the interior dimensions are reduced or increased as needed.  You should either modify the window to be the desired size, or inquire the current dimensions when you add or remove a menu or toolbar for resizable windows. 
<hr />
</p>
</ol></div>
<a name="wp1038295"> </a><p class="pBody">
<b class="cBold">ACTION Phrase</b>
</p>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1038296"> </a><div class="pSmartList1"><li>The ACTION phrase allows you to programmatically maximize, minimize, or restore a window.  To use ACTION, assign it one of the following values (these names are found in acugui.def):</li></div>
<a name="wp1122624"> </a><p class="pBodyRelative">
<div>
<table border="0" cellpadding="6" cellspacing="1">
  <caption></caption>
  <tr align="left" valign="top">    <td><a name="wp1122630"> </a><p class="pCellBody">
<b class="cBold">ACTION-MAXIMIZE<br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;</b>
</p>
</td>
    <td><a name="wp1122632"> </a><p class="pCellBody">
maximizes the window.  It has the same effect as if the user clicked the &quot;maximize&quot; button.  Allowed only for windows that have RESIZABLE or AUTO-RESIZE specified or implied for them.
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1122634"> </a><p class="pCellBody">
<b class="cBold">ACTION-MINIMIZE</b>
</p>
</td>
    <td><a name="wp1200353"> </a><p class="pCellBody">
minimizes the window.  Allowed only with INDEPENDENT windows that have the AUTO-MINIMIZE property set to true.  It is not supported with other types of floating windows; if set, it is ignored by the runtime.
</p>
<a name="wp1200341"> </a><p class="pCellBody">
ACTION-MINIMIZE has the same effect as if the user clicked the &quot;minimize&quot; button.    
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1122638"> </a><p class="pCellBody">
<b class="cBold">ACTION-RESTORE</b>
</p>
</td>
    <td><a name="wp1122640"> </a><p class="pCellBody">
If the window is currently maximized or minimized, restores the window to its previous size and position; otherwise, it has no effect.  Allowed only for windows that can be maximized or minimized.
</p>
</td>
</tr>
</table>
</div>

</p>
<a name="wp1038300"> </a><div class="pSmartList1"><li>If you assign an ACTION value that is not allowed, then there is no effect other than to trigger the ON EXCEPTION phrase of the MODIFY statement (if present).  Note that you can use the ACTION phrase to create a window that is initially maximized or minimized.</li></div>
</ol></div>
<a name="wp1038301"> </a><p class="pBody">
<b class="cBold">CONTROL VALUE Phrase</b>
</p>
<a name="wp1038302"> </a><p class="pBody">
The CONTROL VALUE phrase allows you to specify certain attributes of the new window at run time instead of at compile time.  <em class="cEmphasis">Control-val</em> must be a numeric expression.  In it, you can specify certain floating window traits by adding together any of the following values:
</p>
<a name="wp1038342"> </a><p class="pBodyRelative">
</p><div>
<table border="0" cellpadding="6" cellspacing="1">
  <caption></caption>
  <tr align="left" valign="top">    <td><a name="wp1038307"> </a><p class="pCellBody">
Boxed 
</p>
</td>
    <td><a name="wp1038309"> </a><p class="pCellBody">
  1
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038311"> </a><p class="pCellBody">
Shadow
</p>
</td>
    <td><a name="wp1038313"> </a><p class="pCellBody">
  2
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038315"> </a><p class="pCellBody">
No Scroll 
</p>
</td>
    <td><a name="wp1038317"> </a><p class="pCellBody">
  4
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038319"> </a><p class="pCellBody">
No Wrap 
</p>
</td>
    <td><a name="wp1038321"> </a><p class="pCellBody">
  8
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038323"> </a><p class="pCellBody">
Reverse 
</p>
</td>
    <td><a name="wp1038325"> </a><p class="pCellBody">
 16
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038327"> </a><p class="pCellBody">
Title-Bar
</p>
</td>
    <td><a name="wp1038329"> </a><p class="pCellBody">
 32
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038331"> </a><p class="pCellBody">
System Menu
</p>
</td>
    <td><a name="wp1038333"> </a><p class="pCellBody">
 64
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038335"> </a><p class="pCellBody">
User-Gray 
</p>
</td>
    <td><a name="wp1038337"> </a><p class="pCellBody">
128
</p>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1038339"> </a><p class="pCellBody">
User-White 
</p>
</td>
    <td><a name="wp1038341"> </a><p class="pCellBody">
256
</p>
</td>
</tr>
</table>
</div>
<p class="pBodyRelative">
</p>
<a name="wp1080468"> </a><p class="pBody">
For each value specified, the corresponding attribute is given to the new window.  When a value is not specified, the presence or absence of that trait depends on the other phrases included in the DISPLAY FLOATING WINDOW statement.  Note that you can only give traits to a window with the CONTROL VALUE phrase; you cannot negate traits specified by the DISPLAY FLOATING WINDOW statement.  For example, if you want to specify at run time whether or not a window gets a shadow, you should omit the SHADOW phrase from the DISPLAY FLOATING WINDOW statement and use a CONTROL VALUE phrase to add shadowing when you want it.
</p>
<a name="wp1080469"> </a><p class="pBody">
<b class="cBold">LAYOUT-MANAGER Phrase</b>
</p>
<a name="wp1080470"> </a><p class="pBody">
The LAYOUT-MANAGER phrase attaches a layout manager to the window.
</p>
<a name="wp1080471"> </a><p class="pBody">
<b class="cBold">VISIBLE Phrase</b>
</p>
<a name="wp1080472"> </a><p class="pBody">
The VISIBLE option determines whether the window created is visible or invisible.  If the FALSE option is used, or <em class="cEmphasis">visible-state</em> is the value zero, then the window is invisible.  Otherwise, the window is visible.  If the VISIBLE phrase is omitted, then the window is visible.  
</p>
<a name="wp1038346"> </a><p class="pBody">
<b class="cBold">POP-UP MENU Phrase</b>
</p>
<a name="wp1038347"> </a><p class="pBody">
The POP-UP MENU phrase associates a pop-up menu with the window.  If <em class="cEmphasis">menu-1</em> is specified, then the menu associated with <em class="cEmphasis">menu-1 </em>becomes the pop-up menu.  If NULL is specified, the window is not given a pop-up menu.  Pop-up menus are activated by a machine-dependent technique.  Under Windows, the technique is to right-click on the window's background.  
</p>
<a name="wp1038348"> </a><p class="pBody">
<b class="cBold">CONTROLS-UNCROPPED Phrase</b>
</p>
<a name="wp1038349"> </a><p class="pBody">
Normally, when you create a control in a window, the control is cropped to fit the current subwindow's dimensions.  In addition, if the control's home position is outside of the current subwindow, the control is not created.  Adding the phrase CONTROLS-UNCROPPED overrides these rules.  When this phrase is used, the control is created with the specified location and dimensions, regardless of whether the control will be physically in the window.  
</p>
<a name="wp1038350"> </a><p class="pBody">
This can be useful when you are dealing with RESIZABLE windows.  Sometimes a resizable window is too small to show all of the controls that your program creates.  Normally, these controls either would not be created or would be cropped.  This could produce odd results when the window is later resized larger by the user.  Although the resized window is now large enough to show everything, the controls still show their cropped appearance, because their (cropped) creation size is recorded in the controls as their actual size.  Specifying CONTROLS-UNCROPPED avoids the cropping behavior.  
</p>
<a name="wp1038351"> </a><p class="pBody">
This style is useful also when you want to place a combo-box near the bottom of a window.  Because the size of the drop-down portion of the combo-box is determined by the control's overall height, cropping the control limits the drop-down box to the window's boundaries.  If you want the box to drop down beyond the edge of the window, you need to use the CONTROLS-UNCROPPED window style to allow this.  
</p>
<a name="wp1038352"> </a><p class="pBody">
<b class="cBold">EVENT PROCEDURE Phrase</b>
</p>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1038353"> </a><div class="pSmartList1"><li>A window's event procedure is executed whenever an event is processed for that window.  The event procedure is executed as if it were the target of a PERFORM statement.  Only the window's own events trigger the event procedure.  Events generated by controls contained in the window do not trigger the window's event procedure (they trigger the control's event procedure instead).  The event procedure executes while the event is being processed, before the event causes termination of any executing ACCEPT statement.  See <a  href="gt3557.htm#wp1037068">section 5.9.6, &quot;PROCEDURE Clause,&quot;</a> for more information about event procedures.  </li></div>
<a name="wp1038354"> </a><div class="pSmartList1"><li>Specifying <em class="cEmphasis">proc-1</em> assigns that procedure as the window's event procedure.  Flow of control returns at the end of <em class="cEmphasis">proc-1</em>, unless <em class="cEmphasis">proc-2</em> is specified, in which case flow of control returns at the end of <em class="cEmphasis">proc-2</em>.  If you specify the NULL option, the window does not have an event procedure.  This is the default, so the NULL option is treated as commentary.  </li></div>
</ol></div>
<a name="wp1038355"> </a><p class="pNote">
<hr />
<b>Note:  </b>Phrases not described above are described in <a  href="gt3630.htm#wp1034866">section 6.4.9, &quot;Common Screen Options.&quot;</a>
<hr />
</p>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
