<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.5.1025" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/14/06 08:27:52" />
  <title>5.9  Screen Description Entry</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       ACUCOBOL-GT Reference Manual <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="gt35.htm"><br />Chapter 5:  Data Division</a> &gt; </p>
<a name="wp1036504"> </a><h2 class="pHeading1">
5.9  Screen Description Entry
</h2>
<a name="wp1036505"> </a><p class="pBody">
A screen description entry specifies the characteristics of a single screen item.  Many of the phrases permitted in a Screen Description Entry are explained in <a  href="gt3630.htm#wp1034866">section 6.4.9, &quot;Common Screen Options.&quot;</a> 
</p>
<a name="wp1036508"> </a><h3 class="pHeadingRef">
General Format
</h3>
<a name="wp1036509"> </a><h3 class="pHeadingRef">
Format 1
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
level-number  [ screen-name ]<a name="wp1036510"> </a>
              [ FILLER      ]<a name="wp1036511"> </a>
</pre></div>
<a name="wp1036512"> </a><p class="pBody">
Remaining phrases are optional, can appear in any order.
</p>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">GRAPHICAL</u><a name="wp1036513"> </a>
<u class="cUnderline">CHARACTER</u><a name="wp1036514"> </a>
<a name="wp1036515"> </a>
{<u class="cUnderline">PICTURE</u>} IS picture-string<a name="wp1036516"> </a>
{<u class="cUnderline">PIC</u>    }<a name="wp1036517"> </a>
<a name="wp1036518"> </a>
[ [<u class="cUnderline">FROM</u> from-item] [<u class="cUnderline">TO</u> to-item] ]<a name="wp1036519"> </a>
[       <u class="cUnderline">USING</u> using-item        ]<a name="wp1036520"> </a>
<a name="wp1036521"> </a>
[<u class="cUnderline">USAGE</u> IS] <u class="cUnderline">DISPLAY</u> <a name="wp1036522"> </a>
<a name="wp1057418"> </a>
[<u class="cUnderline">SIGN</u> IS] {<u class="cUnderline">LEADING</u> } <u class="cUnderline">SEPARATE</u> CHARACTER<a name="wp1036523"> </a>
          {<u class="cUnderline">TRAILING</u>}<a name="wp1036524"> </a>
<a name="wp1036525"> </a>
<u class="cUnderline">OCCURS</u> table-size TIMES <a name="wp1036526"> </a>
<a name="wp1036527"> </a>
{<u class="cUnderline">JUSTIFIED</u>} RIGHT <a name="wp1036528"> </a>
{<u class="cUnderline">JUST</u>     }<a name="wp1036529"> </a>
<a name="wp1036530"> </a>
<u class="cUnderline">BLANK</u> WHEN <u class="cUnderline">ZERO</u> <a name="wp1036531"> </a>
<a name="wp1036532"> </a>
VALUE IS value-lit <a name="wp1036533"> </a>
<a name="wp1036534"> </a>
{<u class="cUnderline">BLANK</u>} {<u class="cUnderline">SCREEN</u>} <a name="wp1036535"> </a>
<a name="wp1036536"> </a>
{<u class="cUnderline">ERASE</u>} {<u class="cUnderline">LINE</u>  }<a name="wp1036537"> </a>
        {<u class="cUnderline">EOS</u>   }<a name="wp1036538"> </a>
        {<u class="cUnderline">EOL</u>   }<a name="wp1036539"> </a>
<a name="wp1036540"> </a>
<u class="cUnderline">LINE</u> [ NUMBER IS [<u class="cUnderline">PLUS</u>] line-no ]<a name="wp1036541"> </a>
                 [ +  ]<a name="wp1036542"> </a>
                 [ -  ]<a name="wp1036543"> </a>
<a name="wp1036544"> </a>
{<u class="cUnderline">COLUMN</u>  } [ NUMBER IS [<u class="cUnderline">PLUS</u>] col-no ] <a name="wp1036545"> </a>
{<u class="cUnderline">COL</u>     }             [ +  ]<a name="wp1036546"> </a>
{<u class="cUnderline">POSITION</u>}             [ -  ]<a name="wp1036547"> </a>
{<u class="cUnderline">POS</u>     }<a name="wp1036548"> </a>
<a name="wp1036549"> </a>
<u class="cUnderline">SIZE</u> IS length <a name="wp1036550"> </a>
<a name="wp1036551"> </a>
<u class="cUnderline">COLOR</u> IS color-val <a name="wp1036552"> </a>
<u class="cUnderline">COLOUR</u><a name="wp1036553"> </a>
<a name="wp1036554"> </a>
<u class="cUnderline">FOREGROUND-COLOR</u> IS fg-color <a name="wp1036555"> </a>
<u class="cUnderline">FOREGROUND-COLOUR</u><a name="wp1036556"> </a>
<a name="wp1036557"> </a>
<u class="cUnderline">BACKGROUND-COLOR</u> IS bg-color <a name="wp1036558"> </a>
<u class="cUnderline">BACKGROUND-COLOUR</u><a name="wp1036559"> </a>
<a name="wp1036560"> </a>
{<u class="cUnderline">BACKGROUND-HIGH</u>     }<a name="wp1036561"> </a>
{<u class="cUnderline">BACKGROUND-LOW</u>      }<a name="wp1036562"> </a>
{<u class="cUnderline">BACKGROUND-STANDARD</u> }<a name="wp1036563"> </a>
<a name="wp1036564"> </a>
{<u class="cUnderline">BELL</u>} <a name="wp1036565"> </a>
{<u class="cUnderline">BEEP</u>} <a name="wp1036566"> </a>
<a name="wp1036567"> </a>
{<u class="cUnderline">UNDERLINED</u>}<a name="wp1036568"> </a>
{<u class="cUnderline">UNDERLINE</u> }<a name="wp1036569"> </a>
<a name="wp1036570"> </a>
{<u class="cUnderline">HIGHLIGHT</u>}<a name="wp1036571"> </a>
{<u class="cUnderline">HIGH</u>     }<a name="wp1036572"> </a>
{<u class="cUnderline">BOLD</u>     }<a name="wp1036573"> </a>
{<u class="cUnderline">LOWLIGHT</u> }<a name="wp1036574"> </a>
{<u class="cUnderline">LOW</u>      }<a name="wp1036575"> </a>
{<u class="cUnderline">STANDARD</u> }<a name="wp1036576"> </a>
<a name="wp1036577"> </a>
{<u class="cUnderline">BLINKING</u>}<a name="wp1036578"> </a>
{<u class="cUnderline">BLINK</u>   }<a name="wp1036579"> </a>
<a name="wp1036580"> </a>
{<u class="cUnderline">REVERSE-VIDEO</u>}<a name="wp1036581"> </a>
{<u class="cUnderline">REVERSED</u>     }<a name="wp1036582"> </a>
{<u class="cUnderline">REVERSE</u>      }<a name="wp1036583"> </a>
<a name="wp1036584"> </a>
<u class="cUnderline">SAME</u><a name="wp1036585"> </a>
<a name="wp1036586"> </a>
<u class="cUnderline">OUTPUT</u> {<u class="cUnderline">LEFT</u>    }<a name="wp1036587"> </a>
       {<u class="cUnderline">RIGHT</u>   }<a name="wp1036588"> </a>
       {<u class="cUnderline">CENTERED</u>}<a name="wp1036589"> </a>
<a name="wp1036590"> </a>
{<u class="cUnderline">NO-ECHO</u>}<a name="wp1036591"> </a>
{<u class="cUnderline">NO</u> <u class="cUnderline">ECHO</u>}<a name="wp1036592"> </a>
{<u class="cUnderline">SECURE</u> }<a name="wp1036593"> </a>
{<u class="cUnderline">OFF</u>    }<a name="wp1036594"> </a>
<a name="wp1036595"> </a>
<u class="cUnderline">PROMPT</u> [ CHARACTER IS prompt-lit ]<a name="wp1036596"> </a>
<a name="wp1036597"> </a>
{<u class="cUnderline">UPPER</u>}<a name="wp1036598"> </a>
{<u class="cUnderline">LOWER</u>}<a name="wp1036599"> </a>
<a name="wp1036600"> </a>
{<u class="cUnderline">AUTO</u>         }<a name="wp1036601"> </a>
{<u class="cUnderline">AUTO-SKIP</u>    }<a name="wp1036602"> </a>
{<u class="cUnderline">AUTOTERMINATE</u>}<a name="wp1036603"> </a>
{<u class="cUnderline">TAB</u>          }<a name="wp1036604"> </a>
<a name="wp1036605"> </a>
{<u class="cUnderline">REQUIRED</u>   }<a name="wp1036606"> </a>
{<u class="cUnderline">EMPTY-CHECK</u>}<a name="wp1036607"> </a>
<a name="wp1036608"> </a>
{<u class="cUnderline">FULL</u>        }<a name="wp1036609"> </a>
{<u class="cUnderline">LENGTH-CHECK</u>}<a name="wp1036610"> </a>
<a name="wp1036611"> </a>
{<u class="cUnderline">ZERO-FILL</u>   }<a name="wp1036612"> </a>
{<u class="cUnderline">NUMERIC-FILL</u>}<a name="wp1036613"> </a>
<a name="wp1036614"> </a>
<u class="cUnderline">HELP-ID</u> {IS} help-id<a name="wp1036615"> </a>
        {= }<a name="wp1036616"> </a>
<a name="wp1036617"> </a>
<u class="cUnderline">ENABLED</u> {IS} enabled-state<a name="wp1036618"> </a>
        {= }<a name="wp1036619"> </a>
<a name="wp1036620"> </a>
<u class="cUnderline">VISIBLE</u> {IS} visible-state<a name="wp1036621"> </a>
        {= }<a name="wp1036622"> </a>
<a name="wp1036623"> </a>
{<u class="cUnderline">BEFORE</u> } PROCEDURE IS { proc-1 [{<u class="cUnderline">THROUGH</u>} proc-2] }<a name="wp1036624"> </a>
{<u class="cUnderline">AFTER</u>  }                        {<u class="cUnderline">THRU</u>   }<a name="wp1036625"> </a>
<a name="wp1036626"> </a>
{<u class="cUnderline">EXCEPTION</u>}            { <u class="cUnderline">NULL</u>                      }<a name="wp1036627"> </a>
</pre></div>
<a name="wp1036628"> </a><h3 class="pHeadingRef">
Format 2
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
level-number [ screen-name ]<a name="wp1036629"> </a>
             [ FILLER      ]<a name="wp1036630"> </a>
<a name="wp1036631"> </a>
{control-type-name}<a name="wp1036632"> </a>
{<u class="cUnderline">OBJECT</u> control-type}<a name="wp1036633"> </a>
<a name="wp1036634"> </a>
[ title ]<a name="wp1036635"> </a>
</pre></div>
<a name="wp1036636"> </a><p class="pBody">
Remaining phrases are optional, can appear in any order.
</p>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">GRAPHICAL</u><a name="wp1036637"> </a>
<u class="cUnderline">CHARACTER</u><a name="wp1036638"> </a>
<a name="wp1036639"> </a>
{<u class="cUnderline">IDENTIFICATION</u>} {IS} control-id<a name="wp1036640"> </a>
{<u class="cUnderline">ID</u>            } {= }<a name="wp1036641"> </a>
<a name="wp1036642"> </a>
{<u class="cUnderline">PICTURE</u> } IS picture-string<a name="wp1036643"> </a>
{<u class="cUnderline">PIC</u>}<a name="wp1036644"> </a>
<a name="wp1036645"> </a>
{<u class="cUnderline">FROM</u> } [<u class="cUnderline">MULTIPLE</u>] from-item<a name="wp1036646"> </a>
{<u class="cUnderline">VALUE</u>} [<u class="cUnderline">TABLE</u>   ]<a name="wp1036647"> </a>
<a name="wp1036648"> </a>
<u class="cUnderline">TO</u> [<u class="cUnderline">MULTIPLE</u>] to-item<a name="wp1036649"> </a>
<a name="wp1036650"> </a>
{<u class="cUnderline">USING</u>} [<u class="cUnderline">MULTIPLE</u>] using-item<a name="wp1036651"> </a>
{<u class="cUnderline">VALUE</u>} [<u class="cUnderline">TABLE</u>   ]<a name="wp1036652"> </a>
<a name="wp1036653"> </a>
<u class="cUnderline">OCCURS</u> table-size TIMES<a name="wp1036654"> </a>
<a name="wp1036655"> </a>
<u class="cUnderline">LINE</u> [ NUMBER IS [<u class="cUnderline">PLUS</u>] line-no ] [CELL  ]<a name="wp1036656"> </a>
                 [ +  ]           [CELLS ]<a name="wp1036657"> </a>
                 [ -  ]           [PIXEL ]<a name="wp1036658"> </a>
                                  [PIXELS]<a name="wp1036659"> </a>
<a name="wp1036660"> </a>
{<u class="cUnderline">COLUMN</u>  } [ NUMBER IS [<u class="cUnderline">PLUS</u>] col-no ]  [CELL  ]<a name="wp1036661"> </a>
{<u class="cUnderline">COL</u>     }             [ +  ]           [CELLS ]<a name="wp1036662"> </a>
{<u class="cUnderline">POSITION</u>}             [ -  ]           [PIXEL ]<a name="wp1036663"> </a>
{<u class="cUnderline">POS</u>     }                              [PIXELS]<a name="wp1036664"> </a>
<a name="wp1036665"> </a>
<u class="cUnderline">CLINE</u> NUMBER cline-num<a name="wp1036666"> </a>
<a name="wp1036667"> </a>
<u class="cUnderline">CCOL</u> NUMBER ccol-num<a name="wp1036668"> </a>
<a name="wp1036669"> </a>
<u class="cUnderline">SIZE</u>   {IS} length   [<u class="cUnderline">CELL</u>  ]<a name="wp1036670"> </a>
       {= }          [<u class="cUnderline">CELLS </u>]<a name="wp1036671"> </a>
                     [<u class="cUnderline">PIXEL</u> ]<a name="wp1036672"> </a>
                     [<u class="cUnderline">PIXELS</u>]<a name="wp1036673"> </a>
<a name="wp1036674"> </a>
<u class="cUnderline">LINES</u>  {IS} height   [<u class="cUnderline">CELL</u>  ]<a name="wp1036675"> </a>
       {= }          [<u class="cUnderline">CELLS </u>]<a name="wp1036676"> </a>
                     [<u class="cUnderline">PIXEL</u> ]<a name="wp1036677"> </a>
                     [<u class="cUnderline">PIXELS</u>]<a name="wp1036678"> </a>
<a name="wp1036679"> </a>
<u class="cUnderline">CSIZE</u>  {IS} clength  [<u class="cUnderline">CELL</u> ]<a name="wp1036680"> </a>
       {= }          [<u class="cUnderline">CELLS</u>]<a name="wp1036681"> </a>
<a name="wp1036682"> </a>
<u class="cUnderline">CLINES</u> {IS} cheight  [<u class="cUnderline">CELL</u> ]<a name="wp1036683"> </a>
       {= }          [<u class="cUnderline">CELLS</u>]<a name="wp1036684"> </a>
<a name="wp1036685"> </a>
<u class="cUnderline">MAX-HEIGHT</u> {IS} max-height<a name="wp1058710"> </a>
           {= }<a name="wp1058711"> </a>
<a name="wp1058712"> </a>
<u class="cUnderline">MAX-WIDTH</u>  {IS} max-width<a name="wp1058713"> </a>
           {= }<a name="wp1058714"> </a>
<a name="wp1058715"> </a>
<u class="cUnderline">MIN-HEIGHT</u> {IS} min-height<a name="wp1058716"> </a>
           {= }<a name="wp1058717"> </a>
<a name="wp1058718"> </a>
<u class="cUnderline">MIN-WIDTH</u>  {IS} min-width<a name="wp1058719"> </a>
           {= }<a name="wp1058720"> </a>
<a name="wp1058721"> </a>
<u class="cUnderline">TITLE</u> {IS} title<a name="wp1036686"> </a>
      {= }<a name="wp1036687"> </a>
<a name="wp1036688"> </a>
<u class="cUnderline">KEY</u> {IS} key-letter<a name="wp1036689"> </a>
    {= }<a name="wp1036690"> </a>
<a name="wp1036691"> </a>
<u class="cUnderline">STYLE</u> {IS} style<a name="wp1036692"> </a>
      {= }<a name="wp1036693"> </a>
<a name="wp1036694"> </a>
{style-name} ...<a name="wp1036695"> </a>
<a name="wp1036696"> </a>
<u class="cUnderline">FONT</u> {IS} font-handle<a name="wp1036697"> </a>
     {= }<a name="wp1036698"> </a>
<a name="wp1036699"> </a>
{<u class="cUnderline">COLOR</u> } IS color-val<a name="wp1036700"> </a>
{<u class="cUnderline">COLOUR</u>}<a name="wp1036701"> </a>
<a name="wp1036702"> </a>
{<u class="cUnderline">FOREGROUND-COLOR</u> } IS fg-color<a name="wp1036703"> </a>
{<u class="cUnderline">FOREGROUND-COLOUR</u>}<a name="wp1036704"> </a>
<a name="wp1036705"> </a>
{<u class="cUnderline">BACKGROUND-COLOR</u> } IS bg-color<a name="wp1036706"> </a>
{<u class="cUnderline">BACKGROUND-COLOUR</u>}<a name="wp1036707"> </a>
<a name="wp1036708"> </a>
{<u class="cUnderline">BACKGROUND-HIGH</u>     }<a name="wp1036709"> </a>
{<u class="cUnderline">BACKGROUND-LOW</u>      }<a name="wp1036710"> </a>
{<u class="cUnderline">BACKGROUND-STANDARD</u> }<a name="wp1036711"> </a>
<a name="wp1036712"> </a>
{<u class="cUnderline">BELL</u>} <a name="wp1036713"> </a>
{<u class="cUnderline">BEEP</u>} <a name="wp1036714"> </a>
<a name="wp1036715"> </a>
{<u class="cUnderline">HIGHLIGHT</u>}<a name="wp1036716"> </a>
{<u class="cUnderline">HIGH</u>     }<a name="wp1036717"> </a>
{<u class="cUnderline">BOLD</u>     }<a name="wp1036718"> </a>
{<u class="cUnderline">LOWLIGHT</u> }<a name="wp1036719"> </a>
{<u class="cUnderline">LOW</u>      }<a name="wp1036720"> </a>
{<u class="cUnderline">STANDARD</u> }<a name="wp1036721"> </a>
<a name="wp1036722"> </a>
{<u class="cUnderline">REVERSE-VIDEO</u>}<a name="wp1036723"> </a>
{<u class="cUnderline">REVERSED</u>     }<a name="wp1036724"> </a>
{<u class="cUnderline">REVERSE</u>      }<a name="wp1036725"> </a>
<a name="wp1036726"> </a>
{<u class="cUnderline">REQUIRED</u>   }<a name="wp1036727"> </a>
{<u class="cUnderline">EMPTY-CHECK</u>}<a name="wp1036728"> </a>
<a name="wp1036729"> </a>
<u class="cUnderline">LAYOUT-DATA</u> {IS} layout-data<a name="wp1058503"> </a>
            {= }<a name="wp1058504"> </a>
<a name="wp1058505"> </a>
<u class="cUnderline">ENABLED</u> {IS} {enabled-state}<a name="wp1036730"> </a>
        {= }<a name="wp1036731"> </a>
<a name="wp1036732"> </a>
<u class="cUnderline">VISIBLE</u> {IS} {visible-state}<a name="wp1036733"> </a>
        {= }<a name="wp1036734"> </a>
<a name="wp1036735"> </a>
<u class="cUnderline">HELP-ID</u> {IS} help-id<a name="wp1036736"> </a>
        {= }<a name="wp1036737"> </a>
<a name="wp1086338"> </a>
<u class="cUnderline">EVENT-LIST</u>    {IS} ( event-value { event-value ... } )<a name="wp1086324"> </a>
              {= }<a name="wp1086325"> </a>
<a name="wp1086326"> </a>
<u class="cUnderline">AX-EVENT-LIST</u> {IS} ( ax-event-value { ax-event-value ... } )<a name="wp1086327"> </a>
              {= }<a name="wp1086328"> </a>
<a name="wp1086329"> </a>
<u class="cUnderline">EXCLUDE-EVENT-LIST</u> {IS} list-state<a name="wp1086330"> </a>
                   {= }<a name="wp1086331"> </a>
<a name="wp1036738"> </a>
{property-name          } {IS } { property-value            }<a name="wp1036739"> </a>
{<u class="cUnderline">PROPERTY</u> property-type } {ARE} { ( {property-value} ... )  }<a name="wp1036740"> </a>
                          {=  } { {<u class="cUnderline">MULTIPLE</u>} property-table }<a name="wp1036741"> </a>
                                  {<u class="cUnderline">TABLE</u>   }<a name="wp1036742"> </a>
<a name="wp1036743"> </a>
{<u class="cUnderline">BEFORE</u>   } PROCEDURE IS { proc-1 [ {<u class="cUnderline">THROUGH</u>} proc-2 ] }<a name="wp1036744"> </a>
{<u class="cUnderline">AFTER</u>    }                         {<u class="cUnderline">THRU</u>   }<a name="wp1036745"> </a>
{<u class="cUnderline">EXCEPTION</u>}              { <u class="cUnderline">NULL</u>                        }<a name="wp1036746"> </a>
{<u class="cUnderline">EVENT</u>    }<a name="wp1036747"> </a>
</pre></div>
<a name="wp1036748"> </a><h3 class="pHeadingRef">
Format 3
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
level-number [ screen-name ]<a name="wp1086034"> </a>
             [ FILLER      ]<a name="wp1086035"> </a>
<a name="wp1086036"> </a>
{assembly-name}<a name="wp1086037"> </a>
{<u class="cUnderline">OBJECT</u> assembly-name}<a name="wp1086038"> </a>
<a name="wp1086039"> </a>
[ title ]<a name="wp1086040"> </a>
<a name="wp1086041"> </a>
<u class="cUnderline">NAMESPACE</u> { IS } &quot;namespace&quot;<a name="wp1086042"> </a>
<a name="wp1086043"> </a>
<u class="cUnderline">CLASS-NAME</u> { IS } &quot;class-name&quot;<a name="wp1086931"> </a>
</pre></div>
<a name="wp1087102"> </a><p class="pBody">
Remaining phrases are optional.
</p>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">HANDLE</u> { IS } <em class="cEmphasis">handle-1</em><a name="wp1087103"> </a>
<a name="wp1087104"> </a>
<u class="cUnderline">VERSION</u> { IS } &quot;version&quot;<a name="wp1087105"> </a>
<a name="wp1087106"> </a>
<u class="cUnderline">CULTURE</u> { IS } &quot;culture&quot;<a name="wp1087107"> </a>
<a name="wp1087108"> </a>
<u class="cUnderline">STRONG-NAME</u> { IS } &quot;strong-name&quot;<a name="wp1087109"> </a>
<a name="wp1087110"> </a>
<u class="cUnderline">CONSTRUCTOR</u> { IS } CONSTRUCTOR[n] <em class="cEmphasis">parameters</em>...<a name="wp1087111"> </a>
<a name="wp1087112"> </a>
<u class="cUnderline">MODULE</u> { IS } &quot;module&quot;<a name="wp1087113"> </a>
<a name="wp1087114"> </a>
<u class="cUnderline">FILE-PATH</u> { IS } &quot;file-path&quot;<a name="wp1087115"> </a>
<a name="wp1087116"> </a>
AT <u class="cUnderline">LINE</u> NUMBER line-num   [<u class="cUnderline">CELL</u>  ]<a name="wp1087117"> </a>
                          [<u class="cUnderline">CELLS</u> ]<a name="wp1087118"> </a>
                          [<u class="cUnderline">PIXEL</u> ]<a name="wp1087119"> </a>
                          [<u class="cUnderline">PIXELS</u>]<a name="wp1087120"> </a>
<a name="wp1087121"> </a>
AT {<u class="cUnderline">COLUMN</u>  } NUMBER col-num   [<u class="cUnderline">CELL</u>  ]<a name="wp1087122"> </a>
   {<u class="cUnderline">COL</u>     }                  [<u class="cUnderline">CELLS</u> ]<a name="wp1087123"> </a>
   {<u class="cUnderline">POSITION</u>}                  [<u class="cUnderline">PIXEL</u> ]<a name="wp1087124"> </a>
   {<u class="cUnderline">POS</u>     }                  [<u class="cUnderline">PIXELS</u>]<a name="wp1087125"> </a>
<a name="wp1087126"> </a>
<u class="cUnderline">SIZE</u>  {IS} length [<u class="cUnderline">CELL</u>  ]<a name="wp1087127"> </a>
      {= }        [<u class="cUnderline">CELLS</u> ]<a name="wp1087128"> </a>
                  [<u class="cUnderline">PIXEL</u> ]<a name="wp1087129"> </a>
                  [<u class="cUnderline">PIXELS</u>]<a name="wp1087130"> </a>
<a name="wp1087131"> </a>
<u class="cUnderline">LINES</u> {IS} height [<u class="cUnderline">CELL</u>  ]<a name="wp1087132"> </a>
      {= }        [<u class="cUnderline">CELLS</u> ]<a name="wp1087133"> </a>
                  [<u class="cUnderline">PIXEL</u> ]<a name="wp1087134"> </a>
                  [<u class="cUnderline">PIXELS</u>]<a name="wp1087100"> </a>
</pre></div>
<a name="wp1086966"> </a><h3 class="pHeadingRef">
Syntax Rules
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1036750"> </a><div class="pSmartList1"><li>Each screen description entry must start with a <em class="cEmphasis">level-number</em> from 01 through 49. </li></div>
<a name="wp1036751"> </a><div class="pSmartList1"><li>Each level 01 screen description entry must have a <em class="cEmphasis">screen-name</em> specified.  <em class="cEmphasis">Screen-name</em> is a user-defined word.  </li></div>
<a name="wp1036752"> </a><div class="pSmartList1"><li>A <em class="cEmphasis">screen-name</em> may be referenced only in those contexts where it is explicitly allowed. </li></div>
<a name="wp1036753"> </a><div class="pSmartList1"><li>An ACCEPT statement may reference only a <em class="cEmphasis">screen-name</em> that has a TO or USING clause specified for it, or is a group item that contains such a screen entry.  </li></div>
<a name="wp1036754"> </a><div class="pSmartList1"><li><em class="cEmphasis">From-item</em> and <em class="cEmphasis">using-item</em> are data items.</li></div>
<a name="wp1036755"> </a><div class="pSmartList1"><li><em class="cEmphasis">To-item</em> is a literal or a data item.</li></div>
<a name="wp1036756"> </a><div class="pSmartList1"><li><em class="cEmphasis">Table-size</em> is an integer literal.</li></div>
<a name="wp1058732"> </a><div class="pSmartList1"><li><em class="cEmphasis">Fg-color</em>, <em class="cEmphasis">bg-color</em>, <em class="cEmphasis">cline-num</em>, <em class="cEmphasis">ccol-num</em>, <em class="cEmphasis">clength</em>, <em class="cEmphasis">cheight</em>, <em class="cEmphasis">color-val</em>, <em class="cEmphasis">control-id</em>, <em class="cEmphasis">layout-data</em>, e<em class="cEmphasis">nabled-state</em>, <em class="cEmphasis">visible-state</em>, and <em class="cEmphasis">help-id</em> are integer literals or data items.</li></div>
<a name="wp1082510"> </a><div class="pSmartList1"><li><em class="cEmphasis">Max-height</em>, <em class="cEmphasis">max-width</em>, <em class="cEmphasis">min-height</em>, and <em class="cEmphasis">min-width</em> are numeric data items or numeric literals.</li></div>
<a name="wp1058733"> </a><div class="pSmartList1"><li><em class="cEmphasis">Line-no, col-no, length</em>,<em class="cEmphasis"> </em>and<em class="cEmphasis"> height </em>are numeric literals or data items.  In Format 1, these must be integer values.  </li></div>
<a name="wp1036759"> </a><div class="pSmartList1"><li><em class="cEmphasis">Value-lit</em> is a alphanumeric literal or a figurative constant.</li></div>
<a name="wp1036760"> </a><div class="pSmartList1"><li><em class="cEmphasis">Prompt-lit </em>is a single-character alphanumeric literal or the figurative constant SPACE, ZERO, or QUOTE.</li></div>
<a name="wp1036761"> </a><div class="pSmartList1"><li><em class="cEmphasis">Control-type-name</em> is one of the control type reserved words known by the compiler.</li></div>
<a name="wp1036762"> </a><div class="pSmartList1"><li><em class="cEmphasis">Control-type</em> is a numeric literal or data item.  It may not be subscripted or reference modified.  </li></div>
<a name="wp1036763"> </a><div class="pSmartList1"><li><em class="cEmphasis">Title</em> and <em class="cEmphasis">key-letter</em> are alphanumeric literals or data items.</li></div>
<a name="wp1036764"> </a><div class="pSmartList1"><li><em class="cEmphasis">Font-handle</em> is a USAGE HANDLE or HANDLE OF FONT data item that contains a valid font handle.</li></div>
<a name="wp1036765"> </a><div class="pSmartList1"><li><em class="cEmphasis">Style-name</em> is the name of a style associated with the class of control being described.  If the <em class="cEmphasis">control-type-name</em> phrase is omitted, then you may not use the <em class="cEmphasis">style-name</em> phrase.  The STYLE phrase may be used instead.  </li></div>
<a name="wp1036766"> </a><div class="pSmartList1"><li><em class="cEmphasis">Property-name</em> is the name of a property specific to the type of control being referenced.  If the type of control is unknown to the compiler (as in a &quot;DISPLAY OBJECT object-1&quot; statement), then <em class="cEmphasis">property-name</em> may not be used.  You must use the PROPERTY <em class="cEmphasis">property-type</em> option instead.  </li></div>
<a name="wp1036767"> </a><div class="pSmartList1"><li><em class="cEmphasis">Property-type </em>is a numeric literal or data item.  It may not be subscripted or reference modified.  It identifies the property to use.  The numeric values that identify the various control properties can be found in the COPY library &quot;controls.def&quot;. </li></div>
<a name="wp1036768"> </a><div class="pSmartList1"><li><em class="cEmphasis">Property-value</em> is a literal or data item.  Note that the parentheses in the phrase are required.  </li></div>
<a name="wp1036769"> </a><div class="pSmartList1"><li><em class="cEmphasis">Property-table</em> is a data item that appears in a one-dimensional table.  No index should be specified.  </li></div>
<a name="wp1036770"> </a><div class="pSmartList1"><li>In Format 1, if the PICTURE clause is used, then at least one of the FROM, TO, or USING clauses must also be used.  The VALUE clause cannot be used.  In Format 2, if the PICTURE clause is used, then you must specify one of the FROM, TO, USING, or VALUE phrases.  </li></div>
<a name="wp1036771"> </a><div class="pSmartList1"><li>The MULTIPLE option and the PICTURE phrase cannot be used in the same entry.  </li></div>
<a name="wp1036772"> </a><div class="pSmartList1"><li>The JUSTIFIED and BLANK WHEN ZERO clauses may be specified only if the PICTURE clause is also specified.</li></div>
<a name="wp1036773"> </a><div class="pSmartList1"><li>The COLOR clause may not be specified if either the FOREGROUND-COLOR or BACKGROUND-COLOR clause is specified.</li></div>
<a name="wp1036774"> </a><div class="pSmartList1"><li>You may not use either the FROM or TO phrase if you use the USING phrase.</li></div>
<a name="wp1036775"> </a><div class="pSmartList1"><li>In a Format 1 entry, if the VALUE phrase is used, then its meaning depends on the following data element.  If it is a literal, then VALUE is synonymous with FROM.  Otherwise, it is synonymous with USING.  </li></div>
<a name="wp1036776"> </a><div class="pSmartList1"><li>If you use the MULTIPLE option of either the FROM, TO, or USING phrase, the following data element must contain an OCCURS clause or be subordinate to an OCCURS clause.  The corresponding table must be one-dimensional.  The data element should not be subscripted.</li></div>
<a name="wp1036777"> </a><div class="pSmartList1"><li>The following items may reference a table containing the appropriate type of data items, providing its entry is subordinate to an OCCURS clause: COLOR, HELP-ID, VISIBLE, ENABLED, ID, STYLE, FONT, TITLE, LINE, COL, SIZE, LINES, CCOL, CLINE, CSIZE, CLINES, KEY, and PROPERTY.  See the description of the <a  href="gt3554.htm#wp1036927">OCCURS Clause</a>.  </li></div>
<a name="wp1036778"> </a><div class="pSmartList1"><li>In Format 1, HELP-ID, VISIBLE, and ENABLED may be specified only for group items.  The effect is to apply the phrase to each control contained in the group.  You can override the setting for a particular control or sub-group by specifying another HELP-ID, VISIBLE, or ENABLED phrase.  These phrases have no effect on screen items that are not controls.  </li></div>
<a name="wp1086372"> </a><div class="pSmartList1"><li><em class="cEmphasis">Event-value</em> and <em class="cEmphasis">ax-event-value</em> are numeric literals or data items that identify an event type.  List elements must be enclosed by parentheses. Elements must be separated by a space.  If the list contains a single element, the parentheses can be omitted.</li></div>
<a name="wp1086373"> </a><div class="pSmartList1"><li><em class="cEmphasis">List-state</em> is an integer literal or numeric data item.  Valid values are &quot;0&quot; and &quot;1&quot;.</li></div>
<a name="wp1086484"> </a><div class="pSmartList1"><li><em class="cEmphasis">Assembly-name</em> is the name of a .NET assembly defined in a COPY file created by NETDEFGEN.  This must be the DLL name of a graphical control, not an executable file.  Graphical controls are generated by Visual Studio when a developer selects a &quot;Windows Control Library&quot; project type.</li></div>
<a name="wp1086485"> </a><div class="pSmartList1"><li><span style="font-family: Arial, Verdana, Helvetica, sans-serif; font-style: italic">Handle-1</span> is a USAGE HANDLE or PIC X(10) data item. </li></div>
<a name="wp1086486"> </a><div class="pSmartList1"><li>A value surrounded by quotation marks is an alphanumeric literal and is case-sensitive.  Literal values for assembly parameters are located in the COPY file generated by NETDEFGEN.  The same COPY file must be included in the SPECIAL-NAMES paragraph of your program.</li></div>
<a name="wp1036779"> </a><div class="pSmartList1"><li>The optional phrases may be specified in any order.</li></div>
<a name="wp1036780"> </a><div class="pSmartList1"><li>CELL(S) and PIXEL(S) are mutually exclusive for the same phrase.</li></div>
<a name="wp1036781"> </a><div class="pSmartList1"><li>In Format 2, the PLUS phrase requires PIXEL(S) to follow if the preceding LINE Number or COLUMN Number also used PIXEL(S).</li></div>
<a name="wp1036782"> </a><div class="pSmartList1"><li>You may mix PIXEL and conventional coordinates/sizing in the same statement, as shown here:</li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
DISPLAY push-button AT 00100200 PIXELS<a name="wp1036783"> </a>
         LINES 50 PIXELS<a name="wp1036784"> </a>
         SIZE 5.<a name="wp1036785"> </a>
</pre></div>
<a name="wp1036786"> </a><div class="pSmartList1"><li>CELL and CELLS are equivalent.</li></div>
<a name="wp1036787"> </a><div class="pSmartList1"><li>PIXEL and PIXELS are equivalent.  </li></div>
<a name="wp1036788"> </a><div class="pSmartList1"><li>IS and &quot;=&quot; are synonymous.</li></div>
<a name="wp1036789"> </a><p class="pNoteList">
<hr />
<b>Note:  </b>Because the Screen Section is not part of ANSI-standard COBOL, there is substantial variation in the syntax supported by various COBOL vendors.  ACUCOBOL-GT supports a superset of most other Screen Section implementations.  This situation results in a large number of reserved words with the same meaning.  These synonyms are detailed in each of the following rules.  We recommend that you restrict yourself to one of the synonyms for each option in order to improve your program's clarity.
<hr />
</p>
<a name="wp1036790"> </a><div class="pSmartList1"><li>AUTO, AUTO-SKIP, and AUTOTERMINATE are equivalent.</li></div>
<a name="wp1036791"> </a><div class="pSmartList1"><li>NO-ECHO, NO ECHO, OFF, and SECURE are equivalent.</li></div>
<a name="wp1036792"> </a><div class="pSmartList1"><li>PIC is an abbreviation for PICTURE.</li></div>
<a name="wp1036793"> </a><div class="pSmartList1"><li>JUST is an abbreviation for JUSTIFIED.</li></div>
<a name="wp1036794"> </a><div class="pSmartList1"><li>BLANK and ERASE are equivalent.</li></div>
<a name="wp1036795"> </a><div class="pSmartList1"><li>COLUMN, COL, POSITION, and POS are equivalent.  </li></div>
<a name="wp1036796"> </a><div class="pSmartList1"><li>BELL and BEEP are equivalent.</li></div>
<a name="wp1036797"> </a><div class="pSmartList1"><li>UNDERLINE and UNDERLINED are equivalent.</li></div>
<a name="wp1036798"> </a><div class="pSmartList1"><li>HIGHLIGHT, HIGH, and BOLD are equivalent.</li></div>
<a name="wp1036799"> </a><div class="pSmartList1"><li>LOWLIGHT and LOW are equivalent.</li></div>
<a name="wp1036800"> </a><div class="pSmartList1"><li>BLINK and BLINKING are equivalent.</li></div>
<a name="wp1036801"> </a><div class="pSmartList1"><li>REVERSE-VIDEO, REVERSE, and REVERSED are equivalent.</li></div>
<a name="wp1036802"> </a><div class="pSmartList1"><li>REQUIRED and EMPTY-CHECK are equivalent.</li></div>
<a name="wp1036803"> </a><div class="pSmartList1"><li>FULL and LENGTH-CHECK are equivalent.</li></div>
<a name="wp1036804"> </a><div class="pSmartList1"><li>MULTIPLE and TABLE are equivalent.</li></div>
</ol></div>
<a name="wp1036805"> </a><h3 class="pHeadingRef">
General Rules
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1036806"> </a><div class="pSmartList1"><li>When a <em class="cEmphasis">screen-name</em> is referenced by an ACCEPT or DISPLAY statement, that screen entry and all subordinate screen entries are acted upon at once.  This allows you to accept or display many fields with one statement. </li></div>
<a name="wp1036808"> </a><div class="pSmartList1"><li>The word NULL in the PROCEDURE phrase indicates that there is no procedure.  It has the same effect as omitting the PROCEDURE phrase altogether and is essentially commentary. </li></div>
<a name="wp1036810"> </a><div class="pSmartList1"><li>Screen Section entries may include the labels &quot;GRAPHICAL&quot; and &quot;CHARACTER&quot;.  These markings have the effect of restricting the display of the elements nested within them.  The elements contained in a GRAPHICAL Screen Section entry are displayed only when the program is run on a graphical system.  The contents of a CHARACTER Screen Section entry are displayed only when the program is run on a character-based system.  When the program attempts to execute a marked entry on a system of the opposite type, that entry is ignored. </li></div>
<a name="wp1036812"> </a><p class="pIndented1">
The purpose of these phrases is to better allow you to develop and support two distinct user interfaces in one program; a user interface for graphical systems, and a user interface for character-based systems.  The GRAPHICAL and CHARACTER labels allow you to place and maintain all of the screen definition code in one place (the Screen Section), while also allowing you to customize the look and function of the user interface for these two classes of systems.  For many developers, this approach is easier and produces more satisfying results than attempting to develop a single, <em class="cEmphasis">generic</em> user interface that works well on both types of systems. 
</p>
<a name="wp1036814"> </a><p class="pIndented1">
The following code provides an example of this approach.  Suppose you want a label that describes a set of function keys to be displayed along the bottom of the screen.  However, when you run the program on a graphical system you want to display push buttons instead.  
</p>
<a name="wp1036815"> </a><p class="pIndented1">
A Screen Section entry to do this might look like:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
01  function-key-screen.<a name="wp1036816"> </a>
    03  line 24.<a name="wp1036817"> </a>
    03  character.<a name="wp1036818"> </a>
        05  &quot;F1 = Exit, F2 = Lookup, F3 = Help&quot;.<a name="wp1036819"> </a>
    03  graphical.<a name="wp1036820"> </a>
        05  push-button, &quot;E&amp;xit&quot;, self-act,<a name="wp1036821"> </a>
            exception-value = 1, <a name="wp1036822"> </a>
            column 3.<a name="wp1036823"> </a>
        05  push-button, &quot;&amp;Lookup&quot;, self-act,<a name="wp1036824"> </a>
            exception-value = 2,<a name="wp1036825"> </a>
            column + 3.<a name="wp1036826"> </a>
        05  push-button, &quot;&amp;Help&quot;, self-act,<a name="wp1036827"> </a>
            exception-value = 3,<a name="wp1036828"> </a>
            column + 3.<a name="wp1036829"> </a>
</pre></div>
<a name="wp1036830"> </a><p class="pIndented1">
When the program executes a &quot;DISPLAY FUNCTION-KEY-SCREEN&quot; statement, it displays the line of text on character-based systems, or the set of push buttons on a graphical system.  
</p>
<a name="wp1036831"> </a><p class="pNoteList">
<hr />
<b>Note:  </b>The use of these labels also allows you to create two screen description entries with the same name.  In statements where a Screen Section name is allowed, you may now reference an ambiguous (duplicate) Screen Section name.  When you do so, the name must resolve to exactly two Screen Section items, one having the CHARACTER attribute and the other having the GRAPHICAL attribute.  The compiler constructs conditional code for these cases.  The Screen Section item with the CHARACTER attribute is used when the program runs on a character-based system; the GRAPHICAL item is used on graphical host systems.  One use for this feature is to keep a program's original screen layouts for use on character systems while creating all new screens for graphical systems.  By giving the screens the same name, you can keep the existing processing logic unchanged.  
<hr />
</p>
</ol></div>
<a name="wp1036832"> </a><h3 class="pHeadingRef">
Format 1
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1036833"> </a><div class="pSmartList1"><li>A Format 1 statement describes any of three types of screen description entries:</li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1036834"> </a><div class="pSmartList2"><li>If a VALUE clause is specified, the screen entry is a display literal.</li></div>
<a name="wp1036835"> </a><div class="pSmartList2"><li>If a PICTURE, TO, FROM, or USING clause is specified, then the screen entry is a data field.</li></div>
<a name="wp1036836"> </a><div class="pSmartList2"><li>If VALUE, PICTURE, TO, FROM, or USING is not specified, then the screen entry is a group item.</li></div>
</ol></div>
<a name="wp1036837"> </a><div class="pSmartList1"><li>A LINE, COLUMN, BLANK, or BELL clause specified for a group item is acted upon immediately when that group item is accessed by an ACCEPT or DISPLAY statement.  All other clauses specified for a group item are applied to each screen entry subordinate to that group item.  </li></div>
<a name="wp1036838"> </a><div class="pSmartList1"><li>If the same clause is specified more than once for a particular screen entry, the clause specified at the lowest level within the hierarchy is the one which takes effect.</li></div>
<a name="wp1036839"> </a><div class="pSmartList1"><li>The <em class="cEmphasis">level-number</em>, <em class="cEmphasis">screen-name</em>, USAGE, SIGN, JUSTIFIED, and BLANK WHEN ZERO clauses follow the rules for data items appearing in Working Storage.  These rules appear in <a  href="gt3534.htm#wp1035089">section 5.7.1, &quot;Data Description Entry.&quot;</a></li></div>
<a name="wp1036840"> </a><div class="pSmartList1"><li>The PICTURE, OCCURS, and VALUE clauses have meanings similar to those clauses in Working Storage, but have some additional properties when used in the Screen Section.  These clauses, along with the LINE and COLUMN clauses, are detailed in separate sections below.</li></div>
<a name="wp1036841"> </a><div class="pSmartList1"><li>The HELP-ID, VISIBLE, and ENABLED phrases may be specified only for group items.  The effect is to apply the phrase to each control contained in the group.  You can override the setting for a particular control or sub-group by specifying another HELP-ID, VISIBLE, or ENABLED phrase.  These phrases do not affect screen items that are not controls.  </li></div>
<a name="wp1036842"> </a><div class="pSmartList1"><li>All other clauses are described in detail in <a  href="gt3630.htm#wp1034866">section 6.4.9, &quot;Common Screen Options.&quot;</a></li></div>
</ol></div>
<a name="wp1036843"> </a><h3 class="pHeadingRef">
Format 2 (SCREEN CONTROLS)
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1036844"> </a><div class="pSmartList1"><li>A Format 2 Screen Section entry defines a screen control.  </li></div>
<a name="wp1036845"> </a><div class="pSmartList1"><li><em class="cEmphasis">Control-type-name</em> identifies the type of the control (the exact set of controls and their types is discussed in Chapter 5 of Book 2, <em class="cEmphasis">User Interface Programming</em>).  Use the OBJECT <em class="cEmphasis">control-type</em> phrase when the type of the control is not known at compile time.  <em class="cEmphasis">Control-type</em> must contain the identifying number of a control type known to the system.  If it does not correspond to any control type, the Screen Section entry is ignored.  The identifying number of each control type is defined in the &quot;controls.def&quot; file. </li></div>
<a name="wp1036848"> </a><div class="pSmartList1"><li>When you DISPLAY a Screen Section control, the following steps are performed:</li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1036849"> </a><div class="pSmartList2"><li>If this is the first DISPLAY of this control, the runtime builds a new control of the specified type.</li></div>
<a name="wp1036850"> </a><div class="pSmartList2"><li>The various properties specified by the Screen Section control phrases are set.  Unspecified properties are then assigned default values when the control is initially created.  Properties are assigned in the order listed in the Screen Section, except that the VALUE property is always assigned last.  </li></div>
<a name="wp1036851"> </a><div class="pSmartList2"><li>The control is displayed or updated on the screen.</li></div>
<a name="wp1036852"> </a><div class="pSmartList2"><li>The cursor is positioned after the control.  </li></div>
</ol></div>
<a name="wp1036853"> </a><div class="pSmartList1"><li>When you ACCEPT a Screen Section control, that control receives the input focus, and the runtime system processes user actions until the user terminates the ACCEPT according to the rules for the ACCEPT verb.  </li></div>
<a name="wp1036854"> </a><div class="pSmartList1"><li>When you DISPLAY a Screen Section group item, each subsidiary Screen Section entry is displayed.  This can be a mix of textual fields and graphical controls.  When you ACCEPT a Screen Section group item, the cursor (or input focus) is placed according to the rules for the ACCEPT verb, and the runtime proceeds to accept data from the user for each field or control.  The runtime automatically handles cursor movements between the fields and controls.  </li></div>
<a name="wp1036855"> </a><div class="pSmartList1"><li>Screen Section controls are assigned <em class="cEmphasis">field numbers</em> in the same way as Format 1 Screen Section entries.  If the control is <em class="cEmphasis">activatable</em> (the user can interact with the control), it is given a field number.  Controls that cannot take user input (<em class="cEmphasis">e.g.,</em> LABEL controls) are not given field numbers.  Field numbers are assigned sequentially, starting with &quot;1&quot;, for each appropriate Format 1 or Format 2 Screen Section entry subordinate to a given 01-level group item.  For Screen Section controls that omit the ID phrase, but have an implied field number, the corresponding control is given that field number as its ID.  Note that the field number is not assigned until the control is created.</li></div>
<a name="wp1036858"> </a><div class="pSmartList1"><li>If you specify a PICTURE, the memory for that picture is allocated in the Screen Section entry.  Each DISPLAY of that entry moves the data in the FROM or USING data item to itself using the standard MOVE rules.  That entry is then used as the value of the control.  Each ACCEPT of that entry stores the control's value in the Screen Section entry and then moves the entry into the TO or USING data item in accordance with the standard MOVE rules.  If you omit the PICTURE phrase, the control's value is retrieved directly from the FROM or USING item and stored directly in the TO or USING item.  Note that specifying a PICTURE allocates additional memory.  As a result, it is preferable to specify a PICTURE only in cases where you need to reformat the data (<em class="cEmphasis">e.g.,</em> by specifying a numeric-edited PICTURE).</li></div>
<a name="wp1036859"> </a><div class="pSmartList1"><li>The MULTIPLE phrase in the FROM, TO, or USING clause indicates that you want the control's value to be mapped to the corresponding data item on a line-by-line basis.  Each line of data in the control corresponds to one element in the data table.  This should be used only with controls that have the concept of multiple lines of data (<em class="cEmphasis">e.g.,</em> an ENTRY-FIELD that contains multiple lines of text).  For example, the following Working-Storage and Screen Section definitions would construct a five-line entry field on the screen, and place each line of input into a separate data item in the Working-Storage table:</li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
WORKING-STORAGE SECTION.<a name="wp1036860"> </a>
01  ENTRY-LINES OCCURS 5 TIMES  PIC X(30).<a name="wp1036861"> </a>
<a name="wp1036862"> </a>
SCREEN SECTION.<a name="wp1036863"> </a>
01  ENTRY-FIELD, USING MULTIPLE ENTRY-LINES,<a name="wp1036864"> </a>
          LINES 5, SIZE 30.<a name="wp1036865"> </a>
</pre></div>
<a name="wp1036866"> </a><div class="pSmartList1"><li>If you specify a FROM or USING item, and you do not specify a <em class="cEmphasis">title</em>, the runtime will substitute the <em class="cEmphasis">from-item</em> or <em class="cEmphasis">using-item</em> for the <em class="cEmphasis">title</em> if the corresponding control type does not take a value (<em class="cEmphasis">i.e.,</em> is a LABEL, PUSH-BUTTON, or FRAME).  This allows you to associate a PICTURE with a LABEL control.  Because the picture formats the value of the control, and because a LABEL does not take a value, this rule allows the <em class="cEmphasis">picture-string</em> to set the value of the label's title.</li></div>
<a name="wp1036867"> </a><div class="pSmartList1"><li>The REQUIRED phrase is meaningful only for controls that take alphanumeric input (<em class="cEmphasis">e.g.,</em> entry fields).  When specified, it forces the user to enter non-space data into the control before the ACCEPT will terminate.  The user can also terminate the ACCEPT by generating an exception.  See <a  href="gt3630.htm#wp1034866">section 6.4.9</a> for more information about the REQUIRED phrase.</li></div>
<a name="wp1036868"> </a><div class="pSmartList1"><li>The EVENT option of the PROCEDURE phrase establishes an <em class="cEmphasis">event procedure</em> for the control.  Event procedures are different from the other Screen Section embedded procedures in that an event procedure becomes part of the control when it is created, and is executed directly by the control (the BEFORE, AFTER, and EXCEPTION procedures execute as part of the flow of control of the Screen Section).  An event procedure can potentially execute any time after its owning control has been created, even when the defining Screen Section item is not being ACCEPTed. For more about event procedures, see <a  href="gt3557.htm#wp1037068">section 5.9.6</a>.  </li></div>
<a name="wp1036869"> </a><div class="pSmartList1"><li>All phrases not described here or in <a  href="gt3630.htm#wp1034866">section 6.4.9, &quot;Common Screen Options&quot;</a> are treated in the same manner as in a Format 1 Screen Section entry.  </li></div>
</ol></div>
<a name="wp1036870"> </a><h3 class="pHeadingRef">
Format 2 Screen Section example:
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
SCREEN SECTION.<a name="wp1036871"> </a>
<a name="wp1036872"> </a>
01  SEARCH-SCREEN.<a name="wp1036873"> </a>
    03  LABEL &quot;Search for&quot;, LINE 1, COL 5.<a name="wp1036874"> </a>
    03  ENTRY-BOX USING SEARCH-TEXT, COL + 1,<a name="wp1036875"> </a>
           SIZE 30.<a name="wp1036876"> </a>
    03  PUSH-BUTTON, TITLE &quot;Ok&quot;, LINE 3, COL 10,<a name="wp1036877"> </a>
           DEFAULT-BUTTON, TERMINATION-CODE IS 13.<a name="wp1036878"> </a>
    03  PUSH-BUTTON, TITLE &quot;Cancel&quot;, COL 25,<a name="wp1036879"> </a>
           CANCEL-BUTTON, EXCEPTION-CODE IS 27.<a name="wp1036880"> </a>
</pre></div>
<a name="wp1086169"> </a><h3 class="pHeadingRef">
Format 3 (.NET ASSEMBLIES)
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1086170"> </a><div class="pSmartList1"><li>A Format 3 Screen Section entry defines a graphical .NET assembly.</li></div>
<a name="wp1086272"> </a><div class="pSmartList1"><li>Literal values for assembly parameters are located in the COPY file generated by the NETDEFGEN utility.  The same COPY file must be included in the SPECIAL-NAMES paragraph of your program.</li></div>
<a name="wp1086173"> </a><div class="pSmartList1"><li>Graphical assemblies show the keyword &quot;VISUAL&quot; in the COPY file after the CLASS keyword.  If the word &quot;VISUAL&quot; does not appear, use the CREATE statement to instantiate the assembly.  A Format 3 Screen Section is for graphical .NET assemblies only.</li></div>
<a name="wp1086174"> </a><div class="pSmartList1"><li><em class="cEmphasis">Assembly-name</em> is the name of a .NET assembly defined in the NETDEFGEN COPY file. This must be the DLL name of a graphical control, not an executable file.  Graphical controls are generated by Visual Studio when a developer selects a &quot;Windows Control Library&quot; project type.</li></div>
<a name="wp1086175"> </a><div class="pSmartList1"><li><em class="cEmphasis">Namespace</em> is a NameSpace in the assembly, as it appears in the COPY file.</li></div>
<a name="wp1086176"> </a><div class="pSmartList1"><li><em class="cEmphasis">Class-name</em> is a class in the NameSpace.</li></div>
<a name="wp1086177"> </a><div class="pSmartList1"><li><span style="font-family: Arial, Verdana, Helvetica, sans-serif; font-style: italic">Handle-1</span> receives a handle to the assembly when it is created. </li></div>
<a name="wp1086178"> </a><div class="pSmartList1"><li>Version<span style="font-family: Arial, Verdana, Helvetica, sans-serif; font-style: normal"> is the version number of the assembly.</span></li></div>
<a name="wp1086179"> </a><div class="pSmartList1"><li><span style="font-family: Arial, Verdana, Helvetica, sans-serif; font-style: italic">Culture</span> is cultural information related to the assembly.</li></div>
<a name="wp1086180"> </a><div class="pSmartList1"><li><span style="font-family: Arial, Verdana, Helvetica, sans-serif; font-style: italic">Strong-name</span> is the cryptographic key required to access the assembly, if any.  If the assembly requires such a key, as all assemblies in the Global Assembly Cache (GAC) do, it is shown in the COPY file under the keyword STRONG.</li></div>
<a name="wp1086181"> </a><div class="pSmartList1"><li>All classes that result in an object have a CONSTRUCTOR, which is a unique method.  If you see a CONSTRUCTOR identifier in the COPY file without a parameter list, then the field may be omitted from your COBOL program.  If all listed CONSTRUCTORs have parameters, then you must choose which CONSTRUCTOR and parameters to use.  <em class="cEmphasis">Constructor</em>(n) is the constructor that you want to use followed by its parameter data.  </li></div>
<a name="wp1086182"> </a><div class="pSmartList1"><li><em class="cEmphasis">Module</em> identifies a file where a combination of NameSpaces and Classes  resides.  It is used when the assembly is constructed of other assemblies.</li></div>
<a name="wp1086183"> </a><div class="pSmartList1"><li><em class="cEmphasis">File-path</em> is the path of an XML file, and that XML file contains the path where the .NET assembly is located.  Use FILE-PATH when the assembly that you want to access does not reside in the GAC or in the same directory as &quot;wrun32.exe&quot;. Assemblies that reside in the GAC will have the STRONG keyword in the NETDEFGEN COPY file.</li></div>
<a name="wp1086184"> </a><div class="pSmartList1"><li>LINES and SIZE default to the design control height and width.</li></div>
</ol></div>
<a name="wp1086185"> </a><h3 class="pHeadingRef">
Format 3 Screen Section example:
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
SCREEN SECTION.<a name="wp1086186"> </a>
01  screen-1.<a name="wp1086187"> </a>
    03  SOME-NETCONTROL, &quot;@My.Assembly&quot;,<a name="wp1086188"> </a>
        LINE 1, COL 2,<a name="wp1086189"> </a>
NAMESPACE IS &quot;My.Test.Namespace&quot;,<a name="wp1086190"> </a>
CLASS-NAME IS &quot;UserControl1&quot;,<a name="wp1086191"> </a>
      CONSTRUCTOR IS CONSTRUCTOR2(PARM1, PARM2, PARM3, 
      PARM4, PARM5, PARM6, PARM7),<a name="wp1086192"> </a>
EVENT PROCEDURE IS USERCONTROL-EVENTS.<a name="wp1086193"> </a>
</pre></div>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
