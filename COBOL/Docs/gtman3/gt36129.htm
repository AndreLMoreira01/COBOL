<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.5.1025" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/14/06 08:28:08" />
  <title>READ Statement</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       ACUCOBOL-GT Reference Manual <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="gt36.htm"><br />Chapter 6:  Procedure Division</a> &gt; <a href="gt3678.htm">6.6  Procedure Division Statements </a> &gt; </p>
<a name="wp1041053"> </a><h2 class="pHeading2">
READ Statement
</h2>
<a name="wp1041055"> </a><p class="pBody">
The READ statement makes records available to the program from the program's data files.
</p>
<a name="wp1041057"> </a><h3 class="pHeadingRef">
General Format
</h3>
<a name="wp1041058"> </a><h3 class="pHeadingRef">
Format 1
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">READ</u> file-name  [<u class="cUnderline">NEXT</u>    ] RECORD <a name="wp1041059"> </a>
                [<u class="cUnderline">PREVIOUS</u>]<a name="wp1041060"> </a>
                [<u class="cUnderline">BACKWARD</u>]<a name="wp1041061"> </a>
<a name="wp1041062"> </a>
          [ WITH [<u class="cUnderline">NO</u>  ] <u class="cUnderline">LOCK</u> ]<a name="wp1041063"> </a>
                 [<u class="cUnderline">KEPT</u>]<a name="wp1041064"> </a>
<a name="wp1041065"> </a>
          [ <u class="cUnderline">INTO</u> dest ]<a name="wp1041066"> </a>
<a name="wp1041067"> </a>
          [ <u class="cUnderline">ALLOWING</u> <u class="cUnderline">UPDATERS</u> ]<a name="wp1041068"> </a>
<a name="wp1041069"> </a>
          [ AT <u class="cUnderline">END</u> statement-1 ]<a name="wp1041070"> </a>
<a name="wp1041071"> </a>
          [ <u class="cUnderline">NOT</u> AT <u class="cUnderline">END</u> statement-2 ]<a name="wp1041072"> </a>
<a name="wp1041073"> </a>
          [ <u class="cUnderline">END-READ</u> ]<a name="wp1041074"> </a>
</pre></div>
<a name="wp1041075"> </a><h3 class="pHeadingRef">
Format 2
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">READ</u> file-name RECORD <a name="wp1041076"> </a>
<a name="wp1041077"> </a>
     [ WITH [<u class="cUnderline">NO</u>  ] <u class="cUnderline">LOCK</u> ]<a name="wp1041078"> </a>
            [<u class="cUnderline">KEPT</u>]<a name="wp1041079"> </a>
<a name="wp1041080"> </a>
     [ <u class="cUnderline">INTO</u> dest ]<a name="wp1041081"> </a>
<a name="wp1041082"> </a>
     [ <u class="cUnderline">ALLOWING</u> <u class="cUnderline">UPDATERS</u> ]<a name="wp1041083"> </a>
<a name="wp1041084"> </a>
     [ <u class="cUnderline">KEY</u> IS key-name ]<a name="wp1041085"> </a>
<a name="wp1041086"> </a>
     [ <u class="cUnderline">INVALID</u> KEY statement-1 ]<a name="wp1041087"> </a>
<a name="wp1041088"> </a>
     [ <u class="cUnderline">NOT</u> <u class="cUnderline">INVALID</u> KEY statement-2 ]<a name="wp1041089"> </a>
<a name="wp1041090"> </a>
     [ <u class="cUnderline">END-READ</u> ]<a name="wp1041091"> </a>
</pre></div>
<a name="wp1041093"> </a><h3 class="pHeadingRef">
Syntax Rules
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1041094"> </a><div class="pSmartList1"><li><em class="cEmphasis">File-name</em> is the name of a file described in the Data Division.  It may not be a sort file.  </li></div>
<a name="wp1041095"> </a><div class="pSmartList1"><li><em class="cEmphasis">Dest</em> is a data item.</li></div>
<a name="wp1041096"> </a><div class="pSmartList1"><li><em class="cEmphasis">Key-name</em> is the name of a data item specified as a record key for <em class="cEmphasis">file-name</em>.  </li></div>
<a name="wp1041097"> </a><div class="pSmartList1"><li><em class="cEmphasis">Statement-1</em> and <em class="cEmphasis">statement-2</em> are imperative statements.</li></div>
<a name="wp1041098"> </a><div class="pSmartList1"><li>Format 1 must be used for sequential access files.  </li></div>
<a name="wp1041099"> </a><div class="pSmartList1"><li>The KEY phrase can be used only for indexed files.</li></div>
<a name="wp1041100"> </a><div class="pSmartList1"><li><em class="cEmphasis">Dest </em>may not occupy any of the storage area used by the record area of <em class="cEmphasis">file-name</em>.  </li></div>
<a name="wp1041101"> </a><div class="pSmartList1"><li>BACKWARD and PREVIOUS are equivalent.</li></div>
<a name="wp1041102"> </a><div class="pSmartList1"><li>The NEXT or PREVIOUS phrase must be specified for a Format 1 READ for dynamic access mode files.  </li></div>
<a name="wp1041103"> </a><div class="pSmartList1"><li>The PREVIOUS phrase may not be specified for a sequential organization file.  </li></div>
<a name="wp1041104"> </a><div class="pSmartList1"><li>The word KEPT is treated as commentary.</li></div>
<a name="wp1041105"> </a><div class="pSmartList1"><li>The LOCK, INTO and ALLOWING phrases may appear in any order.</li></div>
</ol></div>
<a name="wp1041107"> </a><h3 class="pHeadingRef">
General Rules
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1041108"> </a><div class="pSmartList1"><li>The file referenced by a READ statement must be open in the INPUT or I-O mode when the statement executes.</li></div>
<a name="wp1041109"> </a><div class="pSmartList1"><li>For sequential access mode files, if neither NEXT nor PREVIOUS is used, NEXT is implied.  </li></div>
<a name="wp1041110"> </a><div class="pSmartList1"><li>A successful READ statement causes the file's record area to be filled with the record retrieved from the file.  </li></div>
<a name="wp1041111"> </a><div class="pSmartList1"><li>If the record read is smaller than the record area, the excess characters are left unmodified unless the file has automatic trailing space removal specified.  In this case, the record is padded with spaces.   </li></div>
<a name="wp1041113"> </a><div class="pSmartList1"><li>The READ statement updates the value of the associated FILE STATUS variable.</li></div>
<a name="wp1041115"> </a><div class="pSmartList1"><li>A successful Format 1 READ statement retrieves a record from the file according to the following rules: </li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1041116"> </a><div class="pSmartList2"><li>The last OPEN, READ, or START verb used for the file determines which record is retrieved.  Other file operations do not affect which record is retrieved.  </li></div>
<a name="wp1041117"> </a><div class="pSmartList2"><li>If an OPEN verb was the last verb to affect the file position, then the first record is retrieved if the NEXT phrase is used (or implied).  If the PREVIOUS phrase is used, an end-of-file condition occurs.</li></div>
<a name="wp1041118"> </a><div class="pSmartList2"><li>If the last verb to affect the file position was a successful START statement, then the record selected by that START statement is returned, regardless of whether the NEXT or PREVIOUS phrase was used.  </li></div>
<a name="wp1041119"> </a><div class="pSmartList2"><li>If the last verb to affect the file position was a successful READ statement, then the following or the preceding record is retrieved, depending on the NEXT or PREVIOUS phrase used.  </li></div>
<a name="wp1041120"> </a><div class="pSmartList2"><li>For sequential and relative files, the record ordering is based on the physical ordering of the records in the file (relative files are physically ordered by ascending record numbers).</li></div>
<a name="wp1041121"> </a><div class="pSmartList2"><li>For indexed files, the record ordering is based on the logical ordering of the current Key of Reference.  The Key of Reference is set by the last successful OPEN, READ, or START statement executed for the file.  </li></div>
</ol></div>
<a name="wp1041122"> </a><div class="pSmartList1"><li>When a Format 1 READ statement executes, the preceding rule may indicate that no next logical record exists.  When this happens, the following occurs:</li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1041123"> </a><div class="pSmartList2"><li>The at-end condition is set and the appropriate FILE STATUS is set.</li></div>
<a name="wp1041124"> </a><div class="pSmartList2"><li>If the AT END phrase is specified, <em class="cEmphasis">statement-1</em> executes.  Control does not proceed to a USE AFTER EXCEPTION statement.</li></div>
<a name="wp1041125"> </a><div class="pSmartList2"><li>If no AT END phrase is specified, but an appropriate USE AFTER EXCEPTION procedure exists, that procedure is executed with an implied return to the end of the READ statement.</li></div>
<a name="wp1041126"> </a><div class="pSmartList2"><li>If neither case (b) nor (c) applies, then an error message is printed and the program halts.</li></div>
</ol></div>
<a name="wp1041127"> </a><div class="pSmartList1"><li>If the at-end condition does not occur, and no other exception causes the USE AFTER EXCEPTION procedure to execute, the NOT AT END phrase (if any) is used and <em class="cEmphasis">statement-2</em> is executed.  </li></div>
<a name="wp1041128"> </a><div class="pSmartList1"><li>For a relative file, a Format 1 READ updates the contents of the file's RELATIVE KEY data item to reflect the record number of the returned record.</li></div>
<a name="wp1041129"> </a><div class="pSmartList1"><li>When the program is sequentially accessing records from an indexed file that contains records with duplicated alternate key values, those records are returned in the same order in which they were created.  These duplicate values can be created by WRITE or REWRITE statements.  (These records may be reordered in the process of rebuilding the file on another key.)</li></div>
<a name="wp1041130"> </a><p class="pIndented1">
For sites using the RMS file system, please note that when a set of records having duplicate keys is encountered, RMS returns only the first record in the set.
</p>
<a name="wp1041131"> </a><div class="pSmartList1"><li>A Format 2 READ statement provides you with the ability to read records in random order by specifying appropriate key values.  A Format 2 READ statement on a relative file retrieves the record whose record number is specified by the file's RELATIVE KEY data item.</li></div>
<a name="wp1041132"> </a><div class="pSmartList1"><li>For indexed files, a Format 2 READ statement retrieves the record that contains the same key value as the corresponding data item in the file's record area.  The key used is the one named in the KEY phrase of the READ statement.  If no KEY phrase is used, the file's primary key is implied.  The key used becomes the file's current Key of Reference for future Format 1 READ statements.  For key values that are duplicated, the record that corresponds to the first of the sequence of duplicated values (as described in General Rule 10 above) is returned.  </li></div>
<a name="wp1041133"> </a><div class="pSmartList1"><li>After successfully retrieving a record, a Format 2 READ statement sets the file's File Position Indicator to the next logical record according to General Rule 6.  </li></div>
<a name="wp1041134"> </a><div class="pSmartList1"><li>If a Format 2 READ cannot find a record with the appropriate key value, the invalid-key condition exists.  When this happens the following occurs:</li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1041135"> </a><div class="pSmartList2"><li>If the INVALID KEY phrase is specified, <em class="cEmphasis">statement-1</em> executes.  Control does not proceed to a USE AFTER EXCEPTION statement.</li></div>
<a name="wp1041136"> </a><div class="pSmartList2"><li>If no INVALID KEY phrase is specified, but an appropriate USE AFTER EXCEPTION procedure exists, that procedure is executed with an implied return to the end of the READ statement.</li></div>
<a name="wp1041137"> </a><div class="pSmartList2"><li>If neither case (a) nor (b) applies, then an error message is printed and the program halts.</li></div>
</ol></div>
<a name="wp1041138"> </a><div class="pSmartList1"><li>If the NOT INVALID KEY phrase is used and the invalid-key condition does not exist, and no other condition causes a USE AFTER EXCEPTION procedure to execute, <em class="cEmphasis">statement-2</em> is executed.  </li></div>
<a name="wp1041139"> </a><div class="pSmartList1"><li>If an applicable USE AFTER EXCEPTION procedure exists, it executes whenever a condition occurs that results in a non-zero file status.  However, it does not execute if the condition is invalid-key and an INVALID KEY phrase is used, or if the condition is at-end and an AT END phrase is used.</li></div>
<a name="wp1041140"> </a><div class="pSmartList1"><li>If a READ statement is unsuccessful, the current file position and the current Key of Reference are both set to be undefined.  See General Rules 22 and 23 for exceptions.  </li></div>
<a name="wp1041141"> </a><div class="pSmartList1"><li>The INTO phrase causes the contents of the file's record area to be moved to <em class="cEmphasis">dest</em> according to the rules of the MOVE statement.  This move occurs after the record is retrieved, but only if the statement is successful.  </li></div>
<a name="wp1041142"> </a><div class="pSmartList1"><li>The WITH NO LOCK and ALLOWING UPDATERS phrases are equivalent.  They both cause the record to be read without record locking.  In the default mode, any successful READ on a file open in the I-O mode causes the retrieved record to be locked.  A locked record may not be read (with lock) or updated by another program.  Once locked, a record remains locked until any other I/O statement in the program that locked it is executed for the file.  (An exception to this is files that hold multiple record locks--see <a  href="gt348.htm#wp1034858">section 4.3.1, &quot;File-Control Paragraph,&quot;</a> for details.)  Once another I/O statement is executed for the file, the currently locked record becomes unlocked, even if the I/O is unsuccessful. </li></div>
<a name="wp1041144"> </a><div class="pSmartList1"><li>The WITH NO LOCK and ALLOWING UPDATERS phrases are implied for a file open in the INPUT mode, and thus have no effect.</li></div>
<a name="wp1041145"> </a><div class="pSmartList1"><li>For files with manual record locking mode (see <a  href="gt348.htm#wp1034858">section 4.3.1, &quot;File-Control Paragraph,&quot;</a>) the WITH NO LOCK phrase is implied.  For such a file to place a record lock, it must specify WITH LOCK on the READ statement.  </li></div>
<a name="wp1041146"> </a><div class="pSmartList1"><li>Normally, a read that fails due to a record lock will return the appropriate FILE STATUS.  In RM/COBOL compatibility mode, however, if the file has no applicable USE AFTER EXCEPTION procedure available, the program will wait until the record becomes unlocked.  It will then read the record and proceed normally.  Note that this can result in deadlock.  This feature is provided for RM/COBOL compatibility.  Because of the danger in using it, it is not recommended. </li></div>
<a name="wp1041148"> </a><div class="pSmartList1"><li>The current Key of Reference and current file position are not modified by a record locked condition.  This allows a program to wait an appropriate amount of time for the record to become unlocked and then try executing the same READ statement without having to re-establish the current file position.  Because of the nature of RMS, this rule is not followed for a program running under the VMS operating system.  In this case, the File Position Indicator is undefined. </li></div>
<a name="wp1041151"> </a><div class="pSmartList1"><li>If the end of a file is reached by a READ NEXT statement, a subsequent READ PREVIOUS statement will return the last record in the file.  Similarly, if the beginning of a file is reached by a READ PREVIOUS statement, a READ NEXT statement will retrieve the first record of the file.</li></div>
<a name="wp1041155"> </a><div class="pSmartList1"><li>The IBM DOS/VS COBOL &quot;-Cv&quot; compatibility mode supports Reversed File Reads.</li></div>
</ol></div>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
