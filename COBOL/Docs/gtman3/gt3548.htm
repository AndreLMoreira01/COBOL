<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.5.1025" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/14/06 08:27:52" />
  <title>5.7.1.14  VALUE clause</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       ACUCOBOL-GT Reference Manual <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="gt35.htm"><br />Chapter 5:  Data Division</a> &gt; <a href="gt3533.htm">5.7  Record Description Entry</a> &gt; <a href="gt3534.htm">5.7.1  Data Description Entry</a> &gt; </p>
<a name="wp1036377"> </a><h2 class="pHeading3">
5.7.1.14  VALUE clause
</h2>
<a name="wp1036379"> </a><p class="pBody">
The VALUE clause defines the initial value of Working-Storage.  It also describes the values associated with conditionals.
</p>
<a name="wp1036381"> </a><h3 class="pHeadingRef">
General Format
</h3>
<a name="wp1036382"> </a><h3 class="pHeadingRef">
Format 1
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">VALUE</u> IS value-lit<a name="wp1036383"> </a>
</pre></div>
<a name="wp1036384"> </a><h3 class="pHeadingRef">
Format 2
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
{<u class="cUnderline">VALUE</u> IS  } { low-val [ {<u class="cUnderline">THROUGH</u>} high-val ] } ...<a name="wp1036385"> </a>
{<u class="cUnderline">VALUES</u> ARE}             {<u class="cUnderline">THRU</u>   } <a name="wp1036386"> </a>
<a name="wp1036387"> </a>
    [ WHEN SET TO <u class="cUnderline">FALSE</u> false-val ]<a name="wp1036388"> </a>
</pre></div>
<a name="wp1036389"> </a><h3 class="pHeadingRef">
Format 3
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">78</u> user-name <u class="cUnderline">VALUE</u> IS {literal-1} [ {+} literal-2 ] .<a name="wp1036390"> </a>
                      {<u class="cUnderline">NEXT</u>     }   {-}<a name="wp1036391"> </a>
                                    {*}<a name="wp1036392"> </a>
                                    {/}<a name="wp1036393"> </a>
</pre></div>
<a name="wp1036395"> </a><h3 class="pHeadingRef">
Syntax Rules
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1036396"> </a><div class="pSmartList1"><li><em class="cEmphasis">Value-lit</em> is a numeric or non-numeric literal that defines the initial value of a Working-Storage item.</li></div>
<a name="wp1036397"> </a><div class="pSmartList1"><li><em class="cEmphasis">Low-val</em> is a numeric or non-numeric literal that defines the value of a condition, or the lower value of a condition range.</li></div>
<a name="wp1036398"> </a><div class="pSmartList1"><li><em class="cEmphasis">High-val</em> is a numeric or non-numeric literal that defines the upper value of a condition range.  It must be the same type as <em class="cEmphasis">low-val</em> and must have a value greater than <em class="cEmphasis">low-val</em>.</li></div>
<a name="wp1036399"> </a><div class="pSmartList1"><li><em class="cEmphasis">False-val</em> is a numeric or non-numeric literal that defines the FALSE value for the corresponding data item.  </li></div>
<a name="wp1036400"> </a><div class="pSmartList1"><li><em class="cEmphasis">Literal-1</em> is a numeric or alphanumeric literal.  If  <em class="cEmphasis">literal-2</em> is specified, then <em class="cEmphasis">literal-1</em> must be a numeric, non-floating-point literal.  <em class="cEmphasis">Literal-1</em> can also be a &quot;LENGTH OF&quot; expression, as described in <a  href="gt326.htm#wp1034362">section 2.1.2.1, &quot;Numeric literals.&quot;</a></li></div>
<a name="wp1036401"> </a><div class="pSmartList1"><li><em class="cEmphasis">Literal-2</em> is a numeric, non-floating point literal or a &quot;LENGTH OF&quot; expression.</li></div>
<a name="wp1036402"> </a><div class="pSmartList1"><li>The VALUE clause may not be used for any item whose size is variable.</li></div>
<a name="wp1036403"> </a><div class="pSmartList1"><li>A VALUE clause may not be used with an external floating-point data item.</li></div>
<a name="wp1036404"> </a><div class="pSmartList1"><li>All literals used in a VALUE clause must have a value which falls within the range of allowed values for the item's PICTURE clause.  Non-numeric literals may not exceed the size of the item.  Numeric items must have numeric literals.  Alphabetic, alphanumeric, group, and edited items must have non-numeric literals.  </li></div>
<a name="wp1036405"> </a><div class="pSmartList1"><li>The words THROUGH and THRU are equivalent.</li></div>
<a name="wp1036408"> </a><div class="pSmartList1"><li>The Format 2 VALUE clause may be used only in a condition-name (level 88).  Its use is required in this case. </li></div>
<a name="wp1036409"> </a><div class="pSmartList1"><li>VALUE clauses may appear in the File Section and the Linkage Section.  They have no effect in these sections unless they are part of condition-name entries (level 88s) or named constants (level 78s).  </li></div>
<a name="wp1036410"> </a><p class="pIndented1">
Their presence in these two sections simplifies the management of COPY libraries.  For example, if you plan to use the same COPY library in Working Storage in program-A and in Linkage in program-B, you need not remove the VALUE clauses in the Linkage Section.
</p>
<a name="wp1036411"> </a><div class="pSmartList1"><li>The VALUE clause may not be specified for a group item that contains subordinate items with any of the following clauses: JUSTIFIED, SYNCHRONIZED, or USAGE (other than USAGE DISPLAY).  </li></div>
<a name="wp1036412"> </a><div class="pSmartList1"><li>A Format 1 VALUE clause may not appear on a data item that is subordinate to a REDEFINES clause.  </li></div>
<a name="wp1036413"> </a><div class="pSmartList1"><li>A level 78 entry associates a value with the name of a constant, and <em class="cEmphasis">user-name</em>  is a user-defined word that names the constant. <em class="cEmphasis"> User-name</em> must be unique, because it may not be qualified.</li></div>
</ol></div>
<a name="wp1036415"> </a><h3 class="pHeadingRef">
General Rules
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1036416"> </a><div class="pSmartList1"><li>A Format 1 VALUE clause specifies the initial state of a Working-Storage item or the value of a named constant.  A Format 2 VALUE clause defines a condition-name.   A Format 3 VALUE clause defines a constant.</li></div>
<a name="wp1036418"> </a><div class="pSmartList1"><li>When a VALUE clause is applied to an edited item, that item is treated as if it were alphanumeric.  Editing characters in the PICTURE clause count toward the size of the item but have no effect on initialization.  The literals must therefore appear in edited form.</li></div>
</ol></div>
<a name="wp1036419"> </a><h3 class="pHeadingRef">
Initialization (Format 1)
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1036420"> </a><div class="pSmartList1"><li>A Format 1 VALUE clause takes effect only when the program enters its initial state.</li></div>
<a name="wp1036421"> </a><div class="pSmartList1"><li>The VALUE clause initializes its data item to the value of <em class="cEmphasis">value-lit</em>.</li></div>
<a name="wp1036422"> </a><div class="pSmartList1"><li>If no VALUE clause is specified, the initial value of a Working-Storage item is set to spaces, or the value specified with the &quot;-Dv&quot; compile option.  This may, or may not, be a legal value for the item.  </li></div>
<a name="wp1036423"> </a><div class="pSmartList1"><li>When a VALUE clause appears on a data item that is subordinate to an x OCCURS clause, every occurrence of that data item is initialized to the specified value.</li></div>
<a name="wp1036424"> </a><div class="pSmartList1"><li>When a VALUE clause is applied to a group item, that item is initialized as if it were an alphanumeric item.  It is not affected by characteristics of any subordinate items to the group.  No subordinate item may contain a VALUE clause within this group.  </li></div>
<a name="wp1036425"> </a><div class="pSmartList1"><li>The BLANK WHEN ZERO and JUSTIFIED clauses do not affect initialization.</li></div>
</ol></div>
<a name="wp1036426"> </a><h3 class="pHeadingRef">
Condition-Name (Format 2)
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1036427"> </a><div class="pSmartList1"><li>The VALUE clause is required in a condition-name entry.  The only clauses allowed in a condition-name entry are the level-number (88), the condition-name itself, and its VALUE clause.  See <a  href="gt3516.htm#wp1034662">section 5.2.4</a> for examples of condition-name entries. </li></div>
<a name="wp1036429"> </a><div class="pSmartList1"><li>The characteristics of the condition-name are implicitly the same as those of its condition-variable.  The condition-variable is the immediately preceding completed record description entry.  </li></div>
<a name="wp1036430"> </a><div class="pSmartList1"><li>The VALUE clause describes the values of the condition-variable that imply a &quot;true&quot; state for the associated condition-name.  This consists of a single value, a range of values, or a set of both single values and ranges.  For example &quot;VALUES ARE 1, 2, 4 THRU 7&quot; would define a condition-name that was &quot;true&quot; when its associated condition-variable had any of the values &quot;1&quot;, &quot;2&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, and &quot;7&quot;.</li></div>
<a name="wp1036431"> </a><div class="pSmartList1"><li>The WHEN SET TO FALSE phrase defines the &quot;false&quot; value for the condition-name.  The SET statement cannot set the condition-name to FALSE unless a &quot;false&quot; value is specified here.</li></div>
</ol></div>
<a name="wp1036433"> </a><h3 class="pHeadingRef">
Level 78 Constant (Format 3)
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1036434"> </a><div class="pSmartList1"><li>When it is used with a level 78 item, the VALUE clause associates a literal with a user-defined word.  The user-defined word is then called a <em class="cEmphasis">named constant.</em>   A named constant may be used anywhere the corresponding literal may be used.  The compiler replaces each occurrence of the named constant with the literal. </li></div>
<a name="wp1036436"> </a><div class="pSmartList1"><li>The literal is constructed as follows:</li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1036437"> </a><div class="pSmartList2"><li>If <em class="cEmphasis">literal-1</em> is specified (without <em class="cEmphasis">literal-2</em>), then <em class="cEmphasis">user-name</em> acts as a synonym for that literal in the remainder of the program.</li></div>
<a name="wp1036438"> </a><div class="pSmartList2"><li>If NEXT is specified (without <em class="cEmphasis">literal-2</em>), then <em class="cEmphasis">user-name</em> acts as an integer numeric constant whose value is the virtual address of the first byte past the end of the immediately preceding data item.  However, if the immediately preceding data item is a group item, then the value is the virtual address of the beginning of the group item.  <b style="font-weight: normal" class="cBold">Note</b> that the effect of synchronization and data alignment may mean that the next data item does not start at the same virtual address as the first byte past the end of the previous data item. This construct has undefined effects if the immediately  preceding data item is, or is part of, a data item greater than 64KB in size. </li></div>
<a name="wp1036439"> </a><p class="pCautionIndent">
<hr />
<b>Caution:  </b>The use of NEXT is designed for compatibility with other COBOL compilers.  The effects of data alignment and data space segmentation make this feature difficult to use with standard ACUCOBOL-GT code.  Acucorp does not recommend its use except when  you are migrating code that already contains similar syntax.  ACUCOBOL-GT provides other techniques for address manipulation (e.g. POINTER data items) and size computation (e.g. SET TO SIZE OF statement). 
<hr />
</p>
<a name="wp1045513"> </a><div class="pSmartList2"><li>If <em class="cEmphasis">literal-2</em> is specified, then <em class="cEmphasis">user-name</em> is an integer numeric constant whose value is the same as it would be without <em class="cEmphasis">literal-2</em> specified, acted upon by the specified operation.  For example, the following two level 78s have the same value:</li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
   78  THREE         VALUE 3.<a name="wp1045514"> </a>
   78  THREE-AGAIN   VALUE 1 + 2.<a name="wp1045515"> </a>
</pre></div>
<a name="wp1036444"> </a><p class="pIndented2">
<em style="font-style: normal" class="cEmphasis">In some cases, </em><em class="cEmphasis">literal-1</em> and <em class="cEmphasis">literal-2</em> may, themselves, be level 78s. For example:
</p>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
   78  ONE           VALUE 1.<a name="wp1036445"> </a>
   78  TWO           VALUE ONE + 1.<a name="wp1036446"> </a>
   78  THREE         VALUE TWO + 1.<a name="wp1036447"> </a>
</pre></div>
<a name="wp1036448"> </a><p class="pIndented2">
When <em class="cEmphasis">literal-2</em> is used, both <em class="cEmphasis">literal-1</em> and <em class="cEmphasis">literal-2</em> are evaluated as integers, and the arithmetic is done using 32-bit integer arithmetic.  The result is always an integer.  
</p>
</ol></div>
<a name="wp1036450"> </a><div class="pSmartList1"><li>You may use a level 78 named constant as a repeat count in a PICTURE string.  This means that, in a PICTURE string, you may substitute a level 78 for a number in parentheses.  In the following example, DATA-1 and DATA-2 are both the same size:</li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
78  LENG-20   VALUE 20.<a name="wp1036451"> </a>
01  DATA-1    PIC X(20).<a name="wp1036452"> </a>
01  DATA-2    PIC X(LENG-20).<a name="wp1036453"> </a>
</pre></div>
</ol></div>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
