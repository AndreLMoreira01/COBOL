<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.5.1025" />
  <meta name="TEMPLATEBASE" content="Acucorp WWH" />
  <meta name="LASTUPDATED" content="06/14/06 08:28:08" />
  <title>PERFORM Statement</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
    var  WWHFrame = WWHGetWWHFrame("");
   // -->
  </script>
 </head>

 <body onLoad="WWHUpdate();">

    <a href="../docs.htm" target="acudoc"><img src="images/sbooks.gif" width="70" height="27" border="0" alt="Books" align="right" /></a>
    <span style="font-size: 18px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       ACUCOBOL-GT Reference Manual <br />
    </font></span>
    <span style="font-size: 14px ; font-weight: bold"><font face="Arial, Helvetica, sans-serif">
       Version 7.2
     </font></span>

 <p />

 <blockquote>
<p class="breadcrumb"><a href="gt36.htm"><br />Chapter 6:  Procedure Division</a> &gt; <a href="gt3678.htm">6.6  Procedure Division Statements </a> &gt; </p>
<a name="wp1040928"> </a><h2 class="pHeading2">
PERFORM Statement
</h2>
<a name="wp1040931"> </a><p class="pBody">
The PERFORM statement executes a procedure with optional loop control.  
</p>
<a name="wp1040933"> </a><h3 class="pHeadingRef">
General Format
</h3>
<a name="wp1040934"> </a><h3 class="pHeadingRef">
Format 1
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">PERFORM</u> [ IN <u class="cUnderline">THREAD</u> ]<a name="wp1040935"> </a>
<a name="wp1040936"> </a>
      [ procedure-1 [ {<u class="cUnderline">THROUGH</u>} procedure-2 ] ]<a name="wp1040937"> </a>
                      {<u class="cUnderline">THRU</u>   }<a name="wp1040938"> </a>
<a name="wp1040939"> </a>
      [ <u class="cUnderline">HANDLE</u> IN handle-1 ]<a name="wp1040940"> </a>
<a name="wp1040941"> </a>
      [ statement <u class="cUnderline">END-PERFORM</u> ]<a name="wp1040942"> </a>
</pre></div>
<a name="wp1040943"> </a><h3 class="pHeadingRef">
Format 2
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">PERFORM</u> [ IN <u class="cUnderline">THREAD</u> ]<a name="wp1040944"> </a>
<a name="wp1040945"> </a>
      [ procedure-1 [ {<u class="cUnderline">THROUGH</u>} procedure-2 ] ]<a name="wp1040946"> </a>
                      {<u class="cUnderline">THRU</u>   }<a name="wp1040947"> </a>
<a name="wp1040948"> </a>
      [ <u class="cUnderline">HANDLE</u> IN handle-1 ]<a name="wp1040949"> </a>
<a name="wp1040950"> </a>
        number <u class="cUnderline">TIMES</u><a name="wp1040951"> </a>
<a name="wp1040952"> </a>
      [ statement <u class="cUnderline">END-PERFORM</u> ]<a name="wp1040953"> </a>
</pre></div>
<a name="wp1040954"> </a><h3 class="pHeadingRef">
Format 3
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">PERFORM</u> [ IN <u class="cUnderline">THREAD</u> ]<a name="wp1040955"> </a>
<a name="wp1040956"> </a>
      [ procedure-1 [ {<u class="cUnderline">THROUGH</u>} procedure-2 ] ]<a name="wp1040957"> </a>
                      {<u class="cUnderline">THRU</u>   }<a name="wp1040958"> </a>
<a name="wp1040959"> </a>
      [ <u class="cUnderline">HANDLE</u> IN handle-1 ]<a name="wp1040960"> </a>
<a name="wp1040961"> </a>
      [ WITH <u class="cUnderline">TEST</u> {<u class="cUnderline">BEFORE</u>} ] <u class="cUnderline">UNTIL</u> condition<a name="wp1040962"> </a>
                  {<u class="cUnderline">AFTER</u> }<a name="wp1040963"> </a>
<a name="wp1040964"> </a>
      [ statement <u class="cUnderline">END-PERFORM</u> ]<a name="wp1040965"> </a>
</pre></div>
<a name="wp1040966"> </a><h3 class="pHeadingRef">
Format 4
</h3>
<div class="pPreformatted"><pre class="pPreformatted">
<u class="cUnderline">PERFORM</u> [ IN <u class="cUnderline">THREAD</u> ]<a name="wp1040967"> </a>
<a name="wp1040968"> </a>
      [ procedure-1 [ {<u class="cUnderline">THROUGH</u>} procedure-2 ] ]<a name="wp1040969"> </a>
                      {<u class="cUnderline">THRU</u>   }<a name="wp1040970"> </a>
<a name="wp1040971"> </a>
      [ <u class="cUnderline">HANDLE</u> IN handle-1 ]<a name="wp1040972"> </a>
<a name="wp1040973"> </a>
      [ WITH <u class="cUnderline">TEST</u> {<u class="cUnderline">BEFORE</u>} ]<a name="wp1040974"> </a>
                  {<u class="cUnderline">AFTER</u> }<a name="wp1040975"> </a>
<a name="wp1040976"> </a>
        <u class="cUnderline">VARYING</u> counter <u class="cUnderline">FROM</u> starting-val<a name="wp1040977"> </a>
<a name="wp1040978"> </a>
            <u class="cUnderline">BY</u> increment <u class="cUnderline">UNTIL</u> condition<a name="wp1040979"> </a>
<a name="wp1040980"> </a>
      [ <u class="cUnderline">AFTER</u> counter <u class="cUnderline">FROM</u> starting-val<a name="wp1040981"> </a>
<a name="wp1040982"> </a>
            <u class="cUnderline">BY</u> increment <u class="cUnderline">UNTIL</u> condition ] ...<a name="wp1040983"> </a>
<a name="wp1040984"> </a>
      [ statement <u class="cUnderline">END-PERFORM</u> ]<a name="wp1040985"> </a>
</pre></div>
<a name="wp1040987"> </a><h3 class="pHeadingRef">
Syntax Rules
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1040988"> </a><div class="pSmartList1"><li><em class="cEmphasis">Handle-1</em> is a HANDLE or HANDLE OF THREAD data item.</li></div>
<a name="wp1040989"> </a><div class="pSmartList1"><li><em class="cEmphasis">Procedure-1</em> and <em class="cEmphasis">procedure-2</em> are paragraph or section names in the Procedure Division.</li></div>
<a name="wp1040990"> </a><div class="pSmartList1"><li><em class="cEmphasis">Statement</em> is an imperative statement.</li></div>
<a name="wp1040991"> </a><div class="pSmartList1"><li><em class="cEmphasis">Number</em> is an integer numeric literal or data item.  The value of <em class="cEmphasis">number</em> cannot exceed 2,147,483,647.</li></div>
<a name="wp1040992"> </a><div class="pSmartList1"><li><em class="cEmphasis">Condition</em> is a conditional expression.</li></div>
<a name="wp1040993"> </a><div class="pSmartList1"><li><em class="cEmphasis">Counter</em> is a numeric data item.</li></div>
<a name="wp1040994"> </a><div class="pSmartList1"><li><em class="cEmphasis">Starting-val</em> is a numeric literal or data item.</li></div>
<a name="wp1040995"> </a><div class="pSmartList1"><li><em class="cEmphasis">Increment</em> is a non-zero numeric literal or data item.</li></div>
<a name="wp1040996"> </a><div class="pSmartList1"><li>A PERFORM statement must have exactly one of the <em class="cEmphasis">procedure-1</em> or the <em class="cEmphasis">statement</em> END-PERFORM phrases specified.  </li></div>
<a name="wp1040997"> </a><div class="pSmartList1"><li>The words THRU and THROUGH are interchangeable.</li></div>
</ol></div>
<a name="wp1040999"> </a><h3 class="pHeadingRef">
General Rules
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1041000"> </a><div class="pSmartList1"><li>A PERFORM statement that contains <em class="cEmphasis">procedure-1</em> is an out-of-line PERFORM.  When <em class="cEmphasis">statement</em> is used instead, then it is an in-line PERFORM.</li></div>
<a name="wp1041001"> </a><div class="pSmartList1"><li>An in-line PERFORM statement functions according to the same rules for an otherwise identical out-of-line PERFORM except that <em class="cEmphasis">statement</em> is executed in place of the statements in the range of <em class="cEmphasis">procedure-1</em> (through <em class="cEmphasis">procedure-2</em> if specified).  </li></div>
<a name="wp1041002"> </a><div class="pSmartList1"><li>When the PERFORM executes, control transfers to the first statement of <em class="cEmphasis">procedure-1</em>.  Control might not transfer, however, depending on the evaluation of <em class="cEmphasis">condition</em> (if specified).  The PERFORM statement also establishes an implicit transfer of control to the end of the PERFORM statement according to the following rules:</li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1041003"> </a><div class="pSmartList2"><li>If <em class="cEmphasis">procedure-1</em> is a paragraph name, and <em class="cEmphasis">procedure-2</em> is not specified, the return is after the last statement of <em class="cEmphasis">procedure-1</em>.</li></div>
<a name="wp1041004"> </a><div class="pSmartList2"><li>If <em class="cEmphasis">procedure-1</em> is a section name, and <em class="cEmphasis">procedure-2</em> is not specified, the return is after the last statement of the last paragraph of <em class="cEmphasis">procedure-1</em>.</li></div>
<a name="wp1041005"> </a><div class="pSmartList2"><li>If <em class="cEmphasis">procedure-2</em> is specified and is a paragraph name, the return is placed after the last statement of <em class="cEmphasis">procedure-2</em>.</li></div>
<a name="wp1041006"> </a><div class="pSmartList2"><li>If <em class="cEmphasis">procedure-2</em> is specified and is a section name, the return is placed after the last statement of the last paragraph of <em class="cEmphasis">procedure-2</em>.</li></div>
<a name="wp1041007"> </a><div class="pSmartList2"><li>If an in-line PERFORM is specified, an execution of the PERFORM statement is completed after <em class="cEmphasis">statement</em> has executed.</li></div>
</ol></div>
<a name="wp1041008"> </a><div class="pSmartList1"><li><em class="cEmphasis">Procedure-1</em> and <em class="cEmphasis">procedure-2</em> are not necessarily related except that control starts at <em class="cEmphasis">procedure-1</em> and returns when it reaches the end of <em class="cEmphasis">procedure-2</em>.  In particular, GO TO and PERFORM statements may occur between <em class="cEmphasis">procedure-1</em> and the end of <em class="cEmphasis">procedure-2</em>.  </li></div>
<a name="wp1041009"> </a><div class="pSmartList1"><li>Control can pass to statements that are inside the range of <em class="cEmphasis">procedure-1</em> through <em class="cEmphasis">procedure-2</em> by mechanisms other than PERFORM.  In this case, the implicit return to the PERFORM referencing these statements is not made.  An implicit return occurs only for an active PERFORM. </li></div>
<a name="wp1041011"> </a><div class="pSmartList1"><li>The range of a PERFORM statement consists of those statements that are executed as a result of executing that PERFORM.  This includes statements that are executed as the result of GO TO and PERFORM statements included in the range of the PERFORM statement.  </li></div>
<a name="wp1041012"> </a><div class="pSmartList1"><li>If that range of a PERFORM statement includes another PERFORM statement, the range of the included PERFORM must be either totally included in or totally excluded from the logical sequence of the first PERFORM statement.  Thus an active PERFORM included in the range of another active PERFORM may not allow control to pass to the return point of the first PERFORM.  Furthermore, two or more active PERFORM statements may not have a common return point.</li></div>
<a name="wp1041013"> </a><div class="pSmartList1"><li>Within a thread, a paragraph under the control of a PERFORM statement may (directly or indirectly) PERFORM itself only if the compile-time option &quot;-Zr1&quot; is specified (this option is specified by default).  </li></div>
<a name="wp1041014"> </a><div class="pSmartList1"><li>If the TEST phrase is not specified, TEST BEFORE is implied.</li></div>
<a name="wp1041015"> </a><div class="pSmartList1"><li>When the THREAD option is used, a new thread is created by the PERFORM statement.  Once control returns to the end of the PERFORM statement, the thread is terminated.  Note that all of the statements contained in the scope of the PERFORM are executed in the new thread.  This includes any loop control operations implied by the PERFORM.  For example, the statement:</li></div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
	PERFORM THREAD, PARA-1 5 TIMES<a name="wp1041016"> </a>
</pre></div>
<a name="wp1041017"> </a><p class="pIndented1">
creates a single thread the performs PARA-1 five times (as opposed to creating five separate threads, each of which executes PARA-1 once).
</p>
<a name="wp1041018"> </a><div class="pSmartList1"><li>If <em class="cEmphasis">handle-1</em> is specified, the new thread's unique ID is stored in <em class="cEmphasis">handle-1</em>.  </li></div>
</ol></div>
<a name="wp1041019"> </a><h3 class="pHeadingRef">
Format 1
</h3>
<a name="wp1041020"> </a><p class="pBody">
A Format 1 PERFORM statement executes its range exactly once.
</p>
<a name="wp1041021"> </a><h3 class="pHeadingRef">
Format 2
</h3>
<a name="wp1041022"> </a><p class="pBody">
A Format 2 PERFORM statement executes its range a fixed number of times.  If <em class="cEmphasis">number</em> is zero or negative, control passes to the end of the PERFORM statement.  Otherwise the range of the PERFORM statement executes <em class="cEmphasis">number</em> times.  Changing the value of <em class="cEmphasis">number</em> during the execution of the PERFORM statement does not change the number of times that range is executed.
</p>
<a name="wp1041023"> </a><h3 class="pHeadingRef">
Format 3
</h3>
<a name="wp1041024"> </a><p class="pBody">
A Format 3 PERFORM statement executes its range until <em class="cEmphasis">condition</em> evaluates &quot;true&quot;.  If TEST BEFORE is specified or implied, the evaluation of <em class="cEmphasis">condition</em> occurs prior to any executions of the PERFORM range.  Thus if <em class="cEmphasis">condition</em> is true when the PERFORM starts, the range will not be executed.  If TEST AFTER is specified, the evaluation of <em class="cEmphasis">condition</em> does not occur until after the first execution of the PERFORM range. 
</p>
<a name="wp1041027"> </a><h3 class="pHeadingRef">
Format 4
</h3>
<div class="pSmartList1"><ol type="1" class="pSmartList1">
<a name="wp1041028"> </a><div class="pSmartList1"><li>A Format 4 PERFORM statement executes its range a variable number of times while systematically changing the value of one or more variables.</li></div>
<a name="wp1041029"> </a><div class="pSmartList1"><li>If TEST BEFORE is specified or implied and only one <em class="cEmphasis">counter</em> is specified:</li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1041030"> </a><div class="pSmartList2"><li><em class="cEmphasis">Counter</em> is set to the value of <em class="cEmphasis">starting-val</em> when the PERFORM statement begins.</li></div>
<a name="wp1041031"> </a><div class="pSmartList2"><li>If <em class="cEmphasis">condition</em> is false, the PERFORM range executes once.  Then <em class="cEmphasis">increment</em> is added to <em class="cEmphasis">counter</em> and <em class="cEmphasis">condition</em> is evaluated again.  This cycle repeats until <em class="cEmphasis">condition</em> is true.</li></div>
<a name="wp1041032"> </a><div class="pSmartList2"><li>If <em class="cEmphasis">condition</em> is true when the PERFORM statement begins executing, control is passed to the end of the statement after <em class="cEmphasis">counter</em> is set to <em class="cEmphasis">starting-val</em>.</li></div>
</ol></div>
<a name="wp1041033"> </a><div class="pSmartList1"><li>If TEST BEFORE is specified or implied and two or more <em class="cEmphasis">counters</em> are used:</li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1041034"> </a><div class="pSmartList2"><li>Each <em class="cEmphasis">counter</em> is set to the value of the corresponding <em class="cEmphasis">starting-val</em>.</li></div>
<a name="wp1041035"> </a><div class="pSmartList2"><li>If the first <em class="cEmphasis">condition</em> is true, control transfers to the end of the PERFORM statement.</li></div>
<a name="wp1041036"> </a><div class="pSmartList2"><li>If the last <em class="cEmphasis">condition</em> is false, the range of the PERFORM executes once.  The final <em class="cEmphasis">counter</em> is incremented by the corresponding <em class="cEmphasis">increment</em> and the last <em class="cEmphasis">condition</em> is evaluated again.  This cycle continues until the last <em class="cEmphasis">condition</em> is true.</li></div>
<a name="wp1041037"> </a><div class="pSmartList2"><li>When the last <em class="cEmphasis">condition</em> is true, the last <em class="cEmphasis">counter</em> is set again to the corresponding <em class="cEmphasis">starting-val</em>.  The preceding <em class="cEmphasis">counter</em> is then incremented by the corresponding <em class="cEmphasis">increment</em> and the preceding <em class="cEmphasis">condition</em> is evaluated.  If the <em class="cEmphasis">condition</em> is false, step (c) is performed again.</li></div>
<a name="wp1041038"> </a><div class="pSmartList2"><li>When the <em class="cEmphasis">condition</em> in step (d) is true, the cycle repeats for the next higher-level <em class="cEmphasis">counter</em>.  These cycles continue repeating in this hierarchical manner until the topmost (VARYING) <em class="cEmphasis">counter</em> is cycled.  For each level, all levels underneath it are reinitialized and run through a full cycle each time the corresponding <em class="cEmphasis">counter</em> is incremented.</li></div>
<a name="wp1041039"> </a><div class="pSmartList2"><li>The PERFORM statement ends when the uppermost (the first) <em class="cEmphasis">condition</em> evaluates true.  </li></div>
</ol></div>
<a name="wp1041040"> </a><div class="pSmartList1"><li>At the end of a PERFORM with the TEST BEFORE phrase, the value of the first <em class="cEmphasis">counter</em> exceeds the last-used value by one addition of <em class="cEmphasis">increment</em>.  The values of all other <em class="cEmphasis">counters</em> are equal to their corresponding <em class="cEmphasis">starting-val</em>.  </li></div>
<a name="wp1041041"> </a><div class="pSmartList1"><li>If the TEST AFTER phrase is specified and only one <em class="cEmphasis">counter</em> is used:</li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1041042"> </a><div class="pSmartList2"><li><em class="cEmphasis">Counter</em> is set to the value of <em class="cEmphasis">starting-val</em>.</li></div>
<a name="wp1041043"> </a><div class="pSmartList2"><li>The range executes once.  Then <em class="cEmphasis">condition</em> is evaluated.  If it is false, <em class="cEmphasis">increment</em> is added to <em class="cEmphasis">counter</em> and the range executes again.  This cycle continues until <em class="cEmphasis">condition</em> is true.</li></div>
</ol></div>
<a name="wp1041044"> </a><div class="pSmartList1"><li>If the TEST AFTER phrase is specified and two or more <em class="cEmphasis">counters</em> are used:</li></div>
<div class="pSmartList2"><ol type="a" class="pSmartList2">
<a name="wp1041045"> </a><div class="pSmartList2"><li>Each <em class="cEmphasis">counter</em> is set to its corresponding <em class="cEmphasis">starting-val</em>.</li></div>
<a name="wp1041046"> </a><div class="pSmartList2"><li>The PERFORM range executes once.  The last <em class="cEmphasis">condition</em> is then evaluated.  If it is false, the last <em class="cEmphasis">counter</em> is incremented by its corresponding <em class="cEmphasis">increment</em> and the PERFORM range executes again.  This continues until the last <em class="cEmphasis">condition</em> evaluates true.</li></div>
<a name="wp1041047"> </a><div class="pSmartList2"><li>When the last <em class="cEmphasis">condition</em> is true, the preceding <em class="cEmphasis">condition</em> is evaluated.  If it is false, the value of the corresponding <em class="cEmphasis">counter</em> is incremented by its <em class="cEmphasis">increment</em>, the last <em class="cEmphasis">counter</em> is set to its corresponding <em class="cEmphasis">starting-val</em>, and step (b) is performed through another cycle.  </li></div>
<a name="wp1041048"> </a><div class="pSmartList2"><li>When the <em class="cEmphasis">condition</em> in step (c) is true, the cycle repeats for the next higher-level <em class="cEmphasis">counter</em>.  These cycles continue repeating in this hierarchical manner until the topmost (VARYING) <em class="cEmphasis">counter</em> is cycled.  For each level, all levels underneath it are reinitialized and run through a full cycle each time the corresponding <em class="cEmphasis">counter</em> is incremented.</li></div>
<a name="wp1041049"> </a><div class="pSmartList2"><li>The PERFORM statement ends when the topmost (VARYING) <em class="cEmphasis">condition</em> is true.</li></div>
</ol></div>
<a name="wp1041050"> </a><div class="pSmartList1"><li>At the end of a PERFORM statement with the TEST AFTER phrase, the value of each <em class="cEmphasis">counter</em> is the same as at the end of the most recent execution of the PERFORM range.</li></div>
</ol></div>
 </blockquote>

 <hr />

 <table align="left" border="0" cellspacing="0" cellpadding="0">
   <tr>
     <td align="left" width="300">
       <span style="font-size: 12px ; font-weight: bold ; font-family: Arial, Helvetica, sans-serif">
         <a href="http://www.acucorp.com">Acucorp, Inc.</a><br />
       </span>
       <span style="font-size: 10px ; font-family: Arial, Helvetica, sans-serif">
         Voice: 800.262.6585 (U.S.A. and Canada)<br />
         Voice: 858.689.4500<br />
         Fax: 858.689.4550<br />
         Please share your comments on this manual<br />
         or on any Acucorp documentation with the<br />
         <a href="mailto:docfeedback@acucorp.com">Acucorp Communications Department</a>.<br />
       </span>
     </td>
   </tr>
 </table>

<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 
</body>
</html>
