       IDENTIFICATION DIVISION.
       PROGRAM-ID.  CUSTSQL.
      * COPYRIGHT (C) 1996-2006 BY ACUCORP, INC.  USERS OF ACUCOBOL
      * MAY FREELY MODIFY AND REDISTRIBUTE THIS PROGRAM.
       REMARKS.
           THIS PROGRAM READS THRU A CUSTOMER TABLE IN ACCESS, UNTIL THE
           EXIT BUTTON IS PRESSED.  IT WAS DEVELOPED USING SCREENS AND
           COPYFILES GENERATED BY THE ACUBENCH SCREEN PAINTER. 
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
      *{Bench}activex-def
      *{Bench}end
      *
       WORKING-STORAGE SECTION.
      *{Bench}acu-def
       COPY "acugui.def".
       COPY "acucobol.def".
       COPY "crtvars.def".
       COPY "showmsg.def".
      *{Bench}end
      *
       77  MB-VALUE                            PIC 9 VALUE 0.
      * 
       78  NEWLINE                             VALUE H"0A".
      *       
      *{Bench}copy-working
       COPY "custsql.wrk".
      *{Bench}end
       COPY RESOURCE "SMPL-ARROWS.BMP".
      * 
           
      *(( PREPROC ACUSQL LINE BEGIN 32 ))
       01  SQLCA IS EXTERNAL.
           05  SQLCAID                PIC X(8).
           05  SQLCABC         COMP-5 PIC S9(9).
           05  SQLCODE         COMP-5 PIC S9(9).
           05  SQLERRM.
               10  SQLERRML    COMP-5 PIC S9(4).
               10  SQLERRMC           PIC X(70).
           05  SQLERRP                PIC X(8).
           05  SQLERRD OCCURS 6 TIMES COMP-5 PIC S9(9).
           05  SQLWARN.
               10  SQLWARN0           PIC X.
               10  SQLWARN1           PIC X.
               10  SQLWARN2           PIC X.
               10  SQLWARN3           PIC X.
               10  SQLWARN4           PIC X.
               10  SQLWARN5           PIC X.
               10  SQLWARN6           PIC X.
               10  SQLWARN7           PIC X.
               10  SQLWARN8           PIC X.
               10  SQLWARN9           PIC X.
               10  SQLWARNA           PIC X.
           05  SQLSTATE               PIC X(5).
           05  SQLERRM-PREFIX.
               10  SQLERRPL    COMP-5 PIC S9(4).
               10  SQLERRPC           PIC X(70).

      *    EXEC SQL INCLUDE SQLCA END-EXEC.                             
      *(( PREPROC ACUSQL LINE END 32 ))
                                        
      *
           
      *(( PREPROC ACUSQL LINE BEGIN 34 ))

      *    EXEC SQL BEGIN DECLARE SECTION END-EXEC.
      *(( PREPROC ACUSQL LINE END 34 ))
           
       01  CUSTOMER-RECORD.
           03  CUSTOMER-ID                     PIC X(10).
           03  CUSTOMER-NAME                   PIC X(30).
           03  CUSTOMER-ADDR-1                 PIC X(40).
           03  CUSTOMER-ADDR-2                 PIC X(40).
           03  CUSTOMER-CITY                   PIC X(15).
           03  CUSTOMER-STATE                  PIC XX.
           03  CUSTOMER-ZIP                    PIC X(10).
           03  CUSTOMER-PHONE                  PIC X(15).
           03  CUSTOMER-CONTACT                PIC X(20).
           
      *(( PREPROC ACUSQL LINE BEGIN 45 ))

      *    EXEC SQL END DECLARE SECTION END-EXEC.
      *(( PREPROC ACUSQL LINE END 45 ))
           
       LINKAGE SECTION.
      *{Bench}linkage
      *{Bench}end
      *
       SCREEN SECTION.
      *{Bench}copy-screen
       COPY "custsql.scr".
      *{Bench}end
       PROCEDURE DIVISION.
       MAIN-LOGIC.
           
      *(( PREPROC ACUSQL LINE BEGIN 56 ))
           CONTINUE
      *    EXEC SQL WHENEVER SQLERROR GOTO ERROR-EXIT END-EXEC.
      *(( PREPROC ACUSQL LINE END 56 ))
           .
      * CREATE CURSOR CALLED CUR1 THAT IS USED THROUGHOUT THE PROGRAM
           
      *(( PREPROC ACUSQL LINE BEGIN 58 ))
           CONTINUE
      *    EXEC SQL
      *        DECLARE CUR1 CURSOR  FOR
      *            SELECT * FROM CUSTOMER
      *    END-EXEC.
      *(( PREPROC ACUSQL LINE END 61 ))
           .
      *     
           PERFORM INITIALIZATIONS.
      *
           PERFORM UNTIL EXIT-BUTTON-PUSHED
             ACCEPT CUST-SCREEN 
               ON EXCEPTION CONTINUE
             END-ACCEPT
           END-PERFORM.  
      *     
      *    DISCONNECT FROM DATABASE
           
      *(( PREPROC ACUSQL LINE BEGIN 72 ))
           PERFORM CALL "SQL$START" END-CALL CALL "SQL$CLOSE" USING "CUR
      -    "1" END-CALL IF SQLCODE OF SQLCA < 0 THEN GO TO ERROR-EXIT EN
      -    D-IF CALL "SQL$UNPREPARE" USING 'SQLCSTMCUR1' END-CALL  END-P
      -    ERFORM
      *    EXEC SQL CLOSE CUR1 END-EXEC.
      *(( PREPROC ACUSQL LINE END 72 ))
           .
           
      *(( PREPROC ACUSQL LINE BEGIN 73 ))
           PERFORM CALL "SQL$START" END-CALL CALL "SQL$COMMIT"  END-CALL
            IF SQLCODE OF SQLCA < 0 THEN GO TO ERROR-EXIT END-IF  END-PE
      -    RFORM
      *    EXEC SQL COMMIT END-EXEC.
      *(( PREPROC ACUSQL LINE END 73 ))
           .
           
      *(( PREPROC ACUSQL LINE BEGIN 74 ))
           PERFORM CALL "SQL$START" END-CALL CALL "SQL$DISCONNECTALL"  E
      -    ND-CALL IF SQLCODE OF SQLCA < 0 THEN GO TO ERROR-EXIT END-IF 
            END-PERFORM
      *    EXEC SQL DISCONNECT ALL END-EXEC.     
      *(( PREPROC ACUSQL LINE END 74 ))
           .     
           STOP RUN.
      *    
       INITIALIZATIONS.
      * DISPLAY INITIAL WINDOW     
           PERFORM ACU-INITIAL-ROUTINE.
           PERFORM ACU-CUST-SCREEN-SCRN.

      * LOG ON TO DATABASE     
           DISPLAY MESSAGE BOX 
               "Have you created an ODBC datasource called" NEWLINE
               "50_access pointing to the custsql.mdb Access97" NEWLINE
               "database in the sample project directory?"
               TYPE IS MB-YES-NO
               RETURNING MB-VALUE.
           IF MB-VALUE = MB-YES
               
      *(( PREPROC ACUSQL LINE BEGIN 90 ))
           PERFORM CALL "SQL$START" END-CALL CALL "SQL$CONNECT" USING '5
      -    '0_access' 'SQLCON'  END-CALL IF SQLCODE OF SQLCA < 0 THEN GO
            TO ERROR-EXIT END-IF  END-PERFORM
      *        EXEC SQL CONNECT TO "50_access" END-EXEC
      *(( PREPROC ACUSQL LINE END 90 ))
           
           ELSE
      *        PROMPT TO SEE README OR EXIT PROGRAM IMMEDIATELY     
               DISPLAY MESSAGE BOX 
                   "No datasource has been set up. Program is aborting."
                   NEWLINE
                   "Would you like to view the readme file that describe
      -    "s how to set up an ODBC Datasource?"
                   TYPE IS MB-YES-NO
                   RETURNING MB-VALUE
               IF MB-VALUE = MB-YES
                   CALL "C$SYSTEM" USING 
                       "notepad read_me.txt" CSYS-ASYNC
               END-IF
               STOP RUN
           END-IF.

      * OPEN CURSOR, GET FIRST RECORD AND DISPLAY SCREEN
           
      *(( PREPROC ACUSQL LINE BEGIN 108 ))
           PERFORM CALL "SQL$START" END-CALL CALL "SQL$PREPARE" USING 'S
      -    'QLCSTMCUR1', "SELECT * FROM CUSTOMER " END-CALL IF SQLCODE O
      -    F SQLCA < 0 THEN GO TO ERROR-EXIT END-IF CALL "SQL$CURSOR" US
      -    ING 'CUR1' 'SQLCSTMCUR1'  END-CALL IF SQLCODE OF SQLCA < 0 TH
      -    EN GO TO ERROR-EXIT END-IF CALL "SQL$OPEN" USING "CUR1" END-C
      -    ALL IF SQLCODE OF SQLCA < 0 THEN GO TO ERROR-EXIT END-IF END-
      -    PERFORM
      *    EXEC SQL OPEN CUR1 END-EXEC.
      *(( PREPROC ACUSQL LINE END 108 ))
           .
           
      *(( PREPROC ACUSQL LINE BEGIN 109 ))
           PERFORM CALL "SQL$START" END-CALL CALL "SQL$BINDCOLUMN" USING
            'SQLCSTMCUR1' 1 CUSTOMER-ID   END-CALL IF SQLCODE OF SQLCA <
            0 THEN GO TO ERROR-EXIT END-IF CALL "SQL$BINDCOLUMN" USING '
      -    'SQLCSTMCUR1' 2 CUSTOMER-NAME   END-CALL IF SQLCODE OF SQLCA 
           < 0 THEN GO TO ERROR-EXIT END-IF CALL "SQL$BINDCOLUMN" USING 
           'SQLCSTMCUR1' 3 CUSTOMER-ADDR-1   END-CALL IF SQLCODE OF SQLC
      -    A < 0 THEN GO TO ERROR-EXIT END-IF CALL "SQL$BINDCOLUMN" USIN
      -    G 'SQLCSTMCUR1' 4 CUSTOMER-ADDR-2   END-CALL IF SQLCODE OF SQ
      -    LCA < 0 THEN GO TO ERROR-EXIT END-IF CALL "SQL$BINDCOLUMN" US
      -    ING 'SQLCSTMCUR1' 5 CUSTOMER-CITY   END-CALL IF SQLCODE OF SQ
      -    LCA < 0 THEN GO TO ERROR-EXIT END-IF CALL "SQL$BINDCOLUMN" US
      -    ING 'SQLCSTMCUR1' 6 CUSTOMER-STATE   END-CALL IF SQLCODE OF S
      -    QLCA < 0 THEN GO TO ERROR-EXIT END-IF CALL "SQL$BINDCOLUMN" U
      -    SING 'SQLCSTMCUR1' 7 CUSTOMER-ZIP   END-CALL IF SQLCODE OF SQ
      -    LCA < 0 THEN GO TO ERROR-EXIT END-IF CALL "SQL$BINDCOLUMN" US
      -    ING 'SQLCSTMCUR1' 8 CUSTOMER-PHONE   END-CALL IF SQLCODE OF S
      -    QLCA < 0 THEN GO TO ERROR-EXIT END-IF CALL "SQL$BINDCOLUMN" U
      -    SING 'SQLCSTMCUR1' 9 CUSTOMER-CONTACT   END-CALL IF SQLCODE O
      -    F SQLCA < 0 THEN GO TO ERROR-EXIT END-IF CALL "SQL$FETCH" USI
      -    NG 1 0 'CUR1' END-CALL IF SQLCODE OF SQLCA < 0 THEN GO TO ERR
      -    OR-EXIT END-IF END-PERFORM
      *    EXEC SQL
      *        FETCH CUR1 INTO :CUSTOMER-RECORD
      *    END-EXEC.
      *(( PREPROC ACUSQL LINE END 111 ))
           .
           PERFORM UPDATE-SCREEN-FIELDS.
           DISPLAY CUST-SCREEN.
      *          
       ERROR-EXIT.
           
      *(( PREPROC ACUSQL LINE BEGIN 116 ))
           CONTINUE
      *    EXEC SQL WHENEVER SQLERROR CONTINUE END-EXEC.
      *(( PREPROC ACUSQL LINE END 116 ))
           .
           DISPLAY MESSAGE BOX 
               "SQL ERROR !" NEWLINE
               "       SQLCODE: " SQLCODE OF SQLCA NEWLINE
               "       SQLSTATE: " SQLSTATE OF SQLCA NEWLINE
               "       SQLERRMC: " SQLERRMC OF SQLCA NEWLINE
               NEWLINE
               "Program Aborting.".
           
      *(( PREPROC ACUSQL LINE BEGIN 124 ))
           PERFORM CALL "SQL$START" END-CALL CALL "SQL$DISCONNECTALL"  E
      -    ND-CALL  END-PERFORM
      *    EXEC SQL DISCONNECT ALL END-EXEC.
      *(( PREPROC ACUSQL LINE END 124 ))
           .
           STOP RUN.
      *  
       GET-FIRST-RECORD.
           MOVE 0 TO CUSTOMER-NAME-ENABLED.
           
      *(( PREPROC ACUSQL LINE BEGIN 129 ))
           PERFORM CALL "SQL$START" END-CALL CALL "SQL$BINDCOLUMN" USING
            'SQLCSTMCUR1' 1 CUSTOMER-ID   END-CALL CALL "SQL$BINDCOLUMN"
            USING 'SQLCSTMCUR1' 2 CUSTOMER-NAME   END-CALL CALL "SQL$BIN
      -    "DCOLUMN" USING 'SQLCSTMCUR1' 3 CUSTOMER-ADDR-1   END-CALL CA
      -    LL "SQL$BINDCOLUMN" USING 'SQLCSTMCUR1' 4 CUSTOMER-ADDR-2   E
      -    ND-CALL CALL "SQL$BINDCOLUMN" USING 'SQLCSTMCUR1' 5 CUSTOMER-
      -    CITY   END-CALL CALL "SQL$BINDCOLUMN" USING 'SQLCSTMCUR1' 6 C
      -    USTOMER-STATE   END-CALL CALL "SQL$BINDCOLUMN" USING 'SQLCSTM
      -    'CUR1' 7 CUSTOMER-ZIP   END-CALL CALL "SQL$BINDCOLUMN" USING 
           'SQLCSTMCUR1' 8 CUSTOMER-PHONE   END-CALL CALL "SQL$BINDCOLUM
      -    "N" USING 'SQLCSTMCUR1' 9 CUSTOMER-CONTACT   END-CALL CALL "S
      -    "QL$FETCH" USING 3 0 'CUR1' END-CALL END-PERFORM
      *    EXEC SQL
      *      FETCH FIRST FROM CUR1 INTO :CUSTOMER-RECORD
      *    END-EXEC.
      *(( PREPROC ACUSQL LINE END 131 ))
           .
      *
       GET-PREVIOUS-RECORD.
           MOVE 0 TO CUSTOMER-NAME-ENABLED.
           
      *(( PREPROC ACUSQL LINE BEGIN 135 ))
           PERFORM CALL "SQL$START" END-CALL CALL "SQL$BINDCOLUMN" USING
            'SQLCSTMCUR1' 1 CUSTOMER-ID   END-CALL CALL "SQL$BINDCOLUMN"
            USING 'SQLCSTMCUR1' 2 CUSTOMER-NAME   END-CALL CALL "SQL$BIN
      -    "DCOLUMN" USING 'SQLCSTMCUR1' 3 CUSTOMER-ADDR-1   END-CALL CA
      -    LL "SQL$BINDCOLUMN" USING 'SQLCSTMCUR1' 4 CUSTOMER-ADDR-2   E
      -    ND-CALL CALL "SQL$BINDCOLUMN" USING 'SQLCSTMCUR1' 5 CUSTOMER-
      -    CITY   END-CALL CALL "SQL$BINDCOLUMN" USING 'SQLCSTMCUR1' 6 C
      -    USTOMER-STATE   END-CALL CALL "SQL$BINDCOLUMN" USING 'SQLCSTM
      -    'CUR1' 7 CUSTOMER-ZIP   END-CALL CALL "SQL$BINDCOLUMN" USING 
           'SQLCSTMCUR1' 8 CUSTOMER-PHONE   END-CALL CALL "SQL$BINDCOLUM
      -    "N" USING 'SQLCSTMCUR1' 9 CUSTOMER-CONTACT   END-CALL CALL "S
      -    "QL$FETCH" USING 2 0 'CUR1' END-CALL END-PERFORM
      *    EXEC SQL
      *      FETCH PRIOR FROM CUR1 INTO :CUSTOMER-RECORD
      *    END-EXEC.
      *(( PREPROC ACUSQL LINE END 137 ))
           .
      *
       GET-NEXT-RECORD.
           MOVE 0 TO CUSTOMER-NAME-ENABLED.
           
      *(( PREPROC ACUSQL LINE BEGIN 141 ))
           PERFORM CALL "SQL$START" END-CALL CALL "SQL$BINDCOLUMN" USING
            'SQLCSTMCUR1' 1 CUSTOMER-ID   END-CALL CALL "SQL$BINDCOLUMN"
            USING 'SQLCSTMCUR1' 2 CUSTOMER-NAME   END-CALL CALL "SQL$BIN
      -    "DCOLUMN" USING 'SQLCSTMCUR1' 3 CUSTOMER-ADDR-1   END-CALL CA
      -    LL "SQL$BINDCOLUMN" USING 'SQLCSTMCUR1' 4 CUSTOMER-ADDR-2   E
      -    ND-CALL CALL "SQL$BINDCOLUMN" USING 'SQLCSTMCUR1' 5 CUSTOMER-
      -    CITY   END-CALL CALL "SQL$BINDCOLUMN" USING 'SQLCSTMCUR1' 6 C
      -    USTOMER-STATE   END-CALL CALL "SQL$BINDCOLUMN" USING 'SQLCSTM
      -    'CUR1' 7 CUSTOMER-ZIP   END-CALL CALL "SQL$BINDCOLUMN" USING 
           'SQLCSTMCUR1' 8 CUSTOMER-PHONE   END-CALL CALL "SQL$BINDCOLUM
      -    "N" USING 'SQLCSTMCUR1' 9 CUSTOMER-CONTACT   END-CALL CALL "S
      -    "QL$FETCH" USING 1 0 'CUR1' END-CALL END-PERFORM
      *    EXEC SQL
      *      FETCH NEXT FROM CUR1 INTO :CUSTOMER-RECORD
      *    END-EXEC.
      *(( PREPROC ACUSQL LINE END 143 ))
           .
      *
       GET-LAST-RECORD.
           MOVE 0 TO CUSTOMER-NAME-ENABLED.
           
      *(( PREPROC ACUSQL LINE BEGIN 147 ))
           PERFORM CALL "SQL$START" END-CALL CALL "SQL$BINDCOLUMN" USING
            'SQLCSTMCUR1' 1 CUSTOMER-ID   END-CALL CALL "SQL$BINDCOLUMN"
            USING 'SQLCSTMCUR1' 2 CUSTOMER-NAME   END-CALL CALL "SQL$BIN
      -    "DCOLUMN" USING 'SQLCSTMCUR1' 3 CUSTOMER-ADDR-1   END-CALL CA
      -    LL "SQL$BINDCOLUMN" USING 'SQLCSTMCUR1' 4 CUSTOMER-ADDR-2   E
      -    ND-CALL CALL "SQL$BINDCOLUMN" USING 'SQLCSTMCUR1' 5 CUSTOMER-
      -    CITY   END-CALL CALL "SQL$BINDCOLUMN" USING 'SQLCSTMCUR1' 6 C
      -    USTOMER-STATE   END-CALL CALL "SQL$BINDCOLUMN" USING 'SQLCSTM
      -    'CUR1' 7 CUSTOMER-ZIP   END-CALL CALL "SQL$BINDCOLUMN" USING 
           'SQLCSTMCUR1' 8 CUSTOMER-PHONE   END-CALL CALL "SQL$BINDCOLUM
      -    "N" USING 'SQLCSTMCUR1' 9 CUSTOMER-CONTACT   END-CALL CALL "S
      -    "QL$FETCH" USING 4 0 'CUR1' END-CALL END-PERFORM
      *    EXEC SQL
      *      FETCH LAST FROM CUR1 INTO :CUSTOMER-RECORD
      *    END-EXEC.
      *(( PREPROC ACUSQL LINE END 149 ))
           .
      *
       GET-NEW-RECORD.
           MOVE 1 TO CUSTOMER-NAME-ENABLED.
      *
       DELETE-THE-RECORD.
           DISPLAY MESSAGE BOX "ARE YOU SURE?"
             TITLE "DELETING RECORD..."
             TYPE IS MB-YES-NO,
             DEFAULT IS MB-NO,
             ICON IS MB-WARNING-ICON
             GIVING MB-VALUE.
              
           IF MB-VALUE = MB-YES 
      *                DELETE CURRENT RECORD             
             
      *(( PREPROC ACUSQL LINE BEGIN 164 ))
           PERFORM CALL "SQL$START" END-CALL CALL "SQL$PREPARE" USING 'S
      -    'QLISTM' "DELETE FROM CUSTOMER WHERE CURRENT OF CUR1" END-CAL
      -    L CALL "SQL$EXECUTE" USING 'SQLISTM'  END-CALL CALL "SQL$UNPR
      -    "EPARE" USING 'SQLISTM'  END-CALL END-PERFORM
      *      EXEC SQL 
      *        DELETE FROM CUSTOMER 
      *        WHERE CURRENT OF CUR1
      *      END-EXEC
      *(( PREPROC ACUSQL LINE END 167 ))
           
      *                CLOSE AND REOPEN CURSOR SO CURSOR MATCHES 
      *                CURRENT CONTENTS OF DATABASE                 
             
      *(( PREPROC ACUSQL LINE BEGIN 170 ))
           PERFORM CALL "SQL$START" END-CALL CALL "SQL$CLOSE" USING "CUR
      -    "1" END-CALL CALL "SQL$UNPREPARE" USING 'SQLCSTMCUR1' END-CAL
      -    L  END-PERFORM
      *      EXEC SQL CLOSE CUR1 END-EXEC
      *(( PREPROC ACUSQL LINE END 170 ))
           
             
      *(( PREPROC ACUSQL LINE BEGIN 171 ))
           PERFORM CALL "SQL$START" END-CALL CALL "SQL$PREPARE" USING 'S
      -    'QLCSTMCUR1', "SELECT * FROM CUSTOMER " END-CALL CALL "SQL$CU
      -    "RSOR" USING 'CUR1' 'SQLCSTMCUR1'  END-CALL CALL "SQL$OPEN" U
      -    SING "CUR1" END-CALL END-PERFORM
      *      EXEC SQL OPEN CUR1 END-EXEC
      *(( PREPROC ACUSQL LINE END 171 ))
           
             
      *(( PREPROC ACUSQL LINE BEGIN 172 ))
           PERFORM CALL "SQL$START" END-CALL CALL "SQL$BINDCOLUMN" USING
            'SQLCSTMCUR1' 1 CUSTOMER-ID   END-CALL CALL "SQL$BINDCOLUMN"
            USING 'SQLCSTMCUR1' 2 CUSTOMER-NAME   END-CALL CALL "SQL$BIN
      -    "DCOLUMN" USING 'SQLCSTMCUR1' 3 CUSTOMER-ADDR-1   END-CALL CA
      -    LL "SQL$BINDCOLUMN" USING 'SQLCSTMCUR1' 4 CUSTOMER-ADDR-2   E
      -    ND-CALL CALL "SQL$BINDCOLUMN" USING 'SQLCSTMCUR1' 5 CUSTOMER-
      -    CITY   END-CALL CALL "SQL$BINDCOLUMN" USING 'SQLCSTMCUR1' 6 C
      -    USTOMER-STATE   END-CALL CALL "SQL$BINDCOLUMN" USING 'SQLCSTM
      -    'CUR1' 7 CUSTOMER-ZIP   END-CALL CALL "SQL$BINDCOLUMN" USING 
           'SQLCSTMCUR1' 8 CUSTOMER-PHONE   END-CALL CALL "SQL$BINDCOLUM
      -    "N" USING 'SQLCSTMCUR1' 9 CUSTOMER-CONTACT   END-CALL CALL "S
      -    "QL$FETCH" USING 1 0 'CUR1' END-CALL END-PERFORM
      *      EXEC SQL
      *        FETCH CUR1 INTO :CUSTOMER-RECORD
      *      END-EXEC
      *(( PREPROC ACUSQL LINE END 174 ))
           
           END-IF  .
      *
       WRITE-THE-RECORD.
           MOVE 0 TO CUSTOMER-NAME-ENABLED.
           PERFORM UPDATE-RECORD-FIELDS .
           
      *(( PREPROC ACUSQL LINE BEGIN 180 ))
           PERFORM CALL "SQL$START" END-CALL CALL "SQL$PREPARE" USING 'S
      -    'QLISTM' "INSERT INTO CUSTOMER VALUES (?,?,?, ?,?,?, ?,?,?)" 
           END-CALL CALL "SQL$BINDPARAMETER" USING 'SQLISTM' 1 CUSTOMER-
      -    ID OF CUSTOMER-RECORD   END-CALL CALL "SQL$BINDPARAMETER" USI
      -    NG 'SQLISTM' 2 CUSTOMER-NAME OF CUSTOMER-RECORD   END-CALL CA
      -    LL "SQL$BINDPARAMETER" USING 'SQLISTM' 3 CUSTOMER-ADDR-1 OF C
      -    USTOMER-RECORD   END-CALL CALL "SQL$BINDPARAMETER" USING 'SQL
      -    'ISTM' 4 CUSTOMER-ADDR-2 OF CUSTOMER-RECORD   END-CALL CALL "
      -    "SQL$BINDPARAMETER" USING 'SQLISTM' 5 CUSTOMER-CITY OF CUSTOM
      -    ER-RECORD   END-CALL CALL "SQL$BINDPARAMETER" USING 'SQLISTM'
            6 CUSTOMER-STATE OF CUSTOMER-RECORD   END-CALL CALL "SQL$BIN
      -    "DPARAMETER" USING 'SQLISTM' 7 CUSTOMER-ZIP OF CUSTOMER-RECOR
      -    D   END-CALL CALL "SQL$BINDPARAMETER" USING 'SQLISTM' 8 CUSTO
      -    MER-PHONE OF CUSTOMER-RECORD   END-CALL CALL "SQL$BINDPARAMET
      -    "ER" USING 'SQLISTM' 9 CUSTOMER-CONTACT OF CUSTOMER-RECORD   
           END-CALL CALL "SQL$EXECUTE" USING 'SQLISTM'  END-CALL CALL "S
      -    "QL$UNPREPARE" USING 'SQLISTM'  END-CALL END-PERFORM
      *    EXEC SQL 
      *      INSERT INTO CUSTOMER VALUES
      *       (:CUSTOMER-ID,:CUSTOMER-NAME,:CUSTOMER-ADDR-1,
      *        :CUSTOMER-ADDR-2,:CUSTOMER-CITY,:CUSTOMER-STATE,
      *        :CUSTOMER-ZIP,:CUSTOMER-PHONE,:CUSTOMER-CONTACT)
      *    END-EXEC.
      *(( PREPROC ACUSQL LINE END 185 ))
           .
      *
      *{Bench}copy-procedure
       COPY "showmsg.cpy".
       COPY "custsql.prd".
       COPY "custsql.mnu".
       COPY "custsql.evt".
      *{Bench}end
           
       
